<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stb__vorbis_8c" kind="file" language="C++">
    <compoundname>stb_vorbis.c</compoundname>
    <includes refid="stb__vorbis_8h" local="yes">stb_vorbis.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">malloc.h</includes>
    <incdepgraph>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>malloc.h</label>
      </node>
      <node id="1">
        <label>/home/ck84/src/Maximilian/src/libs/stb_vorbis.c</label>
        <link refid="stb__vorbis_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stb_vorbis.h</label>
        <link refid="stb__vorbis_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structCodebook" prot="public">Codebook</innerclass>
    <innerclass refid="structFloor0" prot="public">Floor0</innerclass>
    <innerclass refid="structFloor1" prot="public">Floor1</innerclass>
    <innerclass refid="unionFloor" prot="public">Floor</innerclass>
    <innerclass refid="structResidue" prot="public">Residue</innerclass>
    <innerclass refid="structMappingChannel" prot="public">MappingChannel</innerclass>
    <innerclass refid="structMapping" prot="public">Mapping</innerclass>
    <innerclass refid="structMode" prot="public">Mode</innerclass>
    <innerclass refid="structCRCscan" prot="public">CRCscan</innerclass>
    <innerclass refid="structProbedPage" prot="public">ProbedPage</innerclass>
    <innerclass refid="structstb__vorbis" prot="public">stb_vorbis</innerclass>
    <innerclass refid="structVorbisPoint" prot="public">VorbisPoint</innerclass>
    <innerclass refid="unionfloat__conv" prot="public">float_conv</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb__vorbis_8c_1ac8616da99977cbd16f6b6cd0d4c947df" prot="public" static="no">
        <name>STB_VORBIS_MAX_CHANNELS</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="72" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a89065f619109d612aadfeea480fcc38f" prot="public" static="no">
        <name>STB_VORBIS_PUSHDATA_CRC_COUNT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="88" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a42fed8d4cc187ad72ac8a8e09b98a169" prot="public" static="no">
        <name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="97" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1aabcc470f653273b1bc381f69a3b37bfc" prot="public" static="no">
        <name>STB_VORBIS_FAST_HUFFMAN_SHORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="111" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a3dab561a1030c8d1113156f3bfa02df8" prot="public" static="no">
        <name>STB_VORBIS_CODEBOOK_FLOATS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="145" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a648fecb5222c45c687d8aa40e63a1242" prot="public" static="no">
        <name>STB_VORBIS_ENDIAN</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="185" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1af93b819ac40799ac392e16f6a90729fd" prot="public" static="no">
        <name>__forceinline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="214" column="19" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a132e82a3e3172536840b66279fe79cdb" prot="public" static="no">
        <name>MAX_BLOCKSIZE_LOG</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="227" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1af8a1d2ed31f7c9a00fec46a798edb61b" prot="public" static="no">
        <name>MAX_BLOCKSIZE</name>
        <initializer>(1 &lt;&lt; MAX_BLOCKSIZE_LOG)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="228" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="239" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="240" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a29853ba560b0648c7eaef420322b79db" prot="public" static="no">
        <name>FAST_HUFFMAN_TABLE_SIZE</name>
        <initializer>(1 &lt;&lt; STB_VORBIS_FAST_HUFFMAN_LENGTH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="262" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a327d73597c7d58637bc626518c731e74" prot="public" static="no">
        <name>FAST_HUFFMAN_TABLE_MASK</name>
        <initializer>(FAST_HUFFMAN_TABLE_SIZE - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="263" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a82e8e9e2bbd0dd089edf1ded004c837f" prot="public" static="no">
        <name>stb_prof</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="487" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a2a9cd26d6325f220d322d7e5347c802b" prot="public" static="no">
        <name>IS_PUSH_MODE</name>
        <param><defname>f</defname></param>
        <initializer>((f)-&gt;push_mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="495" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a6aefe202c0399c3940251d8c9d2e8191" prot="public" static="no">
        <name>array_size_required</name>
        <param><defname>count</defname></param>
        <param><defname>size</defname></param>
        <initializer>(count*(sizeof(void *)+(size)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="515" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a18bff79a06523cdbdcf30e3c7ee88d3e" prot="public" static="no">
        <name>temp_alloc</name>
        <param><defname>f</defname></param>
        <param><defname>size</defname></param>
        <initializer>(f-&gt;alloc.alloc_buffer ? setup_temp_malloc(f,size) : alloca(size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="517" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a2ae34dbb4c575226ac7fe7e064bdba32" prot="public" static="no">
        <name>temp_free</name>
        <param><defname>f</defname></param>
        <param><defname>p</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="521" column="10" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a0348ae28ddb0f5fe40e4f31be9392d8b" prot="public" static="no">
        <name>temp_alloc_save</name>
        <param><defname>f</defname></param>
        <initializer>((f)-&gt;temp_offset)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="523" column="10" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a312e087f6b96d2784f4f691791de8024" prot="public" static="no">
        <name>temp_alloc_restore</name>
        <param><defname>f</defname></param>
        <param><defname>p</defname></param>
        <initializer>((f)-&gt;temp_offset = (p))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="524" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a89dd36235e7b6a3ecc52fed6bb11b87b" prot="public" static="no">
        <name>temp_block_array</name>
        <param><defname>f</defname></param>
        <param><defname>count</defname></param>
        <param><defname>size</defname></param>
        <initializer>make_block_array(temp_alloc(f,array_size_required(count,size)), count, size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="526" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a39e1b7cfc3c0d80ea907e6486d288796" prot="public" static="no">
        <name>CRC32_POLY</name>
        <initializer>0x04c11db7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="580" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846264f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="636" column="11" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a4e39aa88524d5256414c688880a0a8bb" prot="public" static="no">
        <name>NO_CODE</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="640" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1abffa4dff1f2cb303b2501ea2dea75e6f" prot="public" static="no">
        <name>USE_MEMORY</name>
        <param><defname>z</defname></param>
        <initializer>((z)-&gt;stream)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="914" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a6a3999c21c1e5e522959ef3b98418cb8" prot="public" static="no">
        <name>PAGEFLAG_continued_packet</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1020" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a7e2cff6293266e5366a11d082aaafd64" prot="public" static="no">
        <name>PAGEFLAG_first_page</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1021" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a4136c4035568b91645d4a6896fbe9cec" prot="public" static="no">
        <name>PAGEFLAG_last_page</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1022" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a734579b908509b57151ac02b946056d1" prot="public" static="no">
        <name>EOP</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1141" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a4aaa7b300d74e1fe252792111eb7539a" prot="public" static="no">
        <name>INVALID_BITS</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1142" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a0c23d1b38c11a185d8cf8a30010f5537" prot="public" static="no">
        <name>DECODE_RAW</name>
        <param><defname>var</defname></param>
        <param><defname>f</defname></param>
        <param><defname>c</defname></param>
        <initializer>   if (f-&gt;valid_bits &lt; STB_VORBIS_FAST_HUFFMAN_LENGTH)        \
      prep_huffman(f);                                        \
   var = f-&gt;acc &amp; FAST_HUFFMAN_TABLE_MASK;                    \
   var = c-&gt;fast_huffman[var];                                \
   if (var &gt;= 0) {                                            \
      int n = c-&gt;codeword_lengths[var];                       \
      f-&gt;acc &gt;&gt;= n;                                           \
      f-&gt;valid_bits -= n;                                     \
      if (f-&gt;valid_bits &lt; 0) { f-&gt;valid_bits = 0; var = -1; } \
   } else {                                                   \
      var = codebook_decode_scalar_raw(f,c);                  \
   }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1314" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1ac9e9bac3b3e48646f9a430d0c7411ae5" prot="public" static="no">
        <name>DECODE</name>
        <param><defname>var</defname></param>
        <param><defname>f</defname></param>
        <param><defname>c</defname></param>
        <initializer>   DECODE_RAW(var,f,c)                                        \
   if (c-&gt;sparse) var = c-&gt;sorted_values[var];</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1334" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1ae8daba892ecc7da0dace8b1a1f7d2a18" prot="public" static="no">
        <name>DECODE_VQ</name>
        <param><defname>var</defname></param>
        <param><defname>f</defname></param>
        <param><defname>c</defname></param>
        <initializer>DECODE_RAW(var,f,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1339" column="11" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a5b6245aaf9581e321d78824f20c6a3e2" prot="public" static="no">
        <name>CODEBOOK_ELEMENT</name>
        <param><defname>c</defname></param>
        <param><defname>off</defname></param>
        <initializer>(c-&gt;multiplicands[off])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1356" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a9e735a57f48058426af3c58dd3435965" prot="public" static="no">
        <name>CODEBOOK_ELEMENT_FAST</name>
        <param><defname>c</defname></param>
        <param><defname>off</defname></param>
        <initializer>(c-&gt;multiplicands[off])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1357" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a9b19f433a0affa1ccf53e080bd9f908f" prot="public" static="no">
        <name>CODEBOOK_ELEMENT_BASE</name>
        <param><defname>c</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1358" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a01d2d5321eca3aed48a939b7b4f5164b" prot="public" static="no">
        <name>LINE_OP</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>a *= b</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1679" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a85274fc4609880d74f6b4f9e8c85a273" prot="public" static="no">
        <name>LIBVORBIS_MDCT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2061" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a143d61ff41bad3fa7c278a440d02e271" prot="public" static="no">
        <name>SAMPLE_unknown</name>
        <initializer>0xffffffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4181" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a67e49a8a3499ae7b17bcb5ccb499eb48" prot="public" static="no">
        <name>PLAYBACK_MONO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4704" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a1dd9dae616d5194730d0261cccfa26f7" prot="public" static="no">
        <name>PLAYBACK_LEFT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4705" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a5e0bc7897855e12b666ccf034fc0b6da" prot="public" static="no">
        <name>PLAYBACK_RIGHT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4706" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53" prot="public" static="no">
        <name>L</name>
        <initializer>(PLAYBACK_LEFT  | PLAYBACK_MONO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4708" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b" prot="public" static="no">
        <name>C</name>
        <initializer>(PLAYBACK_LEFT  | PLAYBACK_RIGHT | PLAYBACK_MONO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4709" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031" prot="public" static="no">
        <name>R</name>
        <initializer>(PLAYBACK_RIGHT | PLAYBACK_MONO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4710" column="9" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a200ac0447d052a2baaf3dfded88e3954" prot="public" static="no">
        <name>FASTDEF</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="unionfloat__conv" kindref="compound">float_conv</ref> x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4730" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a9e544ec1d282f0d9630c09e0313abc76" prot="public" static="no">
        <name>MAGIC</name>
        <param><defname>SHIFT</defname></param>
        <initializer>(1.5f * (1 &lt;&lt; (23-SHIFT)) + 0.5f/(1 &lt;&lt; SHIFT))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4732" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1aaee1afdab464950c6c0eb917fdbfcb70" prot="public" static="no">
        <name>ADDEND</name>
        <param><defname>SHIFT</defname></param>
        <initializer>(((150-SHIFT) &lt;&lt; 23) + (1 &lt;&lt; 22))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4733" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1ac741112328b2e6d25852d76efa030708" prot="public" static="no">
        <name>FAST_SCALED_FLOAT_TO_INT</name>
        <param><defname>temp</defname></param>
        <param><defname>x</defname></param>
        <param><defname>s</defname></param>
        <initializer>(temp.f = (x) + MAGIC(s), temp.i - ADDEND(s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4734" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a9ae36ddc885a1a5859cb4b7b3ec364bb" prot="public" static="no">
        <name>check_endianness</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4735" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a6b20d41d6252e9871430c242cb1a56e7" prot="public" static="no">
        <name>BUFFER_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4757" column="12"/>
      </memberdef>
      <memberdef kind="define" id="stb__vorbis_8c_1a6b20d41d6252e9871430c242cb1a56e7" prot="public" static="no">
        <name>BUFFER_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4783" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stb__vorbis_8c_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="stb__vorbis_8c_1a06fc87d81c62e9abb8790b6e5713c55ba80ba889feb2380990384b027bd2905b4" prot="public">
          <name>VORBIS_packet_id</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__vorbis_8c_1a06fc87d81c62e9abb8790b6e5713c55ba01e28b89a67bc5705d2c44c1221fce8d" prot="public">
          <name>VORBIS_packet_comment</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__vorbis_8c_1a06fc87d81c62e9abb8790b6e5713c55ba20b3079d6deb5a9d07566234f8f0eb1d" prot="public">
          <name>VORBIS_packet_setup</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1231" column="1" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1232" bodyend="1236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stb__vorbis_8c_1adde6aaee8457bee49c2a92621fe22b79" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uint8</definition>
        <argsstring></argsstring>
        <name>uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="231" column="24" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a1b956fe1df85f3c132b21edb4e116458" prot="public" static="no">
        <type>signed char</type>
        <definition>typedef signed char int8</definition>
        <argsstring></argsstring>
        <name>int8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="232" column="25" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short uint16</definition>
        <argsstring></argsstring>
        <name>uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="233" column="24" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a259fa4834387bd68627ddf37bb3ebdb9" prot="public" static="no">
        <type>signed short</type>
        <definition>typedef signed short int16</definition>
        <argsstring></argsstring>
        <name>int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="234" column="25" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a1134b580f8da4de94ca6b1de4d37975e" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uint32</definition>
        <argsstring></argsstring>
        <name>uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="235" column="24" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a43d43196463bde49cb067f5c20ab8481" prot="public" static="no">
        <type>signed int</type>
        <definition>typedef signed int int32</definition>
        <argsstring></argsstring>
        <name>int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="236" column="25" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a20d3044e421c0bea1119854fdb687f75" prot="public" static="no">
        <type>float</type>
        <definition>typedef float codetype</definition>
        <argsstring></argsstring>
        <name>codetype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="244" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1ad2a08bf33a1eb072ed9e2aef4f36a827" prot="public" static="no">
        <type>struct <ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref></type>
        <definition>typedef struct stb_vorbis vorb</definition>
        <argsstring></argsstring>
        <name>vorb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="483" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1ac09448f53783c6802f40f2f56976c4c9" prot="public" static="no">
        <type>int16</type>
        <definition>typedef int16 YTYPE</definition>
        <argsstring></argsstring>
        <name>YTYPE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2766" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__vorbis_8c_1a5bf83e3a39c0410652eab86fc787757c" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb_vorbis_float_size_test[sizeof(float)==4 &amp;&amp;sizeof(int)==4]</definition>
        <argsstring>[sizeof(float)==4 &amp;&amp;sizeof(int)==4]</argsstring>
        <name>stb_vorbis_float_size_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4729" column="17" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4729" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stb__vorbis_8c_1ab84d86226891c4e5313fbcb233e8522a" prot="public" static="yes" mutable="no">
        <type>uint32</type>
        <definition>uint32 crc_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>crc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="582" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__vorbis_8c_1a6c182fcfc46ce08070a418bc84f8ae6f" prot="public" static="yes" mutable="no">
        <type>uint8</type>
        <definition>uint8 ogg_page_header[4]</definition>
        <argsstring>[4]</argsstring>
        <name>ogg_page_header</name>
        <initializer>= { 0x4f, 0x67, 0x67, 0x53 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1009" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__vorbis_8c_1a2d84d66ea30692e28beb165684bf7467" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float inverse_db_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>inverse_db_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1602" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__vorbis_8c_1aad88136bffad4850ad0bde1935b3fd3c" prot="public" static="yes" mutable="no">
        <type>int8</type>
        <definition>int8 channel_position[7][6]</definition>
        <argsstring>[7][6]</argsstring>
        <name>channel_position</name>
        <initializer>=
{
   { 0 },
   { C },
   { L, R },
   { L, C, R },
   { L, R, L, R },
   { L, C, R, L, R },
   { L, C, R, L, R, C },
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4712" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__vorbis_8c_1a5196a98e98ed6ce919fafd5a9a4a63fd" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int channel_selector[3][2]</definition>
        <argsstring>[3][2]</argsstring>
        <name>channel_selector</name>
        <initializer>= { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4780" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4780" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__vorbis_8c_1a8cf235fbae6f65df5c040e4190c92d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int my_prof</definition>
        <argsstring>(int slot)</argsstring>
        <name>my_prof</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="483" column="12" declfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" declline="483" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ac82b8c9b54374ba066cd1d67535db759" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int error</definition>
        <argsstring>(vorb *f, enum STBVorbisError e)</argsstring>
        <name>error</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>enum STBVorbisError</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="500" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="500" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ad10fdfae30186e6ec05e1edfa38711d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* make_block_array</definition>
        <argsstring>(void *mem, int count, int size)</argsstring>
        <name>make_block_array</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="529" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="529" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aac6cd4e7146fa8a93e7948ca91dbe761" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* setup_malloc</definition>
        <argsstring>(vorb *f, int sz)</argsstring>
        <name>setup_malloc</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="541" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="541" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ac704d1fb7537cecedb49880f89e3d4c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setup_free</definition>
        <argsstring>(vorb *f, void *p)</argsstring>
        <name>setup_free</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="554" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="554" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ae224b22df920eb4ae1fffc361c7f6705" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* setup_temp_malloc</definition>
        <argsstring>(vorb *f, int sz)</argsstring>
        <name>setup_temp_malloc</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="560" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="560" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1e610232772a607b7cc0708ab669f37e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setup_temp_free</definition>
        <argsstring>(vorb *f, void *p, size_t sz)</argsstring>
        <name>setup_temp_free</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="571" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="571" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1abe10d610947fad29dc7da8dd5c9102cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void crc32_init</definition>
        <argsstring>(void)</argsstring>
        <name>crc32_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="583" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="583" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ab881762c0aedcc90c23baebf665689ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__forceinline uint32</type>
        <definition>static __forceinline uint32 crc32_update</definition>
        <argsstring>(uint32 crc, uint8 byte)</argsstring>
        <name>crc32_update</name>
        <param>
          <type>uint32</type>
          <declname>crc</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="594" column="29" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="594" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a542f71e2346686fe6a55bf5120244ef1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int bit_reverse</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>bit_reverse</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="601" column="21" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="601" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ab4e658e91488d601fcdb2e5b4272f34c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float square</definition>
        <argsstring>(float x)</argsstring>
        <name>square</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="610" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a94f6f15215da4d7ceba43deb26dc56ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ilog</definition>
        <argsstring>(int32 n)</argsstring>
        <name>ilog</name>
        <param>
          <type>int32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="618" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="618" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a98562f52de8e1f8063d6eb82f214611a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float float32_unpack</definition>
        <argsstring>(uint32 x)</argsstring>
        <name>float32_unpack</name>
        <param>
          <type>uint32</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="647" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="647" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a81db9c94859027de05d1220875553743" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_entry</definition>
        <argsstring>(Codebook *c, uint32 huff_code, int symbol, int count, int len, uint32 *values)</argsstring>
        <name>add_entry</name>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>huff_code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="665" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="665" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ae7ba3312418a34d976520bbc7ab55af0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compute_codewords</definition>
        <argsstring>(Codebook *c, uint8 *len, int n, uint32 *values)</argsstring>
        <name>compute_codewords</name>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="676" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="676" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a6aefa5aff7d45ee392b635c5bb00da92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_accelerated_huffman</definition>
        <argsstring>(Codebook *c)</argsstring>
        <name>compute_accelerated_huffman</name>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="722" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="722" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a179271ef16276a7b1d651061e1252171" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int uint32_compare</definition>
        <argsstring>(const void *p, const void *q)</argsstring>
        <name>uint32_compare</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="744" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="744" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a50e0e3cacff564a798ff6af9757c6c56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int include_in_sort</definition>
        <argsstring>(Codebook *c, uint8 len)</argsstring>
        <name>include_in_sort</name>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="751" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="751" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a581f56658f28414dd6c8ad7f6c8be946" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_sorted_huffman</definition>
        <argsstring>(Codebook *c, uint8 *lengths, uint32 *values)</argsstring>
        <name>compute_sorted_huffman</name>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>lengths</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="761" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="761" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a39d05227f2d03349ed8145ef2f4894dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_validate</definition>
        <argsstring>(uint8 *data)</argsstring>
        <name>vorbis_validate</name>
        <param>
          <type>uint8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="815" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="815" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1d459bbaeaef13eceb838435186bed5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int lookup1_values</definition>
        <argsstring>(int entries, int dim)</argsstring>
        <name>lookup1_values</name>
        <param>
          <type>int</type>
          <declname>entries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="823" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="823" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1abf2cb3abde564c3e75b99fe310246ec2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_twiddle_factors</definition>
        <argsstring>(int n, float *A, float *B, float *C)</argsstring>
        <name>compute_twiddle_factors</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="834" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="834" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ab50d2b9fee9480753dde67676805436e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_window</definition>
        <argsstring>(int n, float *window)</argsstring>
        <name>compute_window</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="851" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="851" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a586d763636038c3ecccad6e29defb48f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_bitreverse</definition>
        <argsstring>(int n, uint16 *rev)</argsstring>
        <name>compute_bitreverse</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint16 *</type>
          <declname>rev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="858" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="858" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a9e29b85aad22d33e3889a68769d07406" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int init_blocksize</definition>
        <argsstring>(vorb *f, int b, int n)</argsstring>
        <name>init_blocksize</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="866" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="866" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aabe094ce8adb33b4e18265cbe137b357" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void neighbors</definition>
        <argsstring>(uint16 *x, int n, int *plow, int *phigh)</argsstring>
        <name>neighbors</name>
        <param>
          <type>uint16 *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>plow</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>phigh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="883" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="883" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a063fab2864f2199b4657de5af6bb2b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int point_compare</definition>
        <argsstring>(const void *p, const void *q)</argsstring>
        <name>point_compare</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="900" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="900" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a0f984581c1d84f5d0edc90b0465394dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>static uint8 get8</definition>
        <argsstring>(vorb *z)</argsstring>
        <name>get8</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="917" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="917" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a405ae53a748b7fd35bad693961e98b82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>static uint32 get32</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>get32</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="933" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="933" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a555ec1f42cbabe2147a30e76069429bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getn</definition>
        <argsstring>(vorb *z, uint8 *data, int n)</argsstring>
        <name>getn</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="943" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="943" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a4d6eaa5a6d24e7a91e23cc964c7accdb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void skip</definition>
        <argsstring>(vorb *z, int n)</argsstring>
        <name>skip</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="962" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="962" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1acf08b4edff3d62e24dfd53b362c1fb2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int set_file_offset</definition>
        <argsstring>(stb_vorbis *f, unsigned int loc)</argsstring>
        <name>set_file_offset</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="977" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="977" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a46c60ff911cf8297b81b27ea60109a6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int capture_pattern</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>capture_pattern</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1011" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1011" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a21d5b3c726401e09f95cc9d6390d30ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int start_page_no_capturepattern</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>start_page_no_capturepattern</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1024" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1024" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aebd974de98d5d54df7173eab0fb4d767" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int start_page</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>start_page</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1078" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1078" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1b2f0fe01246d3e418bb4f60d6fb412e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int start_packet</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>start_packet</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1084" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1084" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af1f294983a5f5d7f27c8626e8eb817bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int maybe_start_packet</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>maybe_start_packet</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1099" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1099" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a7b83b5441d97370b5190c489f7f88c07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int next_segment</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>next_segment</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1120" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1120" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aa4cf210152fb58a7776e53131ac8f9a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get8_packet_raw</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>get8_packet_raw</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1144" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1144" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a152d187830c1cbfe83d93bc516c78ee0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get8_packet</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>get8_packet</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1160" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1160" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a6fb6fa70d273637b217036123c4fca2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flush_packet</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>flush_packet</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1167" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1167" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a2648c29b2435d8df359b0f821356f4a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>static uint32 get_bits</definition>
        <argsstring>(vorb *f, int n)</argsstring>
        <name>get_bits</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1174" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1174" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ad659a478307591c5ebd417ec135b76d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 get_bits_signed</definition>
        <argsstring>(vorb *f, int n)</argsstring>
        <name>get_bits_signed</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1204" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1204" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ab63c3ca4f49cdeb35a36030450e75b20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__forceinline void</type>
        <definition>static __forceinline void prep_huffman</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>prep_huffman</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1216" column="27" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1216" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aceb4b599698d7d48437986eb228f12d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_scalar_raw</definition>
        <argsstring>(vorb *f, Codebook *c)</argsstring>
        <name>codebook_decode_scalar_raw</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1238" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1238" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a42d5651e251173acf50368e41cfdd6ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_scalar</definition>
        <argsstring>(vorb *f, Codebook *c)</argsstring>
        <name>codebook_decode_scalar</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1295" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1295" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a241686795b552528507940013d4b3d69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_start</definition>
        <argsstring>(vorb *f, Codebook *c, int len)</argsstring>
        <name>codebook_decode_start</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1361" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1361" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a561649cb26af7064276a55775d36fb48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode</definition>
        <argsstring>(vorb *f, Codebook *c, float *output, int len)</argsstring>
        <name>codebook_decode</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1381" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1381" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aa5a66fad8c04e4697d464bc0b048a934" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_step</definition>
        <argsstring>(vorb *f, Codebook *c, float *output, int len, int step)</argsstring>
        <name>codebook_decode_step</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1420" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1420" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a96bd30aba105b2e02c8fd42e4b361c56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_deinterleave_repeat</definition>
        <argsstring>(vorb *f, Codebook *c, float **outputs, int ch, int *c_inter_p, int *p_inter_p, int len, int total_decode)</argsstring>
        <name>codebook_decode_deinterleave_repeat</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c_inter_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_inter_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>total_decode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1451" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1451" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aad71aa245e663a464d7c7fa77e5c0864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int codebook_decode_deinterleave_repeat_2</definition>
        <argsstring>(vorb *f, Codebook *c, float **outputs, int *c_inter_p, int *p_inter_p, int len, int total_decode)</argsstring>
        <name>codebook_decode_deinterleave_repeat_2</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c_inter_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_inter_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>total_decode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1519" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1519" bodyend="1588"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a70c46764258ff987cb266b1c7347125b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int predict_point</definition>
        <argsstring>(int x, int x0, int x1, int y0, int y1)</argsstring>
        <name>predict_point</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1591" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1591" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af97eb483c6cd9da74f5412e125d32e3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__forceinline void</type>
        <definition>static __forceinline void draw_line</definition>
        <argsstring>(float *output, int x0, int y0, int x1, int y1, int n)</argsstring>
        <name>draw_line</name>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1690" column="27" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1690" bodyend="1735"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a0e61c880d435afadab734d21e19051dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int residue_decode</definition>
        <argsstring>(vorb *f, Codebook *book, float *target, int offset, int n, int rtype)</argsstring>
        <name>residue_decode</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structCodebook" kindref="compound">Codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1737" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1737" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a87db31fb5fc32b37165fc1827659ccd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void decode_residue</definition>
        <argsstring>(vorb *f, float *residue_buffers[], int ch, int n, int rn, uint8 *do_not_decode)</argsstring>
        <name>decode_residue</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residue_buffers</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>do_not_decode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="1756" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="1756" bodyend="1978"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aca5d5a08cc6340a894cc5c1e088fef74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dct_iv_slow</definition>
        <argsstring>(float *buffer, int n)</argsstring>
        <name>dct_iv_slow</name>
        <param>
          <type>float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2027" column="6" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2027" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1adf61a16363044ccc45d171d7a1a11296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inverse_mdct_slow</definition>
        <argsstring>(float *buffer, int n, vorb *f, int blocktype)</argsstring>
        <name>inverse_mdct_slow</name>
        <param>
          <type>float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocktype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2046" column="6" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2046" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ab216a9e52bf26cb46b4874f555899da8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void imdct_step3_iter0_loop</definition>
        <argsstring>(int n, float *e, int i_off, int k_off, float *A)</argsstring>
        <name>imdct_step3_iter0_loop</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_off</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_off</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2104" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2104" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a201c53b93e119d3fef4e41920320e334" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void imdct_step3_inner_r_loop</definition>
        <argsstring>(int lim, float *e, int d0, int k_off, float *A, int k1)</argsstring>
        <name>imdct_step3_inner_r_loop</name>
        <param>
          <type>int</type>
          <declname>lim</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_off</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2149" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2149" bodyend="2197"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ae8a1a44be24f7d3ee0c0d0e836cf5ce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void imdct_step3_inner_s_loop</definition>
        <argsstring>(int n, float *e, int i_off, int k_off, float *A, int a_off, int k0)</argsstring>
        <name>imdct_step3_inner_s_loop</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_off</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k_off</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_off</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2199" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2199" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1aa2d6943b29d7338e7b455b850a705789" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__forceinline void</type>
        <definition>static __forceinline void iter_54</definition>
        <argsstring>(float *z)</argsstring>
        <name>iter_54</name>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2250" column="27" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2250" bodyend="2280"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af11a922e7487f29ec25aa79994809b69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void imdct_step3_inner_s_loop_ld654</definition>
        <argsstring>(int n, float *e, int i_off, float *A, int base_n)</argsstring>
        <name>imdct_step3_inner_s_loop_ld654</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_off</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2282" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2282" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a2e2132990896173bb06be9688d6dc8e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void inverse_mdct</definition>
        <argsstring>(float *buffer, int n, vorb *f, int blocktype)</argsstring>
        <name>inverse_mdct</name>
        <param>
          <type>float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocktype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2327" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2327" bodyend="2626"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a878f5cc6002c74ee5fbb8518db956e29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>static float* get_window</definition>
        <argsstring>(vorb *f, int len)</argsstring>
        <name>get_window</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2756" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2756" bodyend="2763"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a88d8a447d197a1901d4478f5bb2bc54f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int do_floor</definition>
        <argsstring>(vorb *f, Mapping *map, int i, int n, float *target, YTYPE *finalY, uint8 *step2_flag)</argsstring>
        <name>do_floor</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structMapping" kindref="compound">Mapping</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>YTYPE *</type>
          <declname>finalY</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>step2_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2770" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2770" bodyend="2801"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a5b4087d7de72a96571b9dd330c8565ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_decode_initial</definition>
        <argsstring>(vorb *f, int *p_left_start, int *p_left_end, int *p_right_start, int *p_right_end, int *mode)</argsstring>
        <name>vorbis_decode_initial</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_left_start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_left_end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_right_start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_right_end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2803" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2803" bodyend="2856"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ad2fd064ed6ab4f21ceb0811043d2e2ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_decode_packet_rest</definition>
        <argsstring>(vorb *f, int *len, Mode *m, int left_start, int left_end, int right_start, int right_end, int *p_left)</argsstring>
        <name>vorbis_decode_packet_rest</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structMode" kindref="compound">Mode</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right_end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="2858" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="2858" bodyend="3117"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af3fc69e25cfbecc2c06dc99111ca2376" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_decode_packet</definition>
        <argsstring>(vorb *f, int *len, int *p_left, int *p_right)</argsstring>
        <name>vorbis_decode_packet</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_left</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3119" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3119" bodyend="3124"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ad0a44dad1cfeece597e092f17c220fd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_finish_frame</definition>
        <argsstring>(stb_vorbis *f, int len, int left, int right)</argsstring>
        <name>vorbis_finish_frame</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3126" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3126" bodyend="3176"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af1c394b6181c9f9158f2280247a255a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vorbis_pump_first_frame</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>vorbis_pump_first_frame</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3178" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3178" bodyend="3183"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ac03e08dbc067bff35614de66ff13292d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int is_whole_packet_present</definition>
        <argsstring>(stb_vorbis *f, int end_page)</argsstring>
        <name>is_whole_packet_present</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end_page</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3186" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3186" bodyend="3248"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a94a1e3b9d0b481b177abd37440d1f588" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int start_decoder</definition>
        <argsstring>(vorb *f)</argsstring>
        <name>start_decoder</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3251" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3251" bodyend="3773"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a48c0c72ce31516c75b00398a9f606bcf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vorbis_deinit</definition>
        <argsstring>(stb_vorbis *p)</argsstring>
        <name>vorbis_deinit</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3775" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3775" bodyend="3822"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a62e24c7701befde6400390409cdfc0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stb_vorbis_close</definition>
        <argsstring>(stb_vorbis *p)</argsstring>
        <name>stb_vorbis_close</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3824" column="6" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3824" bodyend="3829"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a6a613c9f0bffe83403bf8eaeb82ade96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vorbis_init</definition>
        <argsstring>(stb_vorbis *p, stb_vorbis_alloc *z)</argsstring>
        <name>vorbis_init</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3831" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3831" bodyend="3848"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a9b01e61138433dce092f334f2a449b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_sample_offset</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_get_sample_offset</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3850" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3850" bodyend="3856"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a3a3b2986c40459438b26b2cf7747c171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis__info" kindref="compound">stb_vorbis_info</ref></type>
        <definition>stb_vorbis_info stb_vorbis_get_info</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_get_info</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3858" column="17" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3858" bodyend="3868"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1abc16af7813a3c8320ff4dd5dd215cd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_error</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_get_error</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3870" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3870" bodyend="3875"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1f8aa7bcdce503cd6a8355c408ed3881" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>static stb_vorbis* vorbis_alloc</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>vorbis_alloc</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3877" column="20" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3877" bodyend="3881"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a30e9bdeec5be888c7b5090415e7dce42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stb_vorbis_flush_pushdata</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_flush_pushdata</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3885" column="6" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3885" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ae93de50d398d5e36015c120e6e238296" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_search_for_page_pushdata</definition>
        <argsstring>(vorb *f, uint8 *data, int data_len)</argsstring>
        <name>vorbis_search_for_page_pushdata</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">vorb</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3897" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3897" bodyend="3985"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a2baa88854eed0ffe8a3fadb04d272913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_decode_frame_pushdata</definition>
        <argsstring>(stb_vorbis *f, uint8 *data, int data_len, int *channels, float ***output, int *samples)</argsstring>
        <name>stb_vorbis_decode_frame_pushdata</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>float ***</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="3988" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="3988" bodyend="4056"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a8e6016012a1f918ce1bb145646e6e854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>stb_vorbis* stb_vorbis_open_pushdata</definition>
        <argsstring>(unsigned char *data, int data_len, int *data_used, int *error, stb_vorbis_alloc *alloc)</argsstring>
        <name>stb_vorbis_open_pushdata</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>data_used</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4058" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4058" bodyend="4085"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a91bf63ae7792007878687351cc9eb02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int stb_vorbis_get_file_offset</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_get_file_offset</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4088" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4088" bodyend="4097"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a40ebfd551b9b02fbe09392e0602b27a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>static uint32 vorbis_find_page</definition>
        <argsstring>(stb_vorbis *f, uint32 *end, uint32 *last)</argsstring>
        <name>vorbis_find_page</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4104" column="15" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4104" bodyend="4174"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a5c6e81f801e00fed7f45f68d97b025d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_analyze_page</definition>
        <argsstring>(stb_vorbis *f, ProbedPage *z)</argsstring>
        <name>vorbis_analyze_page</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structProbedPage" kindref="compound">ProbedPage</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4193" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4193" bodyend="4316"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a87a047ea2862f3a25793d1bbec8f2c98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_seek_frame_from_page</definition>
        <argsstring>(stb_vorbis *f, uint32 page_start, uint32 first_sample, uint32 target_sample, int fine)</argsstring>
        <name>vorbis_seek_frame_from_page</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>page_start</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>first_sample</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>target_sample</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4318" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4318" bodyend="4424"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a83c71c1fdcd525a803dd068017c6017d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vorbis_seek_base</definition>
        <argsstring>(stb_vorbis *f, unsigned int sample_number, int fine)</argsstring>
        <name>vorbis_seek_base</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sample_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4426" column="12" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4426" bodyend="4509"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a4c9ff20e01e6270e9cc3bf58f3248ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_seek_frame</definition>
        <argsstring>(stb_vorbis *f, unsigned int sample_number)</argsstring>
        <name>stb_vorbis_seek_frame</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sample_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4511" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4511" bodyend="4514"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a2a1f6add009ac3e63ed57cabf9941566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_seek</definition>
        <argsstring>(stb_vorbis *f, unsigned int sample_number)</argsstring>
        <name>stb_vorbis_seek</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sample_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4516" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4516" bodyend="4519"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a080790a3dd3799c2907dc3e6af98b859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stb_vorbis_seek_start</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_seek_start</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4521" column="6" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4521" bodyend="4529"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1adb847e190ac0976bb84d78e00b8048b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int stb_vorbis_stream_length_in_samples</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_stream_length_in_samples</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4531" column="14" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4531" bodyend="4606"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a083b951dcf8c73812332bf2034de412b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stb_vorbis_stream_length_in_seconds</definition>
        <argsstring>(stb_vorbis *f)</argsstring>
        <name>stb_vorbis_stream_length_in_seconds</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4608" column="7" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4608" bodyend="4611"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a3b2691d598485e0c5e1b4ac56173a0ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_frame_float</definition>
        <argsstring>(stb_vorbis *f, int *channels, float ***output)</argsstring>
        <name>stb_vorbis_get_frame_float</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>float ***</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4615" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4615" bodyend="4635"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1713b1f2d6cfc865d93840753356fe08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>stb_vorbis* stb_vorbis_open_file_section</definition>
        <argsstring>(FILE *file, int close_on_free, int *error, stb_vorbis_alloc *alloc, unsigned int length)</argsstring>
        <name>stb_vorbis_open_file_section</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>close_on_free</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>alloc</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4639" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4639" bodyend="4658"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a1add96bea9678e220373aeb02f22eec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>stb_vorbis* stb_vorbis_open_file</definition>
        <argsstring>(FILE *file, int close_on_free, int *error, stb_vorbis_alloc *alloc)</argsstring>
        <name>stb_vorbis_open_file</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>close_on_free</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4660" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4660" bodyend="4668"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a953d11902236df1c8b2312b51e5848ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>stb_vorbis* stb_vorbis_open_filename</definition>
        <argsstring>(char *filename, int *error, stb_vorbis_alloc *alloc)</argsstring>
        <name>stb_vorbis_open_filename</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4670" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4670" bodyend="4677"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a698cde8f09b83aed0ef6bd92cfcfeb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
        <definition>stb_vorbis* stb_vorbis_open_memory</definition>
        <argsstring>(unsigned char *data, int len, int *error, stb_vorbis_alloc *alloc)</argsstring>
        <name>stb_vorbis_open_memory</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4680" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4680" bodyend="4701"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a925e055cf4afc4b975ec8215ec1709be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copy_samples</definition>
        <argsstring>(short *dest, float *src, int len)</argsstring>
        <name>copy_samples</name>
        <param>
          <type>short *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4742" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4742" bodyend="4753"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1af97f5df840e4f763b96e537d8c3f2b1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_samples</definition>
        <argsstring>(int mask, short *output, int num_c, float **data, int d_offset, int len)</argsstring>
        <name>compute_samples</name>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4755" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4755" bodyend="4778"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a572be8efafd54e104482d4a68d782112" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compute_stereo_samples</definition>
        <argsstring>(short *output, int num_c, float **data, int d_offset, int len)</argsstring>
        <name>compute_stereo_samples</name>
        <param>
          <type>short *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4781" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4781" bodyend="4818"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ade4eb9a8c6b86ee6aaee5b965e6683c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void convert_samples_short</definition>
        <argsstring>(int buf_c, short **buffer, int b_offset, int data_c, float **data, int d_offset, int samples)</argsstring>
        <name>convert_samples_short</name>
        <param>
          <type>int</type>
          <declname>buf_c</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4820" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4820" bodyend="4834"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a2887b05a26e310a9c5e370b2ab30fbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_frame_short</definition>
        <argsstring>(stb_vorbis *f, int num_c, short **buffer, int num_samples)</argsstring>
        <name>stb_vorbis_get_frame_short</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_c</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4836" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4836" bodyend="4844"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a133a66e17edaa58abee2aeed5a0459a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void convert_channels_short_interleaved</definition>
        <argsstring>(int buf_c, short *buffer, int data_c, float **data, int d_offset, int len)</argsstring>
        <name>convert_channels_short_interleaved</name>
        <param>
          <type>int</type>
          <declname>buf_c</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_c</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4846" column="13" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4846" bodyend="4870"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a585f1c5ea5ca33d961891b8f5a1574a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_frame_short_interleaved</definition>
        <argsstring>(stb_vorbis *f, int num_c, short *buffer, int num_shorts)</argsstring>
        <name>stb_vorbis_get_frame_short_interleaved</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_c</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_shorts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4872" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4872" bodyend="4883"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ade776d535501af37f599e05ff289f3fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_samples_short_interleaved</definition>
        <argsstring>(stb_vorbis *f, int channels, short *buffer, int num_shorts)</argsstring>
        <name>stb_vorbis_get_samples_short_interleaved</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_shorts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4885" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4885" bodyend="4904"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1ad9ce9cde3cea687618304524c4764b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_samples_short</definition>
        <argsstring>(stb_vorbis *f, int channels, short **buffer, int len)</argsstring>
        <name>stb_vorbis_get_samples_short</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4906" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4906" bodyend="4923"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a9d1f2b0d0fadfc03203846f4ad974b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_decode_filename</definition>
        <argsstring>(char *filename, int *channels, short **output)</argsstring>
        <name>stb_vorbis_decode_filename</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4926" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4926" bodyend="4960"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a8913879df95eb4c1f050a88fef88780a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_decode_memory</definition>
        <argsstring>(uint8 *mem, int len, int *channels, short **output)</argsstring>
        <name>stb_vorbis_decode_memory</name>
        <param>
          <type>uint8 *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="4963" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="4963" bodyend="4997"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a5117081109b12a483b44bb395be8ead7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_samples_float_interleaved</definition>
        <argsstring>(stb_vorbis *f, int channels, float *buffer, int num_floats)</argsstring>
        <name>stb_vorbis_get_samples_float_interleaved</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_floats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="5000" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="5000" bodyend="5023"/>
      </memberdef>
      <memberdef kind="function" id="stb__vorbis_8c_1a35ba8d6c02ebe1de4741d2603b554de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_vorbis_get_samples_float</definition>
        <argsstring>(stb_vorbis *f, int channels, float **buffer, int num_samples)</argsstring>
        <name>stb_vorbis_get_samples_float</name>
        <param>
          <type><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" line="5025" column="5" bodyfile="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c" bodystart="5025" bodyend="5047"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Ogg<sp/>Vorbis<sp/>I<sp/>audio<sp/>decoder<sp/><sp/>--<sp/>version<sp/>0.99996</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>in<sp/>April<sp/>2007<sp/>by<sp/>Sean<sp/>Barrett,<sp/>sponsored<sp/>by<sp/>RAD<sp/>Game<sp/>Tools.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Placed<sp/>in<sp/>the<sp/>public<sp/>domain<sp/>April<sp/>2007<sp/>by<sp/>the<sp/>author:<sp/>no<sp/>copyright<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>claimed,<sp/>and<sp/>you<sp/>may<sp/>use<sp/>it<sp/>for<sp/>any<sp/>purpose<sp/>you<sp/>like.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>warranty<sp/>for<sp/>any<sp/>purpose<sp/>is<sp/>expressed<sp/>or<sp/>implied<sp/>by<sp/>the<sp/>author<sp/>(nor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>RAD<sp/>Game<sp/>Tools).<sp/>Report<sp/>bugs<sp/>and<sp/>send<sp/>enhancements<sp/>to<sp/>the<sp/>author.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>latest<sp/>version<sp/>and<sp/>other<sp/>information<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://nothings.org/stb_vorbis/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Todo:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>seeking<sp/>(note<sp/>you<sp/>can<sp/>seek<sp/>yourself<sp/>using<sp/>the<sp/>pushdata<sp/>API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Limitations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>floor<sp/>0<sp/>not<sp/>supported<sp/>(used<sp/>in<sp/>old<sp/>ogg<sp/>vorbis<sp/>files)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>lossless<sp/>sample-truncation<sp/>at<sp/>beginning<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>cannot<sp/>concatenate<sp/>multiple<sp/>vorbis<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>sample<sp/>positions<sp/>are<sp/>32-bit,<sp/>limiting<sp/>seekable<sp/>192Khz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>files<sp/>to<sp/>around<sp/>6<sp/>hours<sp/>(Ogg<sp/>supports<sp/>64-bit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>of<sp/>these<sp/>limitations<sp/>may<sp/>be<sp/>removed<sp/>in<sp/>future<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_vorbis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>global<sp/>configuration<sp/>settings<sp/>(e.g.<sp/>set<sp/>these<sp/>in<sp/>the<sp/>project/makefile),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>just<sp/>set<sp/>them<sp/>in<sp/>this<sp/>file<sp/>at<sp/>the<sp/>top<sp/>(although<sp/>ideally<sp/>the<sp/>first<sp/>few</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>visible<sp/>when<sp/>the<sp/>header<sp/>file<sp/>is<sp/>compiled<sp/>too,<sp/>although<sp/>it&apos;s<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>crucial)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>compile<sp/>the<sp/>code<sp/>for<sp/>the<sp/>various<sp/>stb_vorbis_*_pushdata()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_PULLDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>compile<sp/>the<sp/>code<sp/>for<sp/>the<sp/>non-pushdata<sp/>APIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_PULLDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>compile<sp/>the<sp/>code<sp/>for<sp/>the<sp/>APIs<sp/>that<sp/>use<sp/>FILE<sp/>*s<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>or<sp/>externally<sp/>(implied<sp/>by<sp/>STB_VORBIS_NO_PULLDATA_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_INTEGER_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>compile<sp/>the<sp/>code<sp/>for<sp/>converting<sp/>audio<sp/>sample<sp/>data<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>float<sp/>to<sp/>integer<sp/>(implied<sp/>by<sp/>STB_VORBIS_NO_PULLDATA_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_INTEGER_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_FAST_SCALED_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>use<sp/>a<sp/>fast<sp/>float-to-int<sp/>trick<sp/>to<sp/>accelerate<sp/>float-to-int<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>most<sp/>platforms<sp/>which<sp/>requires<sp/>endianness<sp/>be<sp/>defined<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STB_VORBIS_NO_FAST_SCALED_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_MAX_CHANNELS<sp/>[number]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>globally<sp/>define<sp/>this<sp/>to<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>channels<sp/>you<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>The<sp/>spec<sp/>does<sp/>not<sp/>put<sp/>a<sp/>restriction<sp/>on<sp/>channels<sp/>except<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>the<sp/>count<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>byte,<sp/>so<sp/>255<sp/>is<sp/>the<sp/>hard<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Reducing<sp/>this<sp/>saves<sp/>about<sp/>16<sp/>bytes<sp/>per<sp/>value,<sp/>so<sp/>using<sp/>16<sp/>saves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(255-16)*16<sp/>or<sp/>around<sp/>4KB.<sp/>Plus<sp/>anything<sp/>other<sp/>memory<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>I<sp/>forgot<sp/>to<sp/>account<sp/>for.<sp/>Can<sp/>probably<sp/>go<sp/>as<sp/>low<sp/>as<sp/>8<sp/>(7.1<sp/>audio),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>6<sp/>(5.1<sp/>audio),<sp/>or<sp/>2<sp/>(stereo<sp/>only).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_MAX_CHANNELS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VORBIS_MAX_CHANNELS<sp/><sp/><sp/><sp/>16<sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>for<sp/>anyone?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_PUSHDATA_CRC_COUNT<sp/>[number]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>after<sp/>a<sp/>flush_pushdata(),<sp/>stb_vorbis<sp/>begins<sp/>scanning<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>next<sp/>valid<sp/>page,<sp/>without<sp/>backtracking.<sp/>when<sp/>it<sp/>finds<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>that<sp/>looks<sp/>like<sp/>a<sp/>page,<sp/>it<sp/>streams<sp/>through<sp/>it<sp/>and<sp/>verifies<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>CRC32.<sp/>Should<sp/>that<sp/>validation<sp/>fail,<sp/>it<sp/>keeps<sp/>scanning.<sp/>But<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>possible<sp/>that<sp/>_while_<sp/>streaming<sp/>through<sp/>to<sp/>check<sp/>the<sp/>CRC32<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>one<sp/>candidate<sp/>page,<sp/>it<sp/>sees<sp/>another<sp/>candidate<sp/>page.<sp/>This<sp/>#define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>determines<sp/>how<sp/>many<sp/>&quot;overlapping&quot;<sp/>candidate<sp/>pages<sp/>it<sp/>can<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>at<sp/>once.<sp/>Note<sp/>that<sp/>&quot;real&quot;<sp/>pages<sp/>are<sp/>typically<sp/>~4KB<sp/>to<sp/>~8KB,<sp/>whereas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>garbage<sp/>pages<sp/>could<sp/>be<sp/>as<sp/>big<sp/>as<sp/>64KB,<sp/>but<sp/>probably<sp/>average<sp/>~16KB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>So<sp/>don&apos;t<sp/>hose<sp/>ourselves<sp/>by<sp/>scanning<sp/>an<sp/>apparent<sp/>64KB<sp/>page<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>missing<sp/>a<sp/>ton<sp/>of<sp/>real<sp/>ones<sp/>in<sp/>the<sp/>interim;<sp/>so<sp/>minimum<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_PUSHDATA_CRC_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VORBIS_PUSHDATA_CRC_COUNT<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH<sp/>[number]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>sets<sp/>the<sp/>log<sp/>size<sp/>of<sp/>the<sp/>huffman-acceleration<sp/>table.<sp/><sp/>Maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>supported<sp/>value<sp/>is<sp/>24.<sp/>with<sp/>larger<sp/>numbers,<sp/>more<sp/>decodings<sp/>are<sp/>O(1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>but<sp/>the<sp/>table<sp/>size<sp/>is<sp/>larger<sp/>so<sp/>worse<sp/>cache<sp/>missing,<sp/>so<sp/>you&apos;ll<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>to<sp/>probe<sp/>(and<sp/>try<sp/>multiple<sp/>ogg<sp/>vorbis<sp/>files)<sp/>to<sp/>find<sp/>the<sp/>sweet<sp/>spot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH<sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_FAST_BINARY_LENGTH<sp/>[number]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>sets<sp/>the<sp/>log<sp/>size<sp/>of<sp/>the<sp/>binary-search<sp/>acceleration<sp/>table.<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>is<sp/>used<sp/>in<sp/>similar<sp/>fashion<sp/>to<sp/>the<sp/>fast-huffman<sp/>size<sp/>to<sp/>set<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>parameters<sp/>for<sp/>the<sp/>binary<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_FAST_HUFFMAN_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>The<sp/>fast<sp/>huffman<sp/>tables<sp/>are<sp/>much<sp/>more<sp/>efficient<sp/>if<sp/>they<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stored<sp/>as<sp/>16-bit<sp/>results<sp/>instead<sp/>of<sp/>32-bit<sp/>results.<sp/>This<sp/>restricts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>the<sp/>codebooks<sp/>to<sp/>having<sp/>only<sp/>65535<sp/>possible<sp/>outcomes,<sp/>though.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(At<sp/>least,<sp/>accelerated<sp/>by<sp/>the<sp/>huffman<sp/>table.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_FAST_HUFFMAN_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VORBIS_FAST_HUFFMAN_SHORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_HUFFMAN_BINARY_SEARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>&apos;fast<sp/>huffman&apos;<sp/>search<sp/>doesn&apos;t<sp/>succeed,<sp/>then<sp/>stb_vorbis<sp/>falls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>back<sp/>on<sp/>binary<sp/>searching<sp/>for<sp/>the<sp/>correct<sp/>one.<sp/>This<sp/>requires<sp/>storing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>extra<sp/>tables<sp/>with<sp/>the<sp/>huffman<sp/>codes<sp/>in<sp/>sorted<sp/>order.<sp/>Defining<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>symbol<sp/>trades<sp/>off<sp/>space<sp/>for<sp/>speed<sp/>by<sp/>forcing<sp/>a<sp/>linear<sp/>search<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>non-fast<sp/>case,<sp/>except<sp/>for<sp/>&quot;sparse&quot;<sp/>codebooks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_HUFFMAN_BINARY_SEARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_vorbis<sp/>precomputes<sp/>the<sp/>result<sp/>of<sp/>the<sp/>scalar<sp/>residue<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>that<sp/>would<sp/>otherwise<sp/>require<sp/>a<sp/>divide<sp/>per<sp/>chunk.<sp/>you<sp/>can<sp/>trade<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>space<sp/>for<sp/>time<sp/>by<sp/>defining<sp/>this<sp/>symbol.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>vorbis<sp/>VQ<sp/>codebooks<sp/>can<sp/>be<sp/>encoded<sp/>two<sp/>ways:<sp/>with<sp/>every<sp/>case<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stored,<sp/>or<sp/>with<sp/>all<sp/>elements<sp/>being<sp/>chosen<sp/>from<sp/>a<sp/>small<sp/>range<sp/>of<sp/>values,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>and<sp/>all<sp/>values<sp/>possible<sp/>in<sp/>all<sp/>elements.<sp/>By<sp/>default,<sp/>stb_vorbis<sp/>expands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>this<sp/>latter<sp/>kind<sp/>out<sp/>to<sp/>look<sp/>like<sp/>the<sp/>former<sp/>kind<sp/>for<sp/>ease<sp/>of<sp/>decoding,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>because<sp/>otherwise<sp/>an<sp/>integer<sp/>divide-per-vector-element<sp/>is<sp/>required<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unpack<sp/>the<sp/>index.<sp/>If<sp/>you<sp/>define<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK,<sp/>you<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>trade<sp/>off<sp/>storage<sp/>for<sp/>speed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_CODEBOOK_SHORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>The<sp/>vorbis<sp/>file<sp/>format<sp/>encodes<sp/>VQ<sp/>codebook<sp/>floats<sp/>as<sp/>ax+b<sp/>where<sp/>a<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>b<sp/>are<sp/>floating<sp/>point<sp/>per-codebook<sp/>constants,<sp/>and<sp/>x<sp/>is<sp/>a<sp/>16-bit<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Normally,<sp/>stb_vorbis<sp/>decodes<sp/>them<sp/>to<sp/>floats<sp/>rather<sp/>than<sp/>leaving<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>as<sp/>16-bit<sp/>ints<sp/>and<sp/>computing<sp/>ax+b<sp/>while<sp/>decoding.<sp/>This<sp/>is<sp/>a<sp/>speed/space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>tradeoff;<sp/>you<sp/>can<sp/>save<sp/>space<sp/>by<sp/>defining<sp/>this<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_CODEBOOK_SHORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_DIVIDE_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>this<sp/>replaces<sp/>small<sp/>integer<sp/>divides<sp/>in<sp/>the<sp/>floor<sp/>decode<sp/>loop<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>table<sp/>lookups.<sp/>made<sp/>less<sp/>than<sp/>1%<sp/>difference,<sp/>so<sp/>disabled<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_INLINE_DECODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>disables<sp/>the<sp/>inlining<sp/>of<sp/>the<sp/>scalar<sp/>codebook<sp/>fast-huffman<sp/>decode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>might<sp/>save<sp/>a<sp/>little<sp/>codespace;<sp/>useful<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_INLINE_DECODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Normally<sp/>we<sp/>only<sp/>decode<sp/>the<sp/>floor<sp/>without<sp/>synthesizing<sp/>the<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>full<sp/>curve.<sp/>We<sp/>can<sp/>instead<sp/>synthesize<sp/>the<sp/>curve<sp/>immediately.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>requires<sp/>more<sp/>memory<sp/>and<sp/>is<sp/>very<sp/>likely<sp/>slower,<sp/>so<sp/>I<sp/>don&apos;t<sp/>think</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>you&apos;d<sp/>ever<sp/>want<sp/>to<sp/>do<sp/>it<sp/>except<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_NO_PULLDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_VORBIS_NO_INTEGER_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_VORBIS_NO_CRT)<sp/>&amp;&amp;<sp/>!defined(STB_VORBIS_NO_STDIO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_VORBIS_NO_STDIO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_INTEGER_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_FAST_SCALED_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>need<sp/>endianness<sp/>for<sp/>fast-float-to-int,<sp/>which<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>for<sp/>pushdata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_VORBIS_ENDIAN<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_VORBIS_ENDIAN<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_CRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(__APPLE__)<sp/>||<sp/>defined(MACOSX)<sp/>||<sp/>defined(macintosh)<sp/>||<sp/>defined(Macintosh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NULL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>__forceinline<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>__forceinline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STB_VORBIS_MAX_CHANNELS<sp/>&gt;<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Value<sp/>of<sp/>STB_VORBIS_MAX_CHANNELS<sp/>outside<sp/>of<sp/>allowed<sp/>range&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH<sp/>&gt;<sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Value<sp/>of<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH<sp/>outside<sp/>of<sp/>allowed<sp/>range&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BLOCKSIZE_LOG<sp/><sp/>13<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BLOCKSIZE<sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>MAX_BLOCKSIZE_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>uint8;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>int8;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>uint16;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>int16;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>uint32;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>int32;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>codetype;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16<sp/>codetype;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@NOTE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>arrays<sp/>below<sp/>are<sp/>tagged<sp/>&quot;//varies&quot;,<sp/>which<sp/>means<sp/>it&apos;s<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>variable-sized<sp/>piece<sp/>of<sp/>data,<sp/>but<sp/>rather<sp/>than<sp/>malloc<sp/>I<sp/>assume<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>small<sp/>enough<sp/>it&apos;s<sp/>better<sp/>to<sp/>just<sp/>allocate<sp/>it<sp/>all<sp/>together<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main<sp/>thing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/>of<sp/>the<sp/>variables<sp/>are<sp/>specified<sp/>with<sp/>the<sp/>smallest<sp/>size<sp/>I<sp/>could<sp/>pack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>them<sp/>into.<sp/>It<sp/>might<sp/>give<sp/>better<sp/>performance<sp/>to<sp/>make<sp/>them<sp/>all<sp/>full-sized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integers.<sp/>It<sp/>should<sp/>be<sp/>safe<sp/>to<sp/>freely<sp/>rearrange<sp/>the<sp/>structures<sp/>or<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>sizes<sp/>larger--nothing<sp/>relies<sp/>on<sp/>silently<sp/>truncating<sp/>etc.,<sp/>nor<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_HUFFMAN_TABLE_SIZE<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_HUFFMAN_TABLE_MASK<sp/><sp/><sp/>(FAST_HUFFMAN_TABLE_SIZE<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="structCodebook" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensions,<sp/>entries;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*codeword_lengths;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>minimum_value;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>delta_value;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>value_bits;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>lookup_type;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>sequence_p;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>sparse;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>lookup_values;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/>codetype<sp/>*multiplicands;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>*codewords;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_FAST_HUFFMAN_SHORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/><sp/>fast_huffman[FAST_HUFFMAN_TABLE_SIZE];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><sp/>fast_huffman[FAST_HUFFMAN_TABLE_SIZE];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>*sorted_codewords;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*sorted_values;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sorted_entries;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="structFloor0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>order;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>rate;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>bark_map_size;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>amplitude_bits;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>amplitude_offset;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>number_of_books;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>book_list[16];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">}<sp/><ref refid="structFloor0" kindref="compound">Floor0</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="structFloor1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>partitions;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>partition_class_list[32];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>class_dimensions[16];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>class_subclasses[16];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>class_masterbooks[16];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/>int16<sp/>subclass_books[16][8];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>Xlist[31*8+2];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>sorted_order[31*8+2];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>neighbors[31*8+2][2];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>floor1_multiplier;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>rangebits;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}<sp/><ref refid="structFloor1" kindref="compound">Floor1</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="unionFloor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><ref refid="structFloor0" kindref="compound">Floor0</ref><sp/>floor0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><ref refid="structFloor1" kindref="compound">Floor1</ref><sp/>floor1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}<sp/><ref refid="unionFloor" kindref="compound">Floor</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="structResidue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>begin,<sp/>end;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>part_size;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>classifications;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>classbook;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>**classdata;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>int16<sp/>(*residue_books)[8];</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}<sp/><ref refid="structResidue" kindref="compound">Residue</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structMappingChannel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>magnitude;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>angle;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>mux;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}<sp/><ref refid="structMappingChannel" kindref="compound">MappingChannel</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="structMapping" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>coupling_steps;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><ref refid="structMappingChannel" kindref="compound">MappingChannel</ref><sp/>*chan;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>submaps;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>submap_floor[15];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>submap_residue[15];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">}<sp/><ref refid="structMapping" kindref="compound">Mapping</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="structMode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>blockflag;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>mapping;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>windowtype;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>transformtype;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}<sp/><ref refid="structMode" kindref="compound">Mode</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="structCRCscan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/><sp/>goal_crc;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>crc<sp/>if<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bytes_left;<sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>left<sp/>in<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/><sp/>crc_so_far;<sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>crc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bytes_done;<sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>processed<sp/>in<sp/>_current_<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/><sp/>sample_loc;<sp/><sp/></highlight><highlight class="comment">//<sp/>granule<sp/>pos<sp/>encoded<sp/>in<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">}<sp/><ref refid="structCRCscan" kindref="compound">CRCscan</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="structProbedPage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>page_start,<sp/>page_end;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>after_previous_page_start;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>first_decoded_sample;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>last_decoded_sample;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}<sp/><ref refid="structProbedPage" kindref="compound">ProbedPage</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="structstb__vorbis" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user-accessible<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_rate;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setup_memory_required;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_memory_required;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setup_temp_memory_required;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>f_start;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_on_free;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*stream;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*stream_start;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*stream_end;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>stream_len;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/><sp/>push_mode;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>first_audio_page_offset;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><ref refid="structProbedPage" kindref="compound">ProbedPage</ref><sp/>p_first,<sp/>p_last;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>alloc;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setup_offset;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_offset;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run-time<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eof;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>STBVorbisError<sp/>error;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user-useful<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocksize[2];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocksize_0,<sp/>blocksize_1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_count;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*codebooks;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floor_count;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>floor_types[64];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><ref refid="unionFloor" kindref="compound">Floor</ref><sp/>*floor_config;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>residue_count;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>residue_types[64];<sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><ref refid="structResidue" kindref="compound">Residue</ref><sp/>*residue_config;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapping_count;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><ref refid="structMapping" kindref="compound">Mapping</ref><sp/>*mapping;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode_count;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><ref refid="structMode" kindref="compound">Mode</ref><sp/>mode_config[64];<sp/><sp/></highlight><highlight class="comment">//<sp/>varies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>total_samples;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*channel_buffers[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*outputs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*previous_window[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previous_length;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>int16<sp/>*finalY[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*floor_buffers[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>current_loc;<sp/></highlight><highlight class="comment">//<sp/>sample<sp/>location<sp/>of<sp/>next<sp/>frame<sp/>to<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>current_loc_valid;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>per-blocksize<sp/>precomputed<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>twiddle<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>[2],*B[2],*C[2];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*window[2];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>*bit_reverse[2];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>page/packet/segment<sp/>streaming<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>serial;<sp/></highlight><highlight class="comment">//<sp/>stream<sp/>serial<sp/>number<sp/>for<sp/>verification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_page;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segment_count;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>segments[255];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>page_flag;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>bytes_in_seg;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>first_decode;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_seg;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_seg;<sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>that<sp/>we&apos;re<sp/>on<sp/>the<sp/>last<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_seg_which;<sp/></highlight><highlight class="comment">//<sp/>what<sp/>was<sp/>the<sp/>segment<sp/>number<sp/>of<sp/>the<sp/>last<sp/>seg?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>acc;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid_bits;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_bytes;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_seg_with_known_loc;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>known_loc_for_packet;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>discard_samples_deferred;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>samples_output;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>mode<sp/>scanning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page_crc_tests;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>in<sp/>push_mode:<sp/>number<sp/>of<sp/>tests<sp/>active;<sp/>-1<sp/>if<sp/>not<sp/>searching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><ref refid="structCRCscan" kindref="compound">CRCscan</ref><sp/>scan[STB_VORBIS_PUSHDATA_CRC_COUNT];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sample-access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_buffer_start;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_buffer_end;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_prof(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>stb_prof<sp/>my_prof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>stb_prof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_prof(x)<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_VORBIS_NO_PUSHDATA_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>IS_PUSH_MODE(f)<sp/><sp/><sp/>FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(STB_VORBIS_NO_PULLDATA_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>IS_PUSH_MODE(f)<sp/><sp/><sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>IS_PUSH_MODE(f)<sp/><sp/><sp/>((f)-&gt;push_mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/><ref refid="structstb__vorbis" kindref="compound">vorb</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>STBVorbisError<sp/>e)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;eof<sp/>&amp;&amp;<sp/>e<sp/>!=<sp/>VORBIS_need_more_data)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error=e;<sp/></highlight><highlight class="comment">//<sp/>breakpoint<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>functions<sp/>are<sp/>used<sp/>for<sp/>allocating<sp/>temporary<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>decoding.<sp/>if<sp/>you<sp/>can<sp/>afford<sp/>the<sp/>stack<sp/>space,<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alloca();<sp/>otherwise,<sp/>provide<sp/>a<sp/>temp<sp/>buffer<sp/>and<sp/>it<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocate<sp/>out<sp/>of<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>array_size_required(count,size)<sp/><sp/>(count*(sizeof(void<sp/>*)+(size)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_alloc(f,size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(f-&gt;alloc.alloc_buffer<sp/>?<sp/>setup_temp_malloc(f,size)<sp/>:<sp/>alloca(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>dealloca</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_free(f,p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(f-&gt;alloc.alloc_buffer<sp/>?<sp/>0<sp/>:<sp/>dealloca(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_free(f,p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_alloc_save(f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((f)-&gt;temp_offset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_alloc_restore(f,p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((f)-&gt;temp_offset<sp/>=<sp/>(p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>temp_block_array(f,count,size)<sp/><sp/>make_block_array(temp_alloc(f,array_size_required(count,size)),<sp/>count,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>a<sp/>sufficiently<sp/>large<sp/>block<sp/>of<sp/>memory,<sp/>make<sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>subblocks<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*make_block_array(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>mem;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(p<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*setup_malloc(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>(sz+3)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>f-&gt;setup_memory_required<sp/>+=<sp/>sz;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>f-&gt;alloc.alloc_buffer<sp/>+<sp/>f-&gt;setup_offset;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(f-&gt;setup_offset<sp/>+<sp/>sz<sp/>&gt;<sp/>f-&gt;temp_offset)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;setup_offset<sp/>+=<sp/>sz;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sz<sp/>?<sp/>malloc(sz)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup_free(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing;<sp/>setup<sp/>mem<sp/>is<sp/>not<sp/>a<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*setup_temp_malloc(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>(sz+3)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;temp_offset<sp/>-<sp/>sz<sp/>&lt;<sp/>f-&gt;setup_offset)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;temp_offset<sp/>-=<sp/>sz;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>f-&gt;alloc.alloc_buffer<sp/>+<sp/>f-&gt;temp_offset;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(sz);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup_temp_free(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;temp_offset<sp/>+=<sp/>(sz+3)&amp;~3;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRC32_POLY<sp/><sp/><sp/><sp/>0x04c11db7<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>crc_table[256];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>crc32_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>s;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=i&lt;&lt;24,<sp/>j=0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>(s<sp/>&gt;=<sp/>(1&lt;&lt;31)<sp/>?<sp/>CRC32_POLY<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc_table[i]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__forceinline<sp/>uint32<sp/>crc32_update(uint32<sp/>crc,<sp/>uint8<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^<sp/>crc_table[</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>^<sp/>(crc<sp/>&gt;&gt;<sp/>24)];</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>setup,<sp/>and<sp/>for<sp/>huffman<sp/>that<sp/>doesn&apos;t<sp/>go<sp/>fast<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_reverse(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xAAAAAAAA)<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x55555555)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xCCCCCCCC)<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x33333333)<sp/>&lt;&lt;<sp/>2);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xF0F0F0F0)<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x0F0F0F0F)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xFF00FF00)<sp/>&gt;&gt;<sp/><sp/>8)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x00FF00FF)<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&gt;&gt;<sp/>16)<sp/>|<sp/>(n<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>square(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x*x;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>weird<sp/>definition<sp/>of<sp/>log2()<sp/>for<sp/>which<sp/>log2(1)<sp/>=<sp/>1,<sp/>log2(2)<sp/>=<sp/>2,<sp/>log2(4)<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>required<sp/>by<sp/>the<sp/>specification.<sp/>fast(?)<sp/>implementation<sp/>from<sp/>stb.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>called<sp/>multiple<sp/>times<sp/>per-packet<sp/>with<sp/>&quot;constants&quot;;<sp/>move<sp/>to<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilog(int32<sp/>n)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>log2_4[16]<sp/>=<sp/>{<sp/>0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4<sp/>};</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>compares<sp/>if<sp/>n<sp/>&lt;<sp/>16,<sp/>3<sp/>compares<sp/>otherwise<sp/>(4<sp/>if<sp/>signed<sp/>or<sp/>n<sp/>&gt;<sp/>1&lt;&lt;29)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>14))</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/><sp/>4))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/>log2_4[n<sp/><sp/><sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/><sp/>9))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>5<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/><sp/>5];</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>10];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>24))</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>19))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>15<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>15];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>20<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>20];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>29))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>25<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>25];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>31))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>30<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>30];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>signed<sp/>n<sp/>returns<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>M_PI<sp/><sp/>3.14159265358979323846264f<sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>CRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>length<sp/>assigned<sp/>to<sp/>a<sp/>value<sp/>with<sp/>no<sp/>huffman<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO_CODE<sp/><sp/><sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>functions<sp/>are<sp/>only<sp/>called<sp/>at<sp/>setup,<sp/>and<sp/>only<sp/>a<sp/>few<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>per<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float32_unpack(uint32<sp/>x)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>mantissa<sp/>=<sp/>x<sp/>&amp;<sp/>0x1fffff;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>sign<sp/>=<sp/>x<sp/>&amp;<sp/>0x80000000;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>exp<sp/>=<sp/>(x<sp/>&amp;<sp/>0x7fe00000)<sp/>&gt;&gt;<sp/>21;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>sign<sp/>?<sp/>-(double)mantissa<sp/>:<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mantissa;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>ldexp((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)res,<sp/>exp-788);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>zlib<sp/>&amp;<sp/>jpeg<sp/>huffman<sp/>tables<sp/>assume<sp/>that<sp/>the<sp/>output<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>either<sp/>be<sp/>arbitrarily<sp/>arranged,<sp/>or<sp/>have<sp/>monotonically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>increasing<sp/>frequencies--they<sp/>rely<sp/>on<sp/>the<sp/>lengths<sp/>being<sp/>sorted;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>makes<sp/>for<sp/>a<sp/>very<sp/>simple<sp/>generation<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vorbis<sp/>allows<sp/>a<sp/>huffman<sp/>table<sp/>with<sp/>non-sorted<sp/>lengths.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>a<sp/>more<sp/>sophisticated<sp/>construction,<sp/>since<sp/>symbols<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>do<sp/>not<sp/>map<sp/>to<sp/>huffman<sp/>codes<sp/>&quot;in<sp/>order&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_entry(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/>uint32<sp/>huff_code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symbol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>uint32<sp/>*values)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codewords<sp/><sp/><sp/><sp/><sp/><sp/>[symbol]<sp/>=<sp/>huff_code;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codewords<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[count]<sp/>=<sp/>huff_code;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codeword_lengths[count]<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[count]<sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compute_codewords(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/>uint8<sp/>*len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>uint32<sp/>*values)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,m=0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>available[32];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/>memset(available,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(available));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>first<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len[k]<sp/>&lt;<sp/>NO_CODE)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>n)<sp/>{<sp/>assert(c-&gt;sorted_entries<sp/>==<sp/>0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/>add_entry(c,<sp/>0,<sp/>k,<sp/>m++,<sp/>len[k],<sp/>values);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>all<sp/>available<sp/>leaves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;=<sp/>len[k];<sp/>++i)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>available[i]<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(32-i);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>the<sp/>above<sp/>code<sp/>treats<sp/>the<sp/>first<sp/>case<sp/>specially,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>really<sp/>the<sp/>same<sp/>as<sp/>the<sp/>following<sp/>code,<sp/>so<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>probably<sp/>be<sp/>combined<sp/>(except<sp/>the<sp/>initial<sp/>code<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>I<sp/>use<sp/>0<sp/>in<sp/>available[]<sp/>to<sp/>mean<sp/>&apos;empty&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=k+1;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>res;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>len[i],<sp/>y;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>NO_CODE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>lowest<sp/>available<sp/>leaf<sp/>(should<sp/>always<sp/>be<sp/>earliest,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>what<sp/>the<sp/>specification<sp/>calls<sp/>for)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>property,<sp/>and<sp/>the<sp/>fact<sp/>we<sp/>can<sp/>never<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>one<sp/>free<sp/>leaf<sp/>at<sp/>a<sp/>given<sp/>level,<sp/>isn&apos;t<sp/>totally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trivial<sp/>to<sp/>prove,<sp/>but<sp/>it<sp/>seems<sp/>true<sp/>and<sp/>the<sp/>assert<sp/>never</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fires,<sp/>so!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!available[z])<sp/>--z;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>0)<sp/>{<sp/>assert(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>available[z];</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>available[z]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_entry(c,<sp/>bit_reverse(res),<sp/>i,<sp/>m++,<sp/>len[i],<sp/>values);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>propogate<sp/>availability<sp/>up<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>len[i])<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y=len[i];<sp/>y<sp/>&gt;<sp/>z;<sp/>--y)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(available[y]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>available[y]<sp/>=<sp/>res<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>(32-y));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accelerated<sp/>huffman<sp/>table<sp/>allows<sp/>fast<sp/>O(1)<sp/>match<sp/>of<sp/>all<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>length<sp/>&lt;=<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_accelerated_huffman(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>FAST_HUFFMAN_TABLE_SIZE;<sp/>++i)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fast_huffman[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>c-&gt;sparse<sp/>?<sp/>c-&gt;sorted_entries<sp/>:<sp/>c-&gt;entries;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_FAST_HUFFMAN_SHORT</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(len<sp/>&gt;<sp/>32767)<sp/>len<sp/>=<sp/>32767;<sp/></highlight><highlight class="comment">//<sp/>largest<sp/>possible<sp/>value<sp/>we<sp/>can<sp/>encode!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;codeword_lengths[i]<sp/>&lt;=<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>z<sp/>=<sp/>c-&gt;sparse<sp/>?<sp/>bit_reverse(c-&gt;sorted_codewords[i])<sp/>:<sp/>c-&gt;codewords[i];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>table<sp/>entries<sp/>for<sp/>all<sp/>bit<sp/>combinations<sp/>in<sp/>the<sp/>higher<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>FAST_HUFFMAN_TABLE_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fast_huffman[z]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>c-&gt;codeword_lengths[i];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uint32_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>x<sp/>=<sp/>*<sp/>(uint32<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>y<sp/>=<sp/>*<sp/>(uint32<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>y<sp/>?<sp/>-1<sp/>:<sp/>x<sp/>&gt;<sp/>y;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_in_sort(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/>uint8<sp/>len)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>{<sp/>assert(len<sp/>!=<sp/>NO_CODE);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>NO_CODE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>fast<sp/>table<sp/>above<sp/>doesn&apos;t<sp/>work,<sp/>we<sp/>want<sp/>to<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>search<sp/>them...<sp/>need<sp/>to<sp/>reverse<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_sorted_huffman(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/>uint8<sp/>*lengths,<sp/>uint32<sp/>*values)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OPTIMIZATION:<sp/>don&apos;t<sp/>include<sp/>the<sp/>short<sp/>ones,<sp/>since<sp/>they&apos;ll<sp/>be<sp/>caught<sp/>by<sp/>FAST_HUFFMAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>kind<sp/>of<sp/>a<sp/>frivolous<sp/>optimization--I<sp/>don&apos;t<sp/>see<sp/>any<sp/>performance<sp/>improvement,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>like<sp/>4<sp/>extra<sp/>lines<sp/>of<sp/>code,<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>c-&gt;entries;<sp/>++i)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_in_sort(c,<sp/>lengths[i]))</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_codewords[k++]<sp/>=<sp/>bit_reverse(c-&gt;codewords[i]);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>==<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>c-&gt;sorted_entries;<sp/>++i)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_codewords[i]<sp/>=<sp/>bit_reverse(c-&gt;codewords[i]);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/>qsort(c-&gt;sorted_codewords,<sp/>c-&gt;sorted_entries,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;sorted_codewords[0]),<sp/>uint32_compare);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/>c-&gt;sorted_codewords[c-&gt;sorted_entries]<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>c-&gt;sparse<sp/>?<sp/>c-&gt;sorted_entries<sp/>:<sp/>c-&gt;entries;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>need<sp/>to<sp/>indicate<sp/>how<sp/>they<sp/>correspond;<sp/>we<sp/>could<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>#1:<sp/>sort<sp/>a<sp/>different<sp/>data<sp/>structure<sp/>that<sp/>says<sp/>who<sp/>they<sp/>correspond<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>#2:<sp/>for<sp/>each<sp/>sorted<sp/>entry,<sp/>search<sp/>the<sp/>original<sp/>list<sp/>to<sp/>find<sp/>who<sp/>corresponds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>#3:<sp/>for<sp/>each<sp/>original<sp/>entry,<sp/>find<sp/>the<sp/>sorted<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#1<sp/>requires<sp/>extra<sp/>storage,<sp/>#2<sp/>is<sp/>slow,<sp/>#3<sp/>can<sp/>use<sp/>binary<sp/>search!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huff_len<sp/>=<sp/>c-&gt;sparse<sp/>?<sp/>lengths[values[i]]<sp/>:<sp/>lengths[i];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_in_sort(c,huff_len))<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>code<sp/>=<sp/>bit_reverse(c-&gt;codewords[i]);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0,<sp/>n=c-&gt;sorted_entries;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:<sp/>sc[x]<sp/>&lt;=<sp/>code<sp/>&lt;<sp/>sc[x+n]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>x<sp/>+<sp/>(n<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_codewords[m]<sp/>&lt;=<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>(n&gt;&gt;1);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(c-&gt;sorted_codewords[x]<sp/>==<sp/>code);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_values[x]<sp/>=<sp/>values[i];</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codeword_lengths[x]<sp/>=<sp/>huff_len;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_values[x]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>run<sp/>while<sp/>parsing<sp/>the<sp/>header<sp/>(3<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_validate(uint8<sp/>*data)</highlight></codeline>
<codeline lineno="816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8<sp/>vorbis[6]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp(data,<sp/>vorbis,<sp/>6)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called<sp/>from<sp/>setup<sp/>only,<sp/>once<sp/>per<sp/>code<sp/>book</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(formula<sp/>implied<sp/>by<sp/>specification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lookup1_values(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entries,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(int)<sp/>floor(exp((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>log((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>entries)<sp/>/<sp/>dim));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>floor(pow((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>r+1,<sp/>dim))<sp/>&lt;=<sp/>entries)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(int)<sp/>cast<sp/>for<sp/>MinGW<sp/>warning;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>floor()<sp/>to<sp/>avoid<sp/>_ftol()<sp/>when<sp/>non-CRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/>assert(pow((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>r+1,<sp/>dim)<sp/>&gt;<sp/>entries);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>floor(pow((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>r,<sp/>dim))<sp/>&lt;=<sp/>entries);<sp/></highlight><highlight class="comment">//<sp/>(int),floor()<sp/>as<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called<sp/>twice<sp/>per<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_twiddle_factors(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*B,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*C)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>2,<sp/>n8<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,k2;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n4;<sp/>++k,k2+=2)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref>[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos(4*k*M_PI/n);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref>[k2+1]<sp/>=<sp/>(float)<sp/>-sin(4*k*M_PI/n);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos((k2+1)*M_PI/n/2)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[k2+1]<sp/>=<sp/>(float)<sp/><sp/>sin((k2+1)*M_PI/n/2)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n8;<sp/>++k,k2+=2)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos(2*(k2+1)*M_PI/n);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C[k2+1]<sp/>=<sp/>(float)<sp/>-sin(2*(k2+1)*M_PI/n);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_window(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*window)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>i;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n2;<sp/>++i)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>sin(0.5<sp/>*<sp/>M_PI<sp/>*<sp/>square((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>sin((i<sp/>-<sp/>0<sp/>+<sp/>0.5)<sp/>/<sp/>n2<sp/>*<sp/>0.5<sp/>*<sp/>M_PI)));</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_bitreverse(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>uint16<sp/>*rev)</highlight></codeline>
<codeline lineno="859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ld<sp/>=<sp/>ilog(n)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>ilog<sp/>is<sp/>off-by-one<sp/>from<sp/>normal<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n8<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n8;<sp/>++i)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rev[i]<sp/>=<sp/>(bit_reverse(i)<sp/>&gt;&gt;<sp/>(32-ld+3))<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_blocksize(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>n4<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>2,<sp/>n8<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/>f-&gt;A[b]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/>f-&gt;B[b]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/>f-&gt;C[b]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>n4);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;A[b]<sp/>||<sp/>!f-&gt;B[b]<sp/>||<sp/>!f-&gt;C[b])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/>compute_twiddle_factors(n,<sp/>f-&gt;A[b],<sp/>f-&gt;B[b],<sp/>f-&gt;C[b]);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/>f-&gt;window[b]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;window[b])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/>compute_window(n,<sp/>f-&gt;window[b]);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/>f-&gt;bit_reverse[b]<sp/>=<sp/>(uint16<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16)<sp/>*<sp/>n8);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;bit_reverse[b])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/>compute_bitreverse(n,<sp/>f-&gt;bit_reverse[b]);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>neighbors(uint16<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*plow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*phigh)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>low<sp/><sp/>&amp;&amp;<sp/>x[i]<sp/>&lt;<sp/>x[n])<sp/>{<sp/>*plow<sp/><sp/>=<sp/>i;<sp/>low<sp/>=<sp/>x[i];<sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>x[i]<sp/>&gt;<sp/>x[n])<sp/>{<sp/>*phigh<sp/>=<sp/>i;<sp/>high<sp/>=<sp/>x[i];<sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>has<sp/>been<sp/>repurposed<sp/>so<sp/>y<sp/>is<sp/>now<sp/>the<sp/>original<sp/>index<sp/>instead<sp/>of<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="structVorbisPoint" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/>uint16<sp/>x,y;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}<sp/><ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref>;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>point_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q)</highlight></codeline>
<codeline lineno="901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref><sp/>*a<sp/>=<sp/>(<ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref><sp/>*b<sp/>=<sp/>(<ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>&lt;<sp/>b-&gt;x<sp/>?<sp/>-1<sp/>:<sp/>a-&gt;x<sp/>&gt;<sp/>b-&gt;x;</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="909"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_VORBIS_NO_STDIO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>USE_MEMORY(z)<sp/><sp/><sp/><sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>USE_MEMORY(z)<sp/><sp/><sp/><sp/>((z)-&gt;stream)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8<sp/>get8(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*z)</highlight></codeline>
<codeline lineno="918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MEMORY(z))<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;stream<sp/>&gt;=<sp/>z-&gt;stream_end)<sp/>{<sp/>z-&gt;eof<sp/>=<sp/>TRUE;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*z-&gt;stream++;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>fgetc(z-&gt;f);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/>{<sp/>z-&gt;eof<sp/>=<sp/>TRUE;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>get32(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>x;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>get8(f)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>get8(f)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>get8(f)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getn(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*z,<sp/>uint8<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MEMORY(z))<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;stream+n<sp/>&gt;<sp/>z-&gt;stream_end)<sp/>{<sp/>z-&gt;eof<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>z-&gt;stream,<sp/>n);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;stream<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(data,<sp/>n,<sp/>1,<sp/>z-&gt;f)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;eof<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skip(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MEMORY(z))<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;stream<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;stream<sp/>&gt;=<sp/>z-&gt;stream_end)<sp/>z-&gt;eof<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>ftell(z-&gt;f);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(z-&gt;f,<sp/>x+n,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_file_offset(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc)</highlight></codeline>
<codeline lineno="978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;push_mode)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/>f-&gt;eof<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MEMORY(f))<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;stream_start<sp/>+<sp/>loc<sp/>&gt;=<sp/>f-&gt;stream_end<sp/>||<sp/>f-&gt;stream_start<sp/>+<sp/>loc<sp/>&lt;<sp/>f-&gt;stream_start)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;stream<sp/>=<sp/>f-&gt;stream_end;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;eof<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;stream<sp/>=<sp/>f-&gt;stream_start<sp/>+<sp/>loc;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loc<sp/>+<sp/>f-&gt;f_start<sp/>&lt;<sp/>loc<sp/>||<sp/>loc<sp/>&gt;=<sp/>0x80000000)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loc<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;eof<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loc<sp/>+=<sp/>f-&gt;f_start;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fseek(f-&gt;f,<sp/>loc,<sp/>SEEK_SET))</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/>f-&gt;eof<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/>fseek(f-&gt;f,<sp/>f-&gt;f_start,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8<sp/>ogg_page_header[4]<sp/>=<sp/>{<sp/>0x4f,<sp/>0x67,<sp/>0x67,<sp/>0x53<sp/>};</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>capture_pattern(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x4f<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x67<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x67<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x53<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGEFLAG_continued_packet<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGEFLAG_first_page<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGEFLAG_last_page<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_page_no_capturepattern(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>loc0,loc1,n,i;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>structure<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream_structure_version);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/>f-&gt;page_flag<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>absolute<sp/>granule<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/>loc0<sp/>=<sp/>get32(f);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/>loc1<sp/>=<sp/>get32(f);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>validate<sp/>loc0,loc1<sp/>as<sp/>valid<sp/>positions?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>serial<sp/>number<sp/>--<sp/>vorbis<sp/>doesn&apos;t<sp/>interleave,<sp/>so<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/>get32(f);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(f-&gt;serial<sp/>!=<sp/>get32(f))<sp/>return<sp/>error(f,<sp/>VORBIS_incorrect_stream_serial_number);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>sequence<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>get32(f);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/>f-&gt;last_page<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRC32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/>get32(f);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page_segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/>f-&gt;segment_count<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getn(f,<sp/>f-&gt;segments,<sp/>f-&gt;segment_count))</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_unexpected_eof);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>we<sp/>_don&apos;t_<sp/>know<sp/>any<sp/>the<sp/>sample<sp/>position<sp/>of<sp/>any<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/>f-&gt;end_seg_with_known_loc<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loc0<sp/>!=<sp/>~0<sp/>||<sp/>loc1<sp/>!=<sp/>~0)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>which<sp/>packet<sp/>is<sp/>the<sp/>last<sp/>one<sp/>that<sp/>will<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=f-&gt;segment_count-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;segments[i]<sp/>&lt;<sp/>255)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;i&apos;<sp/>is<sp/>now<sp/>the<sp/>index<sp/>of<sp/>the<sp/>_last_<sp/>segment<sp/>of<sp/>a<sp/>packet<sp/>that<sp/>ends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;end_seg_with_known_loc<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;known_loc_for_packet<sp/><sp/><sp/>=<sp/>loc0;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;first_decode)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,len;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProbedPage" kindref="compound">ProbedPage</ref><sp/>p;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;segment_count;<sp/>++i)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>f-&gt;segments[i];</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>27<sp/>+<sp/>f-&gt;segment_count;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.page_start<sp/>=<sp/>f-&gt;first_audio_page_offset;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.page_end<sp/>=<sp/>p.page_start<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.after_previous_page_start<sp/>=<sp/>p.page_start;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.first_decoded_sample<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.last_decoded_sample<sp/>=<sp/>loc0;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_first<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_page(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!capture_pattern(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_missing_capture_pattern);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start_page_no_capturepattern(f);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_packet(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(f-&gt;next_seg<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_page(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_continued_packet)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_continued_packet_flag_invalid);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/>f-&gt;last_seg<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/>f-&gt;packet_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/>f-&gt;bytes_in_seg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>f-&gt;next_seg<sp/>is<sp/>now<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maybe_start_packet(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;next_seg<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>EOF<sp/>at<sp/>page<sp/>boundary<sp/>is<sp/>not<sp/>an<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x4f<sp/>!=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_missing_capture_pattern);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x67<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_missing_capture_pattern);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x67<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_missing_capture_pattern);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x53<sp/>!=<sp/>get8(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_missing_capture_pattern);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_page_no_capturepattern(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_continued_packet)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>enough<sp/>state<sp/>that<sp/>we<sp/>can<sp/>read<sp/>this<sp/>packet<sp/>if<sp/>we<sp/>want,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>during<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;last_seg<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;bytes_in_seg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_continued_packet_flag_invalid);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start_packet(f);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_segment(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;next_seg<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;last_seg_which<sp/>=<sp/>f-&gt;segment_count-1;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>start_page<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_page(f))<sp/>{<sp/>f-&gt;last_seg<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_continued_packet))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_continued_packet_flag_invalid);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>f-&gt;segments[f-&gt;next_seg++];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;last_seg<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;last_seg_which<sp/>=<sp/>f-&gt;next_seg-1;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;next_seg<sp/>&gt;=<sp/>f-&gt;segment_count)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/>assert(f-&gt;bytes_in_seg<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/>f-&gt;bytes_in_seg<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EOP<sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVALID_BITS<sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get8_packet_raw(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;bytes_in_seg)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOP;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!next_segment(f))<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOP;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>assert(f-&gt;bytes_in_seg<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>--f-&gt;bytes_in_seg;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>++f-&gt;packet_bytes;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get8(f);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get8_packet(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>get8_packet_raw(f);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush_packet(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get8_packet_raw(f)<sp/>!=<sp/>EOP);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>this<sp/>is<sp/>the<sp/>secondary<sp/>bit<sp/>decoder,<sp/>so<sp/>it&apos;s<sp/>probably<sp/>not<sp/>as<sp/>important</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>huffman<sp/>decoder?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>get_bits(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>z;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>24)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>accumulator<sp/>technique<sp/>below<sp/>would<sp/>not<sp/>work<sp/>correctly<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>get_bits(f,<sp/>24);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>get_bits(f,<sp/>n-24)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>==<sp/>0)<sp/>f-&gt;acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>get8_packet_raw(f);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>EOP)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>INVALID_BITS;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>+=<sp/>z<sp/>&lt;&lt;<sp/>f-&gt;valid_bits;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>f-&gt;acc<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>n)-1);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/>f-&gt;acc<sp/>&gt;&gt;=<sp/>n;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/>f-&gt;valid_bits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32<sp/>get_bits_signed(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>z<sp/>=<sp/>get_bits(f,<sp/>n);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(n-1)))</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>~((1<sp/>&lt;&lt;<sp/>n)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32)<sp/>z;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>primary<sp/>accumulator<sp/>for<sp/>huffman</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>buffer<sp/>to<sp/>as<sp/>many<sp/>bits<sp/>as<sp/>possible<sp/>without<sp/>reading<sp/>off<sp/>end<sp/>of<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>might<sp/>be<sp/>nice<sp/>to<sp/>allow<sp/>f-&gt;valid_bits<sp/>and<sp/>f-&gt;acc<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>registers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>e.g.<sp/>cache<sp/>them<sp/>locally<sp/>and<sp/>decode<sp/>locally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__forceinline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prep_huffman(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;=<sp/>24)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>==<sp/>0)<sp/>f-&gt;acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg<sp/>&amp;&amp;<sp/>!f-&gt;bytes_in_seg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>get8_packet_raw(f);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>+=<sp/>z<sp/>&lt;&lt;<sp/>f-&gt;valid_bits;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;=<sp/>24);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/>VORBIS_packet_id<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/>VORBIS_packet_comment<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/>VORBIS_packet_setup<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_scalar_raw(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/>prep_huffman(f);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/>assert(c-&gt;sorted_codewords<sp/>||<sp/>c-&gt;codewords);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cases<sp/>to<sp/>use<sp/>binary<sp/>search:<sp/>sorted_codewords<sp/>&amp;&amp;<sp/>!c-&gt;codewords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_codewords<sp/>&amp;&amp;<sp/>c-&gt;entries<sp/>&gt;<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;entries<sp/>&gt;<sp/>8<sp/>?<sp/>c-&gt;sorted_codewords!=NULL<sp/>:<sp/>!c-&gt;codewords)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>code<sp/>=<sp/>bit_reverse(f-&gt;acc);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0,<sp/>n=c-&gt;sorted_entries,<sp/>len;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:<sp/>sc[x]<sp/>&lt;=<sp/>code<sp/>&lt;<sp/>sc[x+n]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>x<sp/>+<sp/>(n<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_codewords[m]<sp/>&lt;=<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>(n&gt;&gt;1);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>is<sp/>now<sp/>the<sp/>sorted<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;sparse)<sp/>x<sp/>=<sp/>c-&gt;sorted_values[x];</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>is<sp/>now<sp/>sorted<sp/>index<sp/>if<sp/>sparse,<sp/>or<sp/>symbol<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>c-&gt;codeword_lengths[x];</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&gt;=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>&gt;&gt;=<sp/>len;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>small,<sp/>linear<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/>assert(!c-&gt;sparse);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>c-&gt;entries;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;codeword_lengths[i]<sp/>==<sp/>NO_CODE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;codewords[i]<sp/>==<sp/>(f-&gt;acc<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>c-&gt;codeword_lengths[i])-1)))<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&gt;=<sp/>c-&gt;codeword_lengths[i])<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>&gt;&gt;=<sp/>c-&gt;codeword_lengths[i];</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>-=<sp/>c-&gt;codeword_lengths[i];</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/>f-&gt;valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_scalar(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prep_huffman(f);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fast<sp/>huffman<sp/>table<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>f-&gt;acc<sp/>&amp;<sp/>FAST_HUFFMAN_TABLE_MASK;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>c-&gt;fast_huffman[i];</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>&gt;&gt;=<sp/>c-&gt;codeword_lengths[i];</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>-=<sp/>c-&gt;codeword_lengths[i];</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>0)<sp/>{<sp/>f-&gt;valid_bits<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>codebook_decode_scalar_raw(f,c);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_INLINE_DECODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECODE_RAW(var,<sp/>f,c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1315"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>prep_huffman(f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1317"><highlight class="preprocessor"><sp/><sp/><sp/>var<sp/>=<sp/>f-&gt;acc<sp/>&amp;<sp/>FAST_HUFFMAN_TABLE_MASK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1318"><highlight class="preprocessor"><sp/><sp/><sp/>var<sp/>=<sp/>c-&gt;fast_huffman[var];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1319"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(var<sp/>&gt;=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>c-&gt;codeword_lengths[var];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;acc<sp/>&gt;&gt;=<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;valid_bits<sp/>-=<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(f-&gt;valid_bits<sp/>&lt;<sp/>0)<sp/>{<sp/>f-&gt;valid_bits<sp/>=<sp/>0;<sp/>var<sp/>=<sp/>-1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>codebook_decode_scalar_raw(f,c);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1326"><highlight class="preprocessor"><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECODE_RAW(var,f,c)<sp/><sp/><sp/><sp/>var<sp/>=<sp/>codebook_decode_scalar(f,c);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECODE(var,f,c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1335"><highlight class="preprocessor"><sp/><sp/><sp/>DECODE_RAW(var,f,c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1336"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(c-&gt;sparse)<sp/>var<sp/>=<sp/>c-&gt;sorted_values[var];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DECODE_VQ(var,f,c)<sp/><sp/><sp/>DECODE_RAW(var,f,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DECODE_VQ(var,f,c)<sp/><sp/><sp/>DECODE(var,f,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CODEBOOK_ELEMENT_FAST<sp/>is<sp/>an<sp/>optimization<sp/>for<sp/>the<sp/>CODEBOOK_FLOATS<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>we<sp/>avoid<sp/>one<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT(c,off)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c-&gt;multiplicands[off]<sp/>*<sp/>c-&gt;delta_value<sp/>+<sp/>c-&gt;minimum_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT_FAST(c,off)<sp/><sp/><sp/><sp/><sp/>(c-&gt;multiplicands[off]<sp/>*<sp/>c-&gt;delta_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT_BASE(c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c-&gt;minimum_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT(c,off)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c-&gt;multiplicands[off])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT_FAST(c,off)<sp/><sp/><sp/><sp/><sp/>(c-&gt;multiplicands[off])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>CODEBOOK_ELEMENT_BASE(c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_start(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>0<sp/>is<sp/>only<sp/>legal<sp/>in<sp/>a<sp/>scalar<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DECODE_VQ(z,f,c);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>assert(z<sp/>&lt;<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>EOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;bytes_in_seg)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,z<sp/>=<sp/>codebook_decode_start(f,c,len);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>c-&gt;dimensions)<sp/>len<sp/>=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>(z<sp/>/<sp/>div)<sp/>%<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,off)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>last<sp/>=<sp/>val<sp/>+<sp/>c-&gt;minimum_value;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>*=<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/>z<sp/>*=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>val<sp/>+<sp/>c-&gt;minimum_value;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>+=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_step(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,z<sp/>=<sp/>codebook_decode_start(f,c,len);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>c-&gt;dimensions)<sp/>len<sp/>=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>(z<sp/>/<sp/>div)<sp/>%<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,off)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i*step]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>last<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>*=<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/>z<sp/>*=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output[i*step]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>last<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_deinterleave_repeat(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*c_inter_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_inter_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_decode)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_inter<sp/>=<sp/>*c_inter_p;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_inter<sp/>=<sp/>*p_inter_p;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,z,<sp/>effective<sp/>=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>0<sp/>is<sp/>only<sp/>legal<sp/>in<sp/>a<sp/>scalar<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>0)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(total_decode<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DECODE_VQ(z,f,c);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(!c-&gt;sparse<sp/>||<sp/>z<sp/>&lt;<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;bytes_in_seg)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>will<sp/>take<sp/>us<sp/>off<sp/>the<sp/>end<sp/>of<sp/>the<sp/>buffers,<sp/>stop<sp/>short!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>check<sp/>by<sp/>computing<sp/>the<sp/>length<sp/>of<sp/>the<sp/>virtual<sp/>interleaved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>(len*ch),<sp/>our<sp/>current<sp/>offset<sp/>within<sp/>it<sp/>(p_inter*ch)+(c_inter),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>length<sp/>we&apos;ll<sp/>be<sp/>using<sp/>(effective)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_inter<sp/>+<sp/>p_inter*ch<sp/>+<sp/>effective<sp/>&gt;<sp/>len<sp/>*<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effective<sp/>=<sp/>len*ch<sp/>-<sp/>(p_inter*ch<sp/>-<sp/>c_inter);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>effective;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>(z<sp/>/<sp/>div)<sp/>%<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,off)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++c_inter<sp/>==<sp/>ch)<sp/>{<sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;<sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>last<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>*=<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>*=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>effective;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++c_inter<sp/>==<sp/>ch)<sp/>{<sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;<sp/>}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>effective;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++c_inter<sp/>==<sp/>ch)<sp/>{<sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;<sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_decode<sp/>-=<sp/>effective;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/>*c_inter_p<sp/>=<sp/>c_inter;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/>*p_inter_p<sp/>=<sp/>p_inter;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebook_decode_deinterleave_repeat_2(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*c_inter_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_inter_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_decode)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_inter<sp/>=<sp/>*c_inter_p;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_inter<sp/>=<sp/>*p_inter_p;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,z,<sp/>effective<sp/>=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>0<sp/>is<sp/>only<sp/>legal<sp/>in<sp/>a<sp/>scalar<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>0)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(total_decode<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>CODEBOOK_ELEMENT_BASE(c);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DECODE_VQ(z,f,c);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;bytes_in_seg)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>will<sp/>take<sp/>us<sp/>off<sp/>the<sp/>end<sp/>of<sp/>the<sp/>buffers,<sp/>stop<sp/>short!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>check<sp/>by<sp/>computing<sp/>the<sp/>length<sp/>of<sp/>the<sp/>virtual<sp/>interleaved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>(len*ch),<sp/>our<sp/>current<sp/>offset<sp/>within<sp/>it<sp/>(p_inter*ch)+(c_inter),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>length<sp/>we&apos;ll<sp/>be<sp/>using<sp/>(effective)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_inter<sp/>+<sp/>p_inter*2<sp/>+<sp/>effective<sp/>&gt;<sp/>len<sp/>*<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effective<sp/>=<sp/>len*2<sp/>-<sp/>(p_inter*2<sp/>-<sp/>c_inter);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>*=<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(11);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sequence_p)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>haven&apos;t<sp/>optimized<sp/>this<sp/>case<sp/>because<sp/>I<sp/>don&apos;t<sp/>have<sp/>any<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>effective;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++c_inter<sp/>==<sp/>2)<sp/>{<sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;<sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_inter<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*z0<sp/>=<sp/>outputs[0];</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*z1<sp/>=<sp/>outputs[1];</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i+1<sp/>&lt;<sp/>effective;)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0[p_inter]<sp/>+=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1[p_inter]<sp/>+=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i+1)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p_inter;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>effective)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>CODEBOOK_ELEMENT_FAST(c,z+i)<sp/>+<sp/>last;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs[c_inter][p_inter]<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++c_inter<sp/>==<sp/>2)<sp/>{<sp/>c_inter<sp/>=<sp/>0;<sp/>++p_inter;<sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_decode<sp/>-=<sp/>effective;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/>*c_inter_p<sp/>=<sp/>c_inter;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/>*p_inter_p<sp/>=<sp/>p_inter;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>predict_point(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>force<sp/>int<sp/>division<sp/>to<sp/>round<sp/>in<sp/>the<sp/>right<sp/>direction...<sp/>is<sp/>this<sp/>necessary<sp/>on<sp/>x86?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>abs(dy)<sp/>*<sp/>(x<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>err<sp/>/<sp/>adx;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dy<sp/>&lt;<sp/>0<sp/>?<sp/>y0<sp/>-<sp/>off<sp/>:<sp/>y0<sp/>+<sp/>off;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>table<sp/>is<sp/>block-copied<sp/>from<sp/>the<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inverse_db_table[256]<sp/>=</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/>1.0649863e-07f,<sp/>1.1341951e-07f,<sp/>1.2079015e-07f,<sp/>1.2863978e-07f,</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>1.3699951e-07f,<sp/>1.4590251e-07f,<sp/>1.5538408e-07f,<sp/>1.6548181e-07f,</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>1.7623575e-07f,<sp/>1.8768855e-07f,<sp/>1.9988561e-07f,<sp/>2.1287530e-07f,</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>2.2670913e-07f,<sp/>2.4144197e-07f,<sp/>2.5713223e-07f,<sp/>2.7384213e-07f,</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>2.9163793e-07f,<sp/>3.1059021e-07f,<sp/>3.3077411e-07f,<sp/>3.5226968e-07f,</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>3.7516214e-07f,<sp/>3.9954229e-07f,<sp/>4.2550680e-07f,<sp/>4.5315863e-07f,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>4.8260743e-07f,<sp/>5.1396998e-07f,<sp/>5.4737065e-07f,<sp/>5.8294187e-07f,</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>6.2082472e-07f,<sp/>6.6116941e-07f,<sp/>7.0413592e-07f,<sp/>7.4989464e-07f,</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>7.9862701e-07f,<sp/>8.5052630e-07f,<sp/>9.0579828e-07f,<sp/>9.6466216e-07f,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>1.0273513e-06f,<sp/>1.0941144e-06f,<sp/>1.1652161e-06f,<sp/>1.2409384e-06f,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>1.3215816e-06f,<sp/>1.4074654e-06f,<sp/>1.4989305e-06f,<sp/>1.5963394e-06f,</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>1.7000785e-06f,<sp/>1.8105592e-06f,<sp/>1.9282195e-06f,<sp/>2.0535261e-06f,</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>2.1869758e-06f,<sp/>2.3290978e-06f,<sp/>2.4804557e-06f,<sp/>2.6416497e-06f,</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>2.8133190e-06f,<sp/>2.9961443e-06f,<sp/>3.1908506e-06f,<sp/>3.3982101e-06f,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>3.6190449e-06f,<sp/>3.8542308e-06f,<sp/>4.1047004e-06f,<sp/>4.3714470e-06f,</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>4.6555282e-06f,<sp/>4.9580707e-06f,<sp/>5.2802740e-06f,<sp/>5.6234160e-06f,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>5.9888572e-06f,<sp/>6.3780469e-06f,<sp/>6.7925283e-06f,<sp/>7.2339451e-06f,</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>7.7040476e-06f,<sp/>8.2047000e-06f,<sp/>8.7378876e-06f,<sp/>9.3057248e-06f,</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>9.9104632e-06f,<sp/>1.0554501e-05f,<sp/>1.1240392e-05f,<sp/>1.1970856e-05f,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>1.2748789e-05f,<sp/>1.3577278e-05f,<sp/>1.4459606e-05f,<sp/>1.5399272e-05f,</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>1.6400004e-05f,<sp/>1.7465768e-05f,<sp/>1.8600792e-05f,<sp/>1.9809576e-05f,</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>2.1096914e-05f,<sp/>2.2467911e-05f,<sp/>2.3928002e-05f,<sp/>2.5482978e-05f,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>2.7139006e-05f,<sp/>2.8902651e-05f,<sp/>3.0780908e-05f,<sp/>3.2781225e-05f,</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>3.4911534e-05f,<sp/>3.7180282e-05f,<sp/>3.9596466e-05f,<sp/>4.2169667e-05f,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>4.4910090e-05f,<sp/>4.7828601e-05f,<sp/>5.0936773e-05f,<sp/>5.4246931e-05f,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>5.7772202e-05f,<sp/>6.1526565e-05f,<sp/>6.5524908e-05f,<sp/>6.9783085e-05f,</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>7.4317983e-05f,<sp/>7.9147585e-05f,<sp/>8.4291040e-05f,<sp/>8.9768747e-05f,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>9.5602426e-05f,<sp/>0.00010181521f,<sp/>0.00010843174f,<sp/>0.00011547824f,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>0.00012298267f,<sp/>0.00013097477f,<sp/>0.00013948625f,<sp/>0.00014855085f,</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>0.00015820453f,<sp/>0.00016848555f,<sp/>0.00017943469f,<sp/>0.00019109536f,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>0.00020351382f,<sp/>0.00021673929f,<sp/>0.00023082423f,<sp/>0.00024582449f,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>0.00026179955f,<sp/>0.00027881276f,<sp/>0.00029693158f,<sp/>0.00031622787f,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>0.00033677814f,<sp/>0.00035866388f,<sp/>0.00038197188f,<sp/>0.00040679456f,</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>0.00043323036f,<sp/>0.00046138411f,<sp/>0.00049136745f,<sp/>0.00052329927f,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>0.00055730621f,<sp/>0.00059352311f,<sp/>0.00063209358f,<sp/>0.00067317058f,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>0.00071691700f,<sp/>0.00076350630f,<sp/>0.00081312324f,<sp/>0.00086596457f,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>0.00092223983f,<sp/>0.00098217216f,<sp/>0.0010459992f,<sp/><sp/>0.0011139742f,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>0.0011863665f,<sp/><sp/>0.0012634633f,<sp/><sp/>0.0013455702f,<sp/><sp/>0.0014330129f,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>0.0015261382f,<sp/><sp/>0.0016253153f,<sp/><sp/>0.0017309374f,<sp/><sp/>0.0018434235f,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>0.0019632195f,<sp/><sp/>0.0020908006f,<sp/><sp/>0.0022266726f,<sp/><sp/>0.0023713743f,</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>0.0025254795f,<sp/><sp/>0.0026895994f,<sp/><sp/>0.0028643847f,<sp/><sp/>0.0030505286f,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>0.0032487691f,<sp/><sp/>0.0034598925f,<sp/><sp/>0.0036847358f,<sp/><sp/>0.0039241906f,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>0.0041792066f,<sp/><sp/>0.0044507950f,<sp/><sp/>0.0047400328f,<sp/><sp/>0.0050480668f,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>0.0053761186f,<sp/><sp/>0.0057254891f,<sp/><sp/>0.0060975636f,<sp/><sp/>0.0064938176f,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>0.0069158225f,<sp/><sp/>0.0073652516f,<sp/><sp/>0.0078438871f,<sp/><sp/>0.0083536271f,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>0.0088964928f,<sp/><sp/>0.009474637f,<sp/><sp/><sp/>0.010090352f,<sp/><sp/><sp/>0.010746080f,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>0.011444421f,<sp/><sp/><sp/>0.012188144f,<sp/><sp/><sp/>0.012980198f,<sp/><sp/><sp/>0.013823725f,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>0.014722068f,<sp/><sp/><sp/>0.015678791f,<sp/><sp/><sp/>0.016697687f,<sp/><sp/><sp/>0.017782797f,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>0.018938423f,<sp/><sp/><sp/>0.020169149f,<sp/><sp/><sp/>0.021479854f,<sp/><sp/><sp/>0.022875735f,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>0.024362330f,<sp/><sp/><sp/>0.025945531f,<sp/><sp/><sp/>0.027631618f,<sp/><sp/><sp/>0.029427276f,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>0.031339626f,<sp/><sp/><sp/>0.033376252f,<sp/><sp/><sp/>0.035545228f,<sp/><sp/><sp/>0.037855157f,</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>0.040315199f,<sp/><sp/><sp/>0.042935108f,<sp/><sp/><sp/>0.045725273f,<sp/><sp/><sp/>0.048696758f,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>0.051861348f,<sp/><sp/><sp/>0.055231591f,<sp/><sp/><sp/>0.058820850f,<sp/><sp/><sp/>0.062643361f,</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>0.066714279f,<sp/><sp/><sp/>0.071049749f,<sp/><sp/><sp/>0.075666962f,<sp/><sp/><sp/>0.080584227f,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>0.085821044f,<sp/><sp/><sp/>0.091398179f,<sp/><sp/><sp/>0.097337747f,<sp/><sp/><sp/>0.10366330f,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>0.11039993f,<sp/><sp/><sp/><sp/>0.11757434f,<sp/><sp/><sp/><sp/>0.12521498f,<sp/><sp/><sp/><sp/>0.13335215f,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>0.14201813f,<sp/><sp/><sp/><sp/>0.15124727f,<sp/><sp/><sp/><sp/>0.16107617f,<sp/><sp/><sp/><sp/>0.17154380f,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>0.18269168f,<sp/><sp/><sp/><sp/>0.19456402f,<sp/><sp/><sp/><sp/>0.20720788f,<sp/><sp/><sp/><sp/>0.22067342f,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>0.23501402f,<sp/><sp/><sp/><sp/>0.25028656f,<sp/><sp/><sp/><sp/>0.26655159f,<sp/><sp/><sp/><sp/>0.28387361f,</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>0.30232132f,<sp/><sp/><sp/><sp/>0.32196786f,<sp/><sp/><sp/><sp/>0.34289114f,<sp/><sp/><sp/><sp/>0.36517414f,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/>0.38890521f,<sp/><sp/><sp/><sp/>0.41417847f,<sp/><sp/><sp/><sp/>0.44109412f,<sp/><sp/><sp/><sp/>0.46975890f,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>0.50028648f,<sp/><sp/><sp/><sp/>0.53279791f,<sp/><sp/><sp/><sp/>0.56742212f,<sp/><sp/><sp/><sp/>0.60429640f,</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>0.64356699f,<sp/><sp/><sp/><sp/>0.68538959f,<sp/><sp/><sp/><sp/>0.72993007f,<sp/><sp/><sp/><sp/>0.77736504f,</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>0.82788260f,<sp/><sp/><sp/><sp/>0.88168307f,<sp/><sp/><sp/><sp/>0.9389798f,<sp/><sp/><sp/><sp/><sp/>1.0f</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>if<sp/>you<sp/>want<sp/>to<sp/>replace<sp/>this<sp/>bresenham<sp/>line-drawing<sp/>routine,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>you<sp/>must<sp/>produce<sp/>bit-identical<sp/>output<sp/>to<sp/>decode<sp/>correctly;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>specific<sp/>sequence<sp/>of<sp/>operations<sp/>is<sp/>specified<sp/>in<sp/>the<sp/>spec<sp/>(it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>drawing<sp/>integer-quantized<sp/>frequency-space<sp/>lines<sp/>that<sp/>the<sp/>encoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expects<sp/>to<sp/>be<sp/>exactly<sp/>the<sp/>same)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...<sp/>also,<sp/>isn&apos;t<sp/>the<sp/>whole<sp/>point<sp/>of<sp/>Bresenham&apos;s<sp/>algorithm<sp/>to<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>divide<sp/>in<sp/>the<sp/>setup?<sp/>sigh.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINE_OP(a,b)<sp/><sp/><sp/>a<sp/>*=<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINE_OP(a,b)<sp/><sp/><sp/>a<sp/>=<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_DIVIDE_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIVTAB_NUMER<sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIVTAB_DENOM<sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal">int8<sp/>integer_divide_table[DIVTAB_NUMER][DIVTAB_DENOM];<sp/></highlight><highlight class="comment">//<sp/>2KB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__forceinline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>draw_line(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ady<sp/>=<sp/>abs(dy);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=x0,y=y0;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sy;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_DIVIDE_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adx<sp/>&lt;<sp/>DIVTAB_DENOM<sp/>&amp;&amp;<sp/>ady<sp/>&lt;<sp/>DIVTAB_NUMER)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>-integer_divide_table[ady][adx];</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base-1;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/><sp/>integer_divide_table[ady][adx];</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base+1;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>dy<sp/>/<sp/>adx;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base+1;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/>base<sp/>=<sp/>dy<sp/>/<sp/>adx;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>base+1;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/>ady<sp/>-=<sp/>abs(base)<sp/>*<sp/>adx;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>n)<sp/>x1<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/>LINE_OP(output[x],<sp/>inverse_db_table[y]);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++x;<sp/>x<sp/>&lt;<sp/>x1;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>+=<sp/>ady;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&gt;=<sp/>adx)<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>-=<sp/>adx;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>sy;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>base;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LINE_OP(output[x],<sp/>inverse_db_table[y]);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>residue_decode(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*book,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*target,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rtype)</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rtype<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>n<sp/>/<sp/>book-&gt;dimensions;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>step;<sp/>++k)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode_step(f,<sp/>book,<sp/>target+offset+k,<sp/>n-offset-k,<sp/>step))</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode(f,<sp/>book,<sp/>target+offset,<sp/>n-k))</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>book-&gt;dimensions;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>book-&gt;dimensions;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>decode_residue(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*residue_buffers[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rn,<sp/>uint8<sp/>*do_not_decode)</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,pass;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><ref refid="structResidue" kindref="compound">Residue</ref><sp/>*r<sp/>=<sp/>f-&gt;residue_config<sp/>+<sp/>rn;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rtype<sp/>=<sp/>f-&gt;residue_types[rn];</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>r-&gt;classbook;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>classwords<sp/>=<sp/>f-&gt;codebooks[c].dimensions;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_read<sp/>=<sp/>r-&gt;end<sp/>-<sp/>r-&gt;begin;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part_read<sp/>=<sp/>n_read<sp/>/<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_alloc_point<sp/>=<sp/>temp_alloc_save(f);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>***part_classdata<sp/>=<sp/>(uint8<sp/>***)<sp/>temp_block_array(f,f-&gt;channels,<sp/>part_read<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**part_classdata));</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**classifications<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**)<sp/>temp_block_array(f,f-&gt;channels,<sp/>part_read<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**classifications));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/>stb_prof(2);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>ch;<sp/>++i)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!do_not_decode[i])</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(residue_buffers[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rtype<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>ch<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>ch<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>ch;<sp/>++j)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!do_not_decode[j])</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>ch)</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(3);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pass=0;<sp/>pass<sp/>&lt;<sp/>8;<sp/>++pass)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pcount<sp/>=<sp/>0,<sp/>class_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(13);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pcount<sp/>&lt;<sp/>part_read)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_inter<sp/>=<sp/>(z<sp/>&amp;<sp/>1),<sp/>p_inter<sp/>=<sp/>z&gt;&gt;1;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks+r-&gt;classbook;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(q,f,c);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part_classdata[0][class_set]<sp/>=<sp/>r-&gt;classdata[q];</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=classwords-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classifications[0][i+pcount]<sp/>=<sp/>q<sp/>%<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>/=<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(5);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>classwords<sp/>&amp;&amp;<sp/>pcount<sp/>&lt;<sp/>part_read;<sp/>++i,<sp/>++pcount)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>part_classdata[0][class_set][i];</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>classifications[0][pcount];</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>r-&gt;residue_books[c][pass];</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*book<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(20);<sp/><sp/></highlight><highlight class="comment">//<sp/>accounts<sp/>for<sp/>X<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode_deinterleave_repeat(f,<sp/>book,<sp/>residue_buffers,<sp/>ch,<sp/>&amp;c_inter,<sp/>&amp;p_inter,<sp/>n,<sp/>r-&gt;part_size))</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>saves<sp/>1%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode_deinterleave_repeat_2(f,<sp/>book,<sp/>residue_buffers,<sp/>&amp;c_inter,<sp/>&amp;p_inter,<sp/>n,<sp/>r-&gt;part_size))</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(7);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_inter<sp/>=<sp/>z<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_inter<sp/>=<sp/>z<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(8);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++class_set;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pcount<sp/>&lt;<sp/>part_read)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_inter<sp/>=<sp/>0,<sp/>p_inter<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks+r-&gt;classbook;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(q,f,c);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part_classdata[0][class_set]<sp/>=<sp/>r-&gt;classdata[q];</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=classwords-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classifications[0][i+pcount]<sp/>=<sp/>q<sp/>%<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>/=<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>classwords<sp/>&amp;&amp;<sp/>pcount<sp/>&lt;<sp/>part_read;<sp/>++i,<sp/>++pcount)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>part_classdata[0][class_set][i];</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>classifications[0][pcount];</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>r-&gt;residue_books[c][pass];</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*book<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(22);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode_deinterleave_repeat(f,<sp/>book,<sp/>residue_buffers,<sp/>ch,<sp/>&amp;c_inter,<sp/>&amp;p_inter,<sp/>n,<sp/>r-&gt;part_size))</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(3);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_inter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_inter<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++class_set;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pcount<sp/>&lt;<sp/>part_read)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_inter<sp/>=<sp/>z<sp/>%<sp/>ch,<sp/>p_inter<sp/>=<sp/>z/ch;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks+r-&gt;classbook;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(q,f,c);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part_classdata[0][class_set]<sp/>=<sp/>r-&gt;classdata[q];</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=classwords-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classifications[0][i+pcount]<sp/>=<sp/>q<sp/>%<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>/=<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>classwords<sp/>&amp;&amp;<sp/>pcount<sp/>&lt;<sp/>part_read;<sp/>++i,<sp/>++pcount)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount*r-&gt;part_size;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>part_classdata[0][class_set][i];</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>classifications[0][pcount];</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>r-&gt;residue_books[c][pass];</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*book<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(22);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codebook_decode_deinterleave_repeat(f,<sp/>book,<sp/>residue_buffers,<sp/>ch,<sp/>&amp;c_inter,<sp/>&amp;p_inter,<sp/>n,<sp/>r-&gt;part_size))</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prof(3);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_inter<sp/>=<sp/>z<sp/>%<sp/>ch;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_inter<sp/>=<sp/>z<sp/>/<sp/>ch;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++class_set;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/>stb_prof(9);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pass=0;<sp/>pass<sp/>&lt;<sp/>8;<sp/>++pass)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pcount<sp/>=<sp/>0,<sp/>class_set=0;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pcount<sp/>&lt;<sp/>part_read)<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>ch;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!do_not_decode[j])<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks+r-&gt;classbook;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(temp,f,c);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part_classdata[j][class_set]<sp/>=<sp/>r-&gt;classdata[temp];</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=classwords-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classifications[j][i+pcount]<sp/>=<sp/>temp<sp/>%<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>/=<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>classwords<sp/>&amp;&amp;<sp/>pcount<sp/>&lt;<sp/>part_read;<sp/>++i,<sp/>++pcount)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>ch;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!do_not_decode[j])<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>part_classdata[j][class_set][i];</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>classifications[j][pcount];</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>r-&gt;residue_books[c][pass];</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/>residue_buffers[j];</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>r-&gt;begin<sp/>+<sp/>pcount<sp/>*<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*book<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!residue_decode(f,<sp/>book,<sp/>target,<sp/>offset,<sp/>n,<sp/>rtype))</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++class_set;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>done:</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/>stb_prof(0);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/>temp_alloc_restore(f,temp_alloc_point);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>slow<sp/>way<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct_slow(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1984"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*x)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/>memcpy(x,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*x)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n2;<sp/>++j)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>formula<sp/>from<sp/>paper:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//acc<sp/>+=<sp/>n/4.0f<sp/>*<sp/>x[j]<sp/>*<sp/>(float)<sp/>cos(M_PI<sp/>/<sp/>2<sp/>/<sp/>n<sp/>*<sp/>(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>+<sp/>n/2.0)*(2*j+1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>formula<sp/>from<sp/>wikipedia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//acc<sp/>+=<sp/>2.0f<sp/>/<sp/>n2<sp/>*<sp/>x[j]<sp/>*<sp/>(float)<sp/>cos(M_PI/n2<sp/>*<sp/>(i<sp/>+<sp/>0.5<sp/>+<sp/>n2/2)*(j<sp/>+<sp/>0.5));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>equivalent,<sp/>except<sp/>the<sp/>formula<sp/>from<sp/>the<sp/>paper<sp/>inverts<sp/>the<sp/>multiplier!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however,<sp/>what<sp/>actually<sp/>works<sp/>is<sp/>NO<sp/>MULTIPLIER!?!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//acc<sp/>+=<sp/>64<sp/>*<sp/>2.0f<sp/>/<sp/>n2<sp/>*<sp/>x[j]<sp/>*<sp/>(float)<sp/>cos(M_PI/n2<sp/>*<sp/>(i<sp/>+<sp/>0.5<sp/>+<sp/>n2/2)*(j<sp/>+<sp/>0.5));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>x[j]<sp/>*<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cos(M_PI<sp/>/<sp/>2<sp/>/<sp/>n<sp/>*<sp/>(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>+<sp/>n/2.0)*(2*j+1));</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>above,<sp/>but<sp/>just<sp/>barely<sp/>able<sp/>to<sp/>run<sp/>in<sp/>real<sp/>time<sp/>on<sp/>modern<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct_slow(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocktype)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mcos[16384];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>nmask<sp/>=<sp/>(n<sp/>&lt;&lt;<sp/>2)<sp/>-1;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*x)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/>memcpy(x,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*x)<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>4*n;<sp/>++i)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcos[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cos(M_PI<sp/>/<sp/>2<sp/>*<sp/>i<sp/>/<sp/>n);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n2;<sp/>++j)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>x[j]<sp/>*<sp/>mcos[(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>+<sp/>n2)*(2*j+1)<sp/>&amp;<sp/>nmask];</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transform<sp/>to<sp/>use<sp/>a<sp/>slow<sp/>dct-iv;<sp/>this<sp/>is<sp/>STILL<sp/>basically<sp/>trivial,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>only<sp/>requires<sp/>half<sp/>as<sp/>many<sp/>ops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dct_iv_slow(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mcos[16384];</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x[2048];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>nmask<sp/>=<sp/>(n<sp/>&lt;&lt;<sp/>3)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/>memcpy(x,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*x)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8*n;<sp/>++i)</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcos[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cos(M_PI<sp/>/<sp/>4<sp/>*<sp/>i<sp/>/<sp/>n);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>x[j]<sp/>*<sp/>mcos[((2<sp/>*<sp/>i<sp/>+<sp/>1)*(2*j+1))<sp/>&amp;<sp/>nmask];</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//acc<sp/>+=<sp/>x[j]<sp/>*<sp/>cos(M_PI<sp/>/<sp/>n<sp/>*<sp/>(i<sp/>+<sp/>0.5)<sp/>*<sp/>(j<sp/>+<sp/>0.5));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct_slow(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocktype)</highlight></codeline>
<codeline lineno="2047"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n4<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>2,<sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>n3_4<sp/>=<sp/>n<sp/>-<sp/>n4;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp[4096];</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/>memcpy(temp,<sp/>buffer,<sp/>n2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/>dct_iv_slow(temp,<sp/>n2);<sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>-c&apos;-d,<sp/>a-b&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n4<sp/><sp/>;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>temp[i+n4];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a-b&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>n3_4;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>-temp[n3_4<sp/>-<sp/>i<sp/>-<sp/>1];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b-a&apos;,<sp/>c+d&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>n<sp/><sp/><sp/>;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>-temp[i<sp/>-<sp/>n3_4];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c&apos;+d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBVORBIS_MDCT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBVORBIS_MDCT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LIBVORBIS_MDCT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directly<sp/>call<sp/>the<sp/>vorbis<sp/>MDCT<sp/>using<sp/>an<sp/>interface<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Jeff<sp/>Roberts...<sp/>useful<sp/>for<sp/>performance<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2n;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*trig;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*bitrev;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">}<sp/>mdct_lookup;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_init(mdct_lookup<sp/>*lookup,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_clear(mdct_lookup<sp/>*l);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_backward(mdct_lookup<sp/>*init,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal">mdct_lookup<sp/>M1,M2;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocktype)</highlight></codeline>
<codeline lineno="2085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/>mdct_lookup<sp/>*M;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M1.n<sp/>==<sp/>n)<sp/>M<sp/>=<sp/>&amp;M1;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M2.n<sp/>==<sp/>n)<sp/>M<sp/>=<sp/>&amp;M2;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M1.n<sp/>==<sp/>0)<sp/>{<sp/>mdct_init(&amp;M1,<sp/>n);<sp/>M<sp/>=<sp/>&amp;M1;<sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M2.n)<sp/>__asm<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdct_init(&amp;M2,<sp/>n);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>&amp;M2;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/>mdct_backward(M,<sp/>buffer,<sp/>buffer);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>were<sp/>split<sp/>out<sp/>into<sp/>separate<sp/>functions<sp/>while<sp/>optimizing;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>could<sp/>be<sp/>pushed<sp/>back<sp/>up<sp/>but<sp/>eh.<sp/>__forceinline<sp/>showed<sp/>no<sp/>change;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they&apos;re<sp/>probably<sp/>already<sp/>being<sp/>inlined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>imdct_step3_iter0_loop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_off,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_off,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>)</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ee0<sp/>=<sp/>e<sp/>+<sp/>i_off;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ee2<sp/>=<sp/>ee0<sp/>+<sp/>k_off;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/>assert((n<sp/>&amp;<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=(n&gt;&gt;2);<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k00_20,<sp/>k01_21;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/><sp/>=<sp/>ee0[<sp/>0]<sp/>-<sp/>ee2[<sp/>0];</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/><sp/>=<sp/>ee0[-1]<sp/>-<sp/>ee2[-1];</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[<sp/>0]<sp/>+=<sp/>ee2[<sp/>0];</highlight><highlight class="comment">//ee0[<sp/>0]<sp/>=<sp/>ee0[<sp/>0]<sp/>+<sp/>ee2[<sp/>0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-1]<sp/>+=<sp/>ee2[-1];</highlight><highlight class="comment">//ee0[-1]<sp/>=<sp/>ee0[-1]<sp/>+<sp/>ee2[-1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[<sp/>0]<sp/>=<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-1]<sp/>=<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/><sp/>=<sp/>ee0[-2]<sp/>-<sp/>ee2[-2];</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/><sp/>=<sp/>ee0[-3]<sp/>-<sp/>ee2[-3];</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-2]<sp/>+=<sp/>ee2[-2];</highlight><highlight class="comment">//ee0[-2]<sp/>=<sp/>ee0[-2]<sp/>+<sp/>ee2[-2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-3]<sp/>+=<sp/>ee2[-3];</highlight><highlight class="comment">//ee0[-3]<sp/>=<sp/>ee0[-3]<sp/>+<sp/>ee2[-3];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-2]<sp/>=<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-3]<sp/>=<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/><sp/>=<sp/>ee0[-4]<sp/>-<sp/>ee2[-4];</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/><sp/>=<sp/>ee0[-5]<sp/>-<sp/>ee2[-5];</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-4]<sp/>+=<sp/>ee2[-4];</highlight><highlight class="comment">//ee0[-4]<sp/>=<sp/>ee0[-4]<sp/>+<sp/>ee2[-4];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-5]<sp/>+=<sp/>ee2[-5];</highlight><highlight class="comment">//ee0[-5]<sp/>=<sp/>ee0[-5]<sp/>+<sp/>ee2[-5];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-4]<sp/>=<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-5]<sp/>=<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/><sp/>=<sp/>ee0[-6]<sp/>-<sp/>ee2[-6];</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/><sp/>=<sp/>ee0[-7]<sp/>-<sp/>ee2[-7];</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-6]<sp/>+=<sp/>ee2[-6];</highlight><highlight class="comment">//ee0[-6]<sp/>=<sp/>ee0[-6]<sp/>+<sp/>ee2[-6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-7]<sp/>+=<sp/>ee2[-7];</highlight><highlight class="comment">//ee0[-7]<sp/>=<sp/>ee0[-7]<sp/>+<sp/>ee2[-7];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-6]<sp/>=<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-7]<sp/>=<sp/>k01_21<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>k00_20<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>imdct_step3_inner_r_loop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lim,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_off,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k1)</highlight></codeline>
<codeline lineno="2150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k00_20,<sp/>k01_21;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e0<sp/>=<sp/>e<sp/>+<sp/>d0;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e2<sp/>=<sp/>e0<sp/>+<sp/>k_off;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=lim<sp/>&gt;&gt;<sp/>2;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/>=<sp/>e0[-0]<sp/>-<sp/>e2[-0];</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/>=<sp/>e0[-1]<sp/>-<sp/>e2[-1];</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-0]<sp/>+=<sp/>e2[-0];</highlight><highlight class="comment">//e0[-0]<sp/>=<sp/>e0[-0]<sp/>+<sp/>e2[-0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-1]<sp/>+=<sp/>e2[-1];</highlight><highlight class="comment">//e0[-1]<sp/>=<sp/>e0[-1]<sp/>+<sp/>e2[-1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-0]<sp/>=<sp/>(k00_20)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>(k01_21)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-1]<sp/>=<sp/>(k01_21)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>(k00_20)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>k1;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/>=<sp/>e0[-2]<sp/>-<sp/>e2[-2];</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/>=<sp/>e0[-3]<sp/>-<sp/>e2[-3];</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-2]<sp/>+=<sp/>e2[-2];</highlight><highlight class="comment">//e0[-2]<sp/>=<sp/>e0[-2]<sp/>+<sp/>e2[-2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-3]<sp/>+=<sp/>e2[-3];</highlight><highlight class="comment">//e0[-3]<sp/>=<sp/>e0[-3]<sp/>+<sp/>e2[-3];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-2]<sp/>=<sp/>(k00_20)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>(k01_21)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-3]<sp/>=<sp/>(k01_21)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>(k00_20)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>k1;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/>=<sp/>e0[-4]<sp/>-<sp/>e2[-4];</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/>=<sp/>e0[-5]<sp/>-<sp/>e2[-5];</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-4]<sp/>+=<sp/>e2[-4];</highlight><highlight class="comment">//e0[-4]<sp/>=<sp/>e0[-4]<sp/>+<sp/>e2[-4];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-5]<sp/>+=<sp/>e2[-5];</highlight><highlight class="comment">//e0[-5]<sp/>=<sp/>e0[-5]<sp/>+<sp/>e2[-5];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-4]<sp/>=<sp/>(k00_20)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>(k01_21)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-5]<sp/>=<sp/>(k01_21)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>(k00_20)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>k1;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00_20<sp/>=<sp/>e0[-6]<sp/>-<sp/>e2[-6];</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k01_21<sp/>=<sp/>e0[-7]<sp/>-<sp/>e2[-7];</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-6]<sp/>+=<sp/>e2[-6];</highlight><highlight class="comment">//e0[-6]<sp/>=<sp/>e0[-6]<sp/>+<sp/>e2[-6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0[-7]<sp/>+=<sp/>e2[-7];</highlight><highlight class="comment">//e0[-7]<sp/>=<sp/>e0[-7]<sp/>+<sp/>e2[-7];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-6]<sp/>=<sp/>(k00_20)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>-<sp/>(k01_21)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2[-7]<sp/>=<sp/>(k01_21)*<ref refid="classA" kindref="compound">A</ref>[0]<sp/>+<sp/>(k00_20)<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[1];</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref><sp/>+=<sp/>k1;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>imdct_step3_inner_s_loop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_off,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_off,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_off,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k0)</highlight></codeline>
<codeline lineno="2200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A0<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0];</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A1<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+1];</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A2<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off];</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A3<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off+1];</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A4<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off*2+0];</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A5<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off*2+1];</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A6<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off*3+0];</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A7<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off*3+1];</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k00,k11;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ee0<sp/>=<sp/>e<sp/><sp/>+i_off;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ee2<sp/>=<sp/>ee0+k_off;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[<sp/>0]<sp/>-<sp/>ee2[<sp/>0];</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-1]<sp/>-<sp/>ee2[-1];</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[<sp/>0]<sp/>=<sp/><sp/>ee0[<sp/>0]<sp/>+<sp/>ee2[<sp/>0];</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-1]<sp/>=<sp/><sp/>ee0[-1]<sp/>+<sp/>ee2[-1];</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[<sp/>0]<sp/>=<sp/>(k00)<sp/>*<sp/>A0<sp/>-<sp/>(k11)<sp/>*<sp/>A1;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-1]<sp/>=<sp/>(k11)<sp/>*<sp/>A0<sp/>+<sp/>(k00)<sp/>*<sp/>A1;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-2]<sp/>-<sp/>ee2[-2];</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-3]<sp/>-<sp/>ee2[-3];</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-2]<sp/>=<sp/><sp/>ee0[-2]<sp/>+<sp/>ee2[-2];</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-3]<sp/>=<sp/><sp/>ee0[-3]<sp/>+<sp/>ee2[-3];</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-2]<sp/>=<sp/>(k00)<sp/>*<sp/>A2<sp/>-<sp/>(k11)<sp/>*<sp/>A3;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-3]<sp/>=<sp/>(k11)<sp/>*<sp/>A2<sp/>+<sp/>(k00)<sp/>*<sp/>A3;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-4]<sp/>-<sp/>ee2[-4];</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-5]<sp/>-<sp/>ee2[-5];</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-4]<sp/>=<sp/><sp/>ee0[-4]<sp/>+<sp/>ee2[-4];</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-5]<sp/>=<sp/><sp/>ee0[-5]<sp/>+<sp/>ee2[-5];</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-4]<sp/>=<sp/>(k00)<sp/>*<sp/>A4<sp/>-<sp/>(k11)<sp/>*<sp/>A5;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-5]<sp/>=<sp/>(k11)<sp/>*<sp/>A4<sp/>+<sp/>(k00)<sp/>*<sp/>A5;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-6]<sp/>-<sp/>ee2[-6];</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/><sp/>=<sp/>ee0[-7]<sp/>-<sp/>ee2[-7];</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-6]<sp/>=<sp/><sp/>ee0[-6]<sp/>+<sp/>ee2[-6];</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0[-7]<sp/>=<sp/><sp/>ee0[-7]<sp/>+<sp/>ee2[-7];</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-6]<sp/>=<sp/>(k00)<sp/>*<sp/>A6<sp/>-<sp/>(k11)<sp/>*<sp/>A7;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2[-7]<sp/>=<sp/>(k11)<sp/>*<sp/>A6<sp/>+<sp/>(k00)<sp/>*<sp/>A7;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee0<sp/>-=<sp/>k0;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ee2<sp/>-=<sp/>k0;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__forceinline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>iter_54(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*z)</highlight></codeline>
<codeline lineno="2251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k00,k11,k22,k33;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y0,y1,y2,y3;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/>k00<sp/><sp/>=<sp/>z[<sp/>0]<sp/>-<sp/>z[-4];</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/>y0<sp/><sp/><sp/>=<sp/>z[<sp/>0]<sp/>+<sp/>z[-4];</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/>y2<sp/><sp/><sp/>=<sp/>z[-2]<sp/>+<sp/>z[-6];</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/>k22<sp/><sp/>=<sp/>z[-2]<sp/>-<sp/>z[-6];</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/>z[-0]<sp/>=<sp/>y0<sp/>+<sp/>y2;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z0<sp/>+<sp/>z4<sp/>+<sp/>z2<sp/>+<sp/>z6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/>z[-2]<sp/>=<sp/>y0<sp/>-<sp/>y2;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z0<sp/>+<sp/>z4<sp/>-<sp/>z2<sp/>-<sp/>z6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>with<sp/>y0,y2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/>k33<sp/><sp/>=<sp/>z[-3]<sp/>-<sp/>z[-7];</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/>z[-4]<sp/>=<sp/>k00<sp/>+<sp/>k33;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z0<sp/>-<sp/>z4<sp/>+<sp/>z3<sp/>-<sp/>z7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/>z[-6]<sp/>=<sp/>k00<sp/>-<sp/>k33;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z0<sp/>-<sp/>z4<sp/>-<sp/>z3<sp/>+<sp/>z7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>with<sp/>k33</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/>k11<sp/><sp/>=<sp/>z[-1]<sp/>-<sp/>z[-5];</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/>y1<sp/><sp/><sp/>=<sp/>z[-1]<sp/>+<sp/>z[-5];</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/>y3<sp/><sp/><sp/>=<sp/>z[-3]<sp/>+<sp/>z[-7];</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/>z[-1]<sp/>=<sp/>y1<sp/>+<sp/>y3;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z1<sp/>+<sp/>z5<sp/>+<sp/>z3<sp/>+<sp/>z7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/>z[-3]<sp/>=<sp/>y1<sp/>-<sp/>y3;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z1<sp/>+<sp/>z5<sp/>-<sp/>z3<sp/>-<sp/>z7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/>z[-5]<sp/>=<sp/>k11<sp/>-<sp/>k22;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z1<sp/>-<sp/>z5<sp/>+<sp/>z2<sp/>-<sp/>z6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/>z[-7]<sp/>=<sp/>k11<sp/>+<sp/>k22;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z1<sp/>-<sp/>z5<sp/>-<sp/>z2<sp/>+<sp/>z6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>imdct_step3_inner_s_loop_ld654(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_off,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_n)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_off<sp/>=<sp/>-8;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_off<sp/>=<sp/>base_n<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A2<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>[0+a_off];</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>e<sp/>+<sp/>i_off;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*base<sp/>=<sp/>z<sp/>-<sp/>16<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k00,k11;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/>=<sp/>z[-0]<sp/>-<sp/>z[-8];</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/>=<sp/>z[-1]<sp/>-<sp/>z[-9];</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-0]<sp/>=<sp/>z[-0]<sp/>+<sp/>z[-8];</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-1]<sp/>=<sp/>z[-1]<sp/>+<sp/>z[-9];</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-8]<sp/>=<sp/><sp/>k00;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-9]<sp/>=<sp/><sp/>k11<sp/>;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/>=<sp/>z[<sp/>-2]<sp/>-<sp/>z[-10];</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/>=<sp/>z[<sp/>-3]<sp/>-<sp/>z[-11];</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-2]<sp/>=<sp/>z[<sp/>-2]<sp/>+<sp/>z[-10];</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-3]<sp/>=<sp/>z[<sp/>-3]<sp/>+<sp/>z[-11];</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-10]<sp/>=<sp/>(k00+k11)<sp/>*<sp/>A2;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-11]<sp/>=<sp/>(k11-k00)<sp/>*<sp/>A2;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/>=<sp/>z[-12]<sp/>-<sp/>z[<sp/>-4];<sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>to<sp/>avoid<sp/>a<sp/>unary<sp/>negation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/>=<sp/>z[<sp/>-5]<sp/>-<sp/>z[-13];</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-4]<sp/>=<sp/>z[<sp/>-4]<sp/>+<sp/>z[-12];</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-5]<sp/>=<sp/>z[<sp/>-5]<sp/>+<sp/>z[-13];</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-12]<sp/>=<sp/>k11;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-13]<sp/>=<sp/>k00;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k00<sp/><sp/><sp/><sp/>=<sp/>z[-14]<sp/>-<sp/>z[<sp/>-6];<sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>to<sp/>avoid<sp/>a<sp/>unary<sp/>negation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k11<sp/><sp/><sp/><sp/>=<sp/>z[<sp/>-7]<sp/>-<sp/>z[-15];</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-6]<sp/>=<sp/>z[<sp/>-6]<sp/>+<sp/>z[-14];</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[<sp/>-7]<sp/>=<sp/>z[<sp/>-7]<sp/>+<sp/>z[-15];</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-14]<sp/>=<sp/>(k00+k11)<sp/>*<sp/>A2;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z[-15]<sp/>=<sp/>(k00-k11)<sp/>*<sp/>A2;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter_54(z);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter_54(z-8);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocktype)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>n4<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>2,<sp/>n8<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>3,<sp/>l;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3_4<sp/>=<sp/>n<sp/>-<sp/>n4,<sp/>ld;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>reduce<sp/>register<sp/>pressure<sp/>by<sp/>using<sp/>fewer<sp/>variables?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>save_point<sp/>=<sp/>temp_alloc_save(f);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buf2<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>temp_alloc(f,<sp/>n2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*buf2));</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*u=NULL,*v=NULL;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>twiddle<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="classA" kindref="compound">A</ref><sp/>=<sp/>f-&gt;A[blocktype];</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IMDCT<sp/>algorithm<sp/>from<sp/>&quot;The<sp/>use<sp/>of<sp/>multirate<sp/>filter<sp/>banks<sp/>for<sp/>coding<sp/>of<sp/>high<sp/>quality<sp/>digital<sp/>audio&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>notes<sp/>about<sp/>bugs<sp/>in<sp/>that<sp/>paper<sp/>in<sp/>less-optimal<sp/>implementation<sp/>&apos;inverse_mdct_old&apos;<sp/>after<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kernel<sp/>from<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merged:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>copy<sp/>and<sp/>reflect<sp/>spectral<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>step<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>it<sp/>turns<sp/>out<sp/>that<sp/>the<sp/>items<sp/>added<sp/>together<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>step<sp/>are,<sp/>in<sp/>fact,<sp/>being<sp/>added<sp/>to<sp/>themselves<sp/>(as<sp/>reflected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>step<sp/>0).<sp/>inexplicable<sp/>inefficiency!<sp/>this<sp/>became<sp/>obvious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>I<sp/>combined<sp/>the<sp/>passes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>there&apos;s<sp/>a<sp/>missing<sp/>&apos;times<sp/>2&apos;<sp/>here<sp/>(for<sp/>adding<sp/>X<sp/>to<sp/>itself).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>propogates<sp/>through<sp/>linearly<sp/>to<sp/>the<sp/>end,<sp/>where<sp/>the<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>1/2<sp/>too<sp/>small,<sp/>and<sp/>need<sp/>to<sp/>be<sp/>compensated<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d,*e,<sp/>*AA,<sp/>*e_stop;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>&amp;buf2[n2-2];</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AA<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>&amp;buffer[0];</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e_stop<sp/>=<sp/>&amp;buffer[n2];</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e<sp/>!=<sp/>e_stop)<sp/>{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1]<sp/>=<sp/>(e[0]<sp/>*<sp/>AA[0]<sp/>-<sp/>e[2]*AA[1]);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0]<sp/>=<sp/>(e[0]<sp/>*<sp/>AA[1]<sp/>+<sp/>e[2]*AA[0]);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>&amp;buffer[n2-3];</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>buf2)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1]<sp/>=<sp/>(-e[2]<sp/>*<sp/>AA[0]<sp/>-<sp/>-e[0]*AA[1]);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0]<sp/>=<sp/>(-e[2]<sp/>*<sp/>AA[1]<sp/>+<sp/>-e[0]*AA[0]);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>use<sp/>symbolic<sp/>names<sp/>for<sp/>these,<sp/>so<sp/>that<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibly<sp/>swap<sp/>their<sp/>meaning<sp/>as<sp/>we<sp/>change<sp/>which<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/>u<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/>v<sp/>=<sp/>buf2;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>2<sp/><sp/><sp/><sp/>(paper<sp/>output<sp/>is<sp/>w,<sp/>now<sp/>u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>could<sp/>be<sp/>in<sp/>place,<sp/>but<sp/>the<sp/>data<sp/>ends<sp/>up<sp/>in<sp/>the<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place...<sp/>_somebody_&apos;s<sp/>got<sp/>to<sp/>swap<sp/>it,<sp/>so<sp/>this<sp/>is<sp/>nominated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*AA<sp/>=<sp/>&amp;<ref refid="classA" kindref="compound">A</ref>[n2-8];</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0,*d1,<sp/>*e0,<sp/>*e1;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>&amp;v[n4];</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>&amp;v[0];</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>&amp;u[n4];</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>&amp;u[0];</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(AA<sp/>&gt;=<sp/><ref refid="classA" kindref="compound">A</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v40_20,<sp/>v41_21;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v41_21<sp/>=<sp/>e0[1]<sp/>-<sp/>e1[1];</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v40_20<sp/>=<sp/>e0[0]<sp/>-<sp/>e1[0];</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[1]<sp/><sp/>=<sp/>e0[1]<sp/>+<sp/>e1[1];</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[0]<sp/><sp/>=<sp/>e0[0]<sp/>+<sp/>e1[0];</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[1]<sp/><sp/>=<sp/>v41_21*AA[4]<sp/>-<sp/>v40_20*AA[5];</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[0]<sp/><sp/>=<sp/>v40_20*AA[4]<sp/>+<sp/>v41_21*AA[5];</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v41_21<sp/>=<sp/>e0[3]<sp/>-<sp/>e1[3];</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v40_20<sp/>=<sp/>e0[2]<sp/>-<sp/>e1[2];</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[3]<sp/><sp/>=<sp/>e0[3]<sp/>+<sp/>e1[3];</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[2]<sp/><sp/>=<sp/>e0[2]<sp/>+<sp/>e1[2];</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[3]<sp/><sp/>=<sp/>v41_21*AA[0]<sp/>-<sp/>v40_20*AA[1];</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[2]<sp/><sp/>=<sp/>v40_20*AA[0]<sp/>+<sp/>v41_21*AA[1];</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e0<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/>ld<sp/>=<sp/>ilog(n)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>ilog<sp/>is<sp/>off-by-one<sp/>from<sp/>normal<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optimized<sp/>step<sp/>3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>original<sp/>step3<sp/>loop<sp/>can<sp/>be<sp/>nested<sp/>r<sp/>inside<sp/>s<sp/>or<sp/>s<sp/>inside<sp/>r;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>written<sp/>originally<sp/>as<sp/>s<sp/>inside<sp/>r,<sp/>but<sp/>this<sp/>is<sp/>dumb<sp/>when<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterates<sp/>many<sp/>times,<sp/>and<sp/>s<sp/>few.<sp/>So<sp/>I<sp/>have<sp/>two<sp/>copies<sp/>of<sp/>it<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>between<sp/>them<sp/>halfway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>iteration<sp/>0<sp/>of<sp/>step<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_iter0_loop(n<sp/>&gt;&gt;<sp/>4,<sp/>u,<sp/>n2-1-n4*0,<sp/>-(n<sp/>&gt;&gt;<sp/>3),<sp/><ref refid="classA" kindref="compound">A</ref>);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_iter0_loop(n<sp/>&gt;&gt;<sp/>4,<sp/>u,<sp/>n2-1-n4*1,<sp/>-(n<sp/>&gt;&gt;<sp/>3),<sp/><ref refid="classA" kindref="compound">A</ref>);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>iteration<sp/>1<sp/>of<sp/>step<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_inner_r_loop(n<sp/>&gt;&gt;<sp/>5,<sp/>u,<sp/>n2-1<sp/>-<sp/>n8*0,<sp/>-(n<sp/>&gt;&gt;<sp/>4),<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_inner_r_loop(n<sp/>&gt;&gt;<sp/>5,<sp/>u,<sp/>n2-1<sp/>-<sp/>n8*1,<sp/>-(n<sp/>&gt;&gt;<sp/>4),<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_inner_r_loop(n<sp/>&gt;&gt;<sp/>5,<sp/>u,<sp/>n2-1<sp/>-<sp/>n8*2,<sp/>-(n<sp/>&gt;&gt;<sp/>4),<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_inner_r_loop(n<sp/>&gt;&gt;<sp/>5,<sp/>u,<sp/>n2-1<sp/>-<sp/>n8*3,<sp/>-(n<sp/>&gt;&gt;<sp/>4),<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/>l=2;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>l<sp/>&lt;<sp/>(ld-3)&gt;&gt;1;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k0<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>(l+2),<sp/>k0_2<sp/>=<sp/>k0&gt;&gt;1;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lim<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(l+1);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>lim;<sp/>++i)</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdct_step3_inner_r_loop(n<sp/>&gt;&gt;<sp/>(l+4),<sp/>u,<sp/>n2-1<sp/>-<sp/>k0*i,<sp/>-k0_2,<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>1<sp/>&lt;&lt;<sp/>(l+3));</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>l<sp/>&lt;<sp/>ld-6;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k0<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>(l+2),<sp/>k1<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(l+3),<sp/>k0_2<sp/>=<sp/>k0&gt;&gt;1;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlim<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>(l+6),<sp/>r;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lim<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(l+1);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_off;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*A0<sp/>=<sp/><ref refid="classA" kindref="compound">A</ref>;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i_off<sp/>=<sp/>n2-1;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r=rlim;<sp/>r<sp/>&gt;<sp/>0;<sp/>--r)<sp/>{</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdct_step3_inner_s_loop(lim,<sp/>u,<sp/>i_off,<sp/>-k0_2,<sp/>A0,<sp/>k1,<sp/>k0);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A0<sp/>+=<sp/>k1*4;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_off<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterations<sp/>with<sp/>count:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>ld-6,-5,-4<sp/>all<sp/>interleaved<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>big<sp/>win<sp/>comes<sp/>from<sp/>getting<sp/>rid<sp/>of<sp/>needless<sp/>flops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>due<sp/>to<sp/>the<sp/>constants<sp/>on<sp/>pass<sp/>5<sp/>&amp;<sp/>4<sp/>being<sp/>all<sp/>1<sp/>and<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>combining<sp/>them<sp/>to<sp/>be<sp/>simultaneous<sp/>to<sp/>improve<sp/>cache<sp/>made<sp/>little<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/>imdct_step3_inner_s_loop_ld654(n<sp/>&gt;&gt;<sp/>5,<sp/>u,<sp/>n2-1,<sp/><ref refid="classA" kindref="compound">A</ref>,<sp/>n);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>is<sp/>u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>4,<sp/>5,<sp/>and<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>be<sp/>in-place<sp/>because<sp/>of<sp/>step<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16<sp/>*bitrev<sp/>=<sp/>f-&gt;bit_reverse[blocktype];</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weirdly,<sp/>I&apos;d<sp/>have<sp/>thought<sp/>reading<sp/>sequentially<sp/>and<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>erratically<sp/>would<sp/>have<sp/>been<sp/>better<sp/>than<sp/>vice-versa,<sp/>but<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fact<sp/>that&apos;s<sp/>not<sp/>what<sp/>my<sp/>testing<sp/>showed.<sp/>(That<sp/>is,<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>j<sp/>=<sp/>bitreverse(i),<sp/>do<sp/>you<sp/>read<sp/>i<sp/>and<sp/>write<sp/>j,<sp/>or<sp/>read<sp/>j<sp/>and<sp/>write<sp/>i.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0<sp/>=<sp/>&amp;v[n4-4];</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d1<sp/>=<sp/>&amp;v[n2-4];</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(d0<sp/>&gt;=<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k4;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k4<sp/>=<sp/>bitrev[0];</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[3]<sp/>=<sp/>u[k4+0];</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[2]<sp/>=<sp/>u[k4+1];</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[3]<sp/>=<sp/>u[k4+2];</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[2]<sp/>=<sp/>u[k4+3];</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k4<sp/>=<sp/>bitrev[1];</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[1]<sp/>=<sp/>u[k4+0];</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[0]<sp/>=<sp/>u[k4+1];</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[1]<sp/>=<sp/>u[k4+2];</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[0]<sp/>=<sp/>u[k4+3];</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitrev<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(paper<sp/>output<sp/>is<sp/>u,<sp/>now<sp/>v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>must<sp/>be<sp/>in<sp/>buf2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/>assert(v<sp/>==<sp/>buf2);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>7<sp/><sp/><sp/>(paper<sp/>output<sp/>is<sp/>v,<sp/>now<sp/>v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>now<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*C<sp/>=<sp/>f-&gt;C[blocktype];</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d,<sp/>*e;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>v<sp/>+<sp/>n2<sp/>-<sp/>4;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a02,a11,b0,b1,b2,b3;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a02<sp/>=<sp/>d[0]<sp/>-<sp/>e[2];</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a11<sp/>=<sp/>d[1]<sp/>+<sp/>e[3];</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b0<sp/>=<sp/>C[1]*a02<sp/>+<sp/>C[0]*a11;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>C[1]*a11<sp/>-<sp/>C[0]*a02;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>d[0]<sp/>+<sp/>e[<sp/>2];</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b3<sp/>=<sp/>d[1]<sp/>-<sp/>e[<sp/>3];</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0]<sp/>=<sp/>b2<sp/>+<sp/>b0;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1]<sp/>=<sp/>b3<sp/>+<sp/>b1;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[2]<sp/>=<sp/>b2<sp/>-<sp/>b0;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[3]<sp/>=<sp/>b1<sp/>-<sp/>b3;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a02<sp/>=<sp/>d[2]<sp/>-<sp/>e[0];</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a11<sp/>=<sp/>d[3]<sp/>+<sp/>e[1];</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b0<sp/>=<sp/>C[3]*a02<sp/>+<sp/>C[2]*a11;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>C[3]*a11<sp/>-<sp/>C[2]*a02;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>d[2]<sp/>+<sp/>e[<sp/>0];</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b3<sp/>=<sp/>d[3]<sp/>-<sp/>e[<sp/>1];</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[2]<sp/>=<sp/>b2<sp/>+<sp/>b0;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[3]<sp/>=<sp/>b3<sp/>+<sp/>b1;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[0]<sp/>=<sp/>b2<sp/>-<sp/>b0;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[1]<sp/>=<sp/>b1<sp/>-<sp/>b3;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>must<sp/>be<sp/>in<sp/>buf2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>8+decode<sp/><sp/><sp/>(paper<sp/>output<sp/>is<sp/>X,<sp/>now<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>generates<sp/>pairs<sp/>of<sp/>data<sp/>a<sp/>la<sp/>8<sp/>and<sp/>pushes<sp/>them<sp/>directly<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>decode<sp/>kernel<sp/>(pushing<sp/>rather<sp/>than<sp/>pulling)<sp/>to<sp/>avoid<sp/>having</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>make<sp/>another<sp/>pass<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>cannot<sp/>POSSIBLY<sp/>be<sp/>in<sp/>place,<sp/>so<sp/>we<sp/>refer<sp/>to<sp/>the<sp/>buffers<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0,*d1,*d2,*d3;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>f-&gt;B[blocktype]<sp/>+<sp/>n2<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e<sp/>=<sp/>buf2<sp/>+<sp/>n2<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>&amp;buffer[0];</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>&amp;buffer[n2-4];</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>&amp;buffer[n2];</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>&amp;buffer[n-4];</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e<sp/>&gt;=<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p0,p1,p2,p3;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/><sp/>e[6]*B[7]<sp/>-<sp/>e[7]*B[6];</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>-e[6]*B[6]<sp/>-<sp/>e[7]*B[7];</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[0]<sp/>=<sp/><sp/><sp/>p3;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[3]<sp/>=<sp/>-<sp/>p3;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[0]<sp/>=<sp/><sp/><sp/>p2;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[3]<sp/>=<sp/><sp/><sp/>p2;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/><sp/>e[4]*B[5]<sp/>-<sp/>e[5]*B[4];</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>-e[4]*B[4]<sp/>-<sp/>e[5]*B[5];</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[1]<sp/>=<sp/><sp/><sp/>p1;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[2]<sp/>=<sp/>-<sp/>p1;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[1]<sp/>=<sp/><sp/><sp/>p0;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[2]<sp/>=<sp/><sp/><sp/>p0;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/><sp/>e[2]*B[3]<sp/>-<sp/>e[3]*B[2];</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>-e[2]*B[2]<sp/>-<sp/>e[3]*B[3];</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[2]<sp/>=<sp/><sp/><sp/>p3;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[1]<sp/>=<sp/>-<sp/>p3;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[2]<sp/>=<sp/><sp/><sp/>p2;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[1]<sp/>=<sp/><sp/><sp/>p2;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/><sp/>e[0]*B[1]<sp/>-<sp/>e[1]*B[0];</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>-e[0]*B[0]<sp/>-<sp/>e[1]*B[1];</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[3]<sp/>=<sp/><sp/><sp/>p1;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[0]<sp/>=<sp/>-<sp/>p1;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[3]<sp/>=<sp/><sp/><sp/>p0;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[0]<sp/>=<sp/><sp/><sp/>p0;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/>temp_alloc_restore(f,save_point);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>original<sp/>version<sp/>of<sp/>the<sp/>above<sp/>code,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>optimize<sp/>it<sp/>from<sp/>scratch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverse_mdct_naive(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classA" kindref="compound">A</ref>[1<sp/>&lt;&lt;<sp/>12],<sp/>B[1<sp/>&lt;&lt;<sp/>12],<sp/>C[1<sp/>&lt;&lt;<sp/>11];</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,k2,k4,<sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1,<sp/>n4<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>2,<sp/>n8<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>3,<sp/>l;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3_4<sp/>=<sp/>n<sp/>-<sp/>n4,<sp/>ld;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>can<sp/>they<sp/>claim<sp/>this<sp/>only<sp/>uses<sp/>N<sp/>words?!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>oh,<sp/>because<sp/>they&apos;re<sp/>only<sp/>used<sp/>sparsely,<sp/>whoops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u[1<sp/>&lt;&lt;<sp/>13],<sp/>X[1<sp/>&lt;&lt;<sp/>13],<sp/>v[1<sp/>&lt;&lt;<sp/>13],<sp/>w[1<sp/>&lt;&lt;<sp/>13];</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>twiddle<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n4;<sp/>++k,k2+=2)<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref>[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos(4*k*M_PI/n);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classA" kindref="compound">A</ref>[k2+1]<sp/>=<sp/>(float)<sp/>-sin(4*k*M_PI/n);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos((k2+1)*M_PI/n/2);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[k2+1]<sp/>=<sp/>(float)<sp/><sp/>sin((k2+1)*M_PI/n/2);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n8;<sp/>++k,k2+=2)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C[k2<sp/><sp/>]<sp/>=<sp/>(float)<sp/><sp/>cos(2*(k2+1)*M_PI/n);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C[k2+1]<sp/>=<sp/>(float)<sp/>-sin(2*(k2+1)*M_PI/n);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IMDCT<sp/>algorithm<sp/>from<sp/>&quot;The<sp/>use<sp/>of<sp/>multirate<sp/>filter<sp/>banks<sp/>for<sp/>coding<sp/>of<sp/>high<sp/>quality<sp/>digital<sp/>audio&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>there<sp/>are<sp/>bugs<sp/>in<sp/>that<sp/>pseudocode,<sp/>presumably<sp/>due<sp/>to<sp/>them<sp/>attempting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>rename<sp/>the<sp/>arrays<sp/>nicely<sp/>rather<sp/>than<sp/>representing<sp/>the<sp/>way<sp/>their<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>bounces<sp/>buffers<sp/>back<sp/>and<sp/>forth.<sp/>As<sp/>a<sp/>result,<sp/>even<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;some<sp/>formulars<sp/>corrected&quot;<sp/>version,<sp/>a<sp/>direct<sp/>implementation<sp/>fails.<sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>noted<sp/>below<sp/>as<sp/>&quot;paper<sp/>bug&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>and<sp/>reflect<sp/>spectral<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n2;<sp/>++k)<sp/>u[k]<sp/>=<sp/>buffer[k];</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>k<sp/>&lt;<sp/>n<sp/>;<sp/>++k)<sp/>u[k]<sp/>=<sp/>-buffer[n<sp/>-<sp/>k<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kernel<sp/>from<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=k4=0;<sp/>k<sp/>&lt;<sp/>n4;<sp/>k+=1,<sp/>k2+=2,<sp/>k4+=4)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n-k4-1]<sp/>=<sp/>(u[k4]<sp/>-<sp/>u[n-k4-1])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[k2]<sp/><sp/><sp/>-<sp/>(u[k4+2]<sp/>-<sp/>u[n-k4-3])*<ref refid="classA" kindref="compound">A</ref>[k2+1];</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n-k4-3]<sp/>=<sp/>(u[k4]<sp/>-<sp/>u[n-k4-1])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[k2+1]<sp/>+<sp/>(u[k4+2]<sp/>-<sp/>u[n-k4-3])*<ref refid="classA" kindref="compound">A</ref>[k2];</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k4=0;<sp/>k<sp/>&lt;<sp/>n8;<sp/>k+=1,<sp/>k4+=4)<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[n2+3+k4]<sp/>=<sp/>v[n2+3+k4]<sp/>+<sp/>v[k4+3];</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[n2+1+k4]<sp/>=<sp/>v[n2+1+k4]<sp/>+<sp/>v[k4+1];</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[k4+3]<sp/><sp/><sp/><sp/>=<sp/>(v[n2+3+k4]<sp/>-<sp/>v[k4+3])*<ref refid="classA" kindref="compound">A</ref>[n2-4-k4]<sp/>-<sp/>(v[n2+1+k4]-v[k4+1])*<ref refid="classA" kindref="compound">A</ref>[n2-3-k4];</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[k4+1]<sp/><sp/><sp/><sp/>=<sp/>(v[n2+1+k4]<sp/>-<sp/>v[k4+1])*<ref refid="classA" kindref="compound">A</ref>[n2-4-k4]<sp/>+<sp/>(v[n2+3+k4]-v[k4+3])*<ref refid="classA" kindref="compound">A</ref>[n2-3-k4];</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/>ld<sp/>=<sp/>ilog(n)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>ilog<sp/>is<sp/>off-by-one<sp/>from<sp/>normal<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l=0;<sp/>l<sp/>&lt;<sp/>ld-3;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k0<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>(l+2),<sp/>k1<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(l+3);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlim<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>(l+4),<sp/>r4,<sp/>r;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2lim<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(l+2),<sp/>s2;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r=r4=0;<sp/>r<sp/>&lt;<sp/>rlim;<sp/>r4+=4,++r)<sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s2=0;<sp/>s2<sp/>&lt;<sp/>s2lim;<sp/>s2+=2)<sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[n-1-k0*s2-r4]<sp/>=<sp/>w[n-1-k0*s2-r4]<sp/>+<sp/>w[n-1-k0*(s2+1)-r4];</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[n-3-k0*s2-r4]<sp/>=<sp/>w[n-3-k0*s2-r4]<sp/>+<sp/>w[n-3-k0*(s2+1)-r4];</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[n-1-k0*(s2+1)-r4]<sp/>=<sp/>(w[n-1-k0*s2-r4]<sp/>-<sp/>w[n-1-k0*(s2+1)-r4])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[r*k1]</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(w[n-3-k0*s2-r4]<sp/>-<sp/>w[n-3-k0*(s2+1)-r4])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[r*k1+1];</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[n-3-k0*(s2+1)-r4]<sp/>=<sp/>(w[n-3-k0*s2-r4]<sp/>-<sp/>w[n-3-k0*(s2+1)-r4])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[r*k1]</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(w[n-1-k0*s2-r4]<sp/>-<sp/>w[n-1-k0*(s2+1)-r4])<sp/>*<sp/><ref refid="classA" kindref="compound">A</ref>[r*k1+1];</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l+1<sp/>&lt;<sp/>ld-3)<sp/>{</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>paper<sp/>bug:<sp/>ping-ponging<sp/>of<sp/>u&amp;w<sp/>here<sp/>is<sp/>omitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(w,<sp/>u,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(u));</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>bit_reverse(i)<sp/>&gt;&gt;<sp/>(32-ld+3);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(j<sp/>&lt;<sp/>n8);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>paper<sp/>bug:<sp/>original<sp/>code<sp/>probably<sp/>swapped<sp/>in<sp/>place;<sp/>if<sp/>copying,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need<sp/>to<sp/>directly<sp/>copy<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i8<sp/>=<sp/>i<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i8+1]<sp/>=<sp/>u[i8+1];</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i8+3]<sp/>=<sp/>u[i8+3];</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i8+5]<sp/>=<sp/>u[i8+5];</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i8+7]<sp/>=<sp/>u[i8+7];</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i8<sp/>=<sp/>i<sp/>&lt;&lt;<sp/>3,<sp/>j8<sp/>=<sp/>j<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j8+1]<sp/>=<sp/>u[i8+1],<sp/>v[i8+1]<sp/>=<sp/>u[j8<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j8+3]<sp/>=<sp/>u[i8+3],<sp/>v[i8+3]<sp/>=<sp/>u[j8<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j8+5]<sp/>=<sp/>u[i8+5],<sp/>v[i8+5]<sp/>=<sp/>u[j8<sp/>+<sp/>5];</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j8+7]<sp/>=<sp/>u[i8+7],<sp/>v[i8+7]<sp/>=<sp/>u[j8<sp/>+<sp/>7];</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n2;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[k]<sp/>=<sp/>v[k*2+1];</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=k4=0;<sp/>k<sp/>&lt;<sp/>n8;<sp/>++k,<sp/>k2<sp/>+=<sp/>2,<sp/>k4<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u[n-1-k2]<sp/>=<sp/>w[k4];</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u[n-2-k2]<sp/>=<sp/>w[k4+1];</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u[n3_4<sp/>-<sp/>1<sp/>-<sp/>k2]<sp/>=<sp/>w[k4+2];</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u[n3_4<sp/>-<sp/>2<sp/>-<sp/>k2]<sp/>=<sp/>w[k4+3];</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n8;<sp/>++k,<sp/>k2<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n2<sp/>+<sp/>k2<sp/>]<sp/>=<sp/>(<sp/>u[n2<sp/>+<sp/>k2]<sp/>+<sp/>u[n-2-k2]<sp/>+<sp/>C[k2+1]*(u[n2+k2]-u[n-2-k2])<sp/>+<sp/>C[k2]*(u[n2+k2+1]+u[n-2-k2+1]))/2;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n-2<sp/>-<sp/>k2]<sp/>=<sp/>(<sp/>u[n2<sp/>+<sp/>k2]<sp/>+<sp/>u[n-2-k2]<sp/>-<sp/>C[k2+1]*(u[n2+k2]-u[n-2-k2])<sp/>-<sp/>C[k2]*(u[n2+k2+1]+u[n-2-k2+1]))/2;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n2+1+<sp/>k2]<sp/>=<sp/>(<sp/>u[n2+1+k2]<sp/>-<sp/>u[n-1-k2]<sp/>+<sp/>C[k2+1]*(u[n2+1+k2]+u[n-1-k2])<sp/>-<sp/>C[k2]*(u[n2+k2]-u[n-2-k2]))/2;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[n-1<sp/>-<sp/>k2]<sp/>=<sp/>(-u[n2+1+k2]<sp/>+<sp/>u[n-1-k2]<sp/>+<sp/>C[k2+1]*(u[n2+1+k2]+u[n-1-k2])<sp/>-<sp/>C[k2]*(u[n2+k2]-u[n-2-k2]))/2;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=k2=0;<sp/>k<sp/>&lt;<sp/>n4;<sp/>++k,k2<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X[k]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>v[k2+n2]*B[k2<sp/><sp/>]<sp/>+<sp/>v[k2+1+n2]*B[k2+1];</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X[n2-1-k]<sp/>=<sp/>v[k2+n2]*B[k2+1]<sp/>-<sp/>v[k2+1+n2]*B[k2<sp/><sp/>];</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>kernel<sp/>to<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determined<sp/>the<sp/>following<sp/>value<sp/>experimentally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(by<sp/>first<sp/>figuring<sp/>out<sp/>what<sp/>made<sp/>inverse_mdct_slow<sp/>work);<sp/>then<sp/>matching<sp/>that<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(probably<sp/>vorbis<sp/>encoder<sp/>premultiplies<sp/>by<sp/>n<sp/>or<sp/>n/2,<sp/>to<sp/>save<sp/>it<sp/>on<sp/>the<sp/>decoder?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//<sp/>theoretically<sp/>would<sp/>be<sp/>n4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[[[<sp/>note!<sp/>the<sp/>s<sp/>value<sp/>of<sp/>0.5<sp/>is<sp/>compensated<sp/>for<sp/>by<sp/>the<sp/>B[]<sp/>in<sp/>the<sp/>current<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>so<sp/>it<sp/>needs<sp/>to<sp/>use<sp/>the<sp/>&quot;old&quot;<sp/>B<sp/>values<sp/>to<sp/>behave<sp/>correctly,<sp/>or<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>set<sp/>s<sp/>to<sp/>1.0<sp/>]]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n4<sp/><sp/>;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>s<sp/>*<sp/>X[i+n4];</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>n3_4;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>-s<sp/>*<sp/>X[n3_4<sp/>-<sp/>i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>n<sp/><sp/><sp/>;<sp/>++i)<sp/>buffer[i]<sp/>=<sp/>-s<sp/>*<sp/>X[i<sp/>-<sp/>n3_4];</highlight></codeline>
<codeline lineno="2753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*get_window(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/>len<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>f-&gt;blocksize_0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;window[0];</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>f-&gt;blocksize_1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;window[1];</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int16<sp/>YTYPE;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>YTYPE;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_floor(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/><ref refid="structMapping" kindref="compound">Mapping</ref><sp/>*map,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*target,<sp/>YTYPE<sp/>*finalY,<sp/>uint8<sp/>*step2_flag)</highlight></codeline>
<codeline lineno="2771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>map-&gt;chan[i].mux,<sp/>floor;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/>floor<sp/>=<sp/>map-&gt;submap_floor[s];</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;floor_types[floor]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFloor1" kindref="compound">Floor1</ref><sp/>*g<sp/>=<sp/>&amp;f-&gt;floor_config[floor].floor1;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,q;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lx<sp/>=<sp/>0,<sp/>ly<sp/>=<sp/>finalY[0]<sp/>*<sp/>g-&gt;floor1_multiplier;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=1;<sp/>q<sp/>&lt;<sp/>g-&gt;values;<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>g-&gt;sorted_order[q];</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finalY[j]<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(step2_flag[j])</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hy<sp/>=<sp/>finalY[j]<sp/>*<sp/>g-&gt;floor1_multiplier;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hx<sp/>=<sp/>g-&gt;Xlist[j];</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>draw_line(target,<sp/>lx,ly,<sp/>hx,hy,<sp/>n2);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lx<sp/>=<sp/>hx,<sp/>ly<sp/>=<sp/>hy;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lx<sp/>&lt;<sp/>n2)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optimization<sp/>of:<sp/>draw_line(target,<sp/>lx,ly,<sp/>n,ly,<sp/>n2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=lx;<sp/>j<sp/>&lt;<sp/>n2;<sp/>++j)</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LINE_OP(target[j],<sp/>inverse_db_table[ly]);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_decode_initial(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_left_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_left_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_right_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_right_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="2804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><ref refid="structMode" kindref="compound">Mode</ref><sp/>*m;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n,<sp/>prev,<sp/>next,<sp/>window_center;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/>retry:</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!maybe_start_packet(f))</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>packet<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,1)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,VORBIS_bad_packet_type);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(EOP<sp/>!=<sp/>get8_packet(f));</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>retry;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;alloc.alloc_buffer_length_in_bytes<sp/>==<sp/>f-&gt;temp_offset);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>get_bits(f,<sp/>ilog(f-&gt;mode_count-1));</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>EOP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>f-&gt;mode_count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/>*mode<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>f-&gt;mode_config<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;blockflag)<sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>f-&gt;blocksize_1;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>next<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>f-&gt;blocksize_0;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WINDOWING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/>window_center<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;blockflag<sp/>&amp;&amp;<sp/>!prev)<sp/>{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_left_start<sp/>=<sp/>(n<sp/>-<sp/>f-&gt;blocksize_0)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_left_end<sp/><sp/><sp/>=<sp/>(n<sp/>+<sp/>f-&gt;blocksize_0)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_left_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_left_end<sp/><sp/><sp/>=<sp/>window_center;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;blockflag<sp/>&amp;&amp;<sp/>!next)<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_right_start<sp/>=<sp/>(n*3<sp/>-<sp/>f-&gt;blocksize_0)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_right_end<sp/><sp/><sp/>=<sp/>(n*3<sp/>+<sp/>f-&gt;blocksize_0)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_right_start<sp/>=<sp/>window_center;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_right_end<sp/><sp/><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_decode_packet_rest(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len,<sp/><ref refid="structMode" kindref="compound">Mode</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_left)</highlight></codeline>
<codeline lineno="2859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><ref refid="structMapping" kindref="compound">Mapping</ref><sp/>*map;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,n,n2;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zero_channel[256];</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>really_zero_channel[256];</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_center;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WINDOWING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>f-&gt;blocksize[m-&gt;blockflag];</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/>window_center<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/>map<sp/>=<sp/>&amp;f-&gt;mapping[m-&gt;mapping];</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FLOORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/>stb_prof(1);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>map-&gt;chan[i].mux,<sp/>floor;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zero_channel[i]<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>floor<sp/>=<sp/>map-&gt;submap_floor[s];</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;floor_types[floor]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFloor1" kindref="compound">Floor1</ref><sp/>*g<sp/>=<sp/>&amp;f-&gt;floor_config[floor].floor1;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*finalY;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>step2_flag[256];</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range_list[4]<sp/>=<sp/>{<sp/>256,<sp/>128,<sp/>86,<sp/>64<sp/>};</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>range_list[g-&gt;floor1_multiplier-1];</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY<sp/>=<sp/>f-&gt;finalY[i];</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[0]<sp/>=<sp/>get_bits(f,<sp/>ilog(range)-1);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[1]<sp/>=<sp/>get_bits(f,<sp/>ilog(range)-1);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;partitions;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pclass<sp/>=<sp/>g-&gt;partition_class_list[j];</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cdim<sp/>=<sp/>g-&gt;class_dimensions[pclass];</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbits<sp/>=<sp/>g-&gt;class_subclasses[pclass];</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>csub<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>cbits)-1;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cbits)<sp/>{</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>g-&gt;class_masterbooks[pclass];</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(cval,f,c);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>cdim;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>book<sp/>=<sp/>g-&gt;subclass_books[pclass][cval<sp/>&amp;<sp/>csub];</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cval<sp/>=<sp/>cval<sp/>&gt;&gt;<sp/>cbits;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(book<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks<sp/>+<sp/>book;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECODE(temp,f,c);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[offset++]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[offset++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;valid_bits<sp/>==<sp/>INVALID_BITS)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;<sp/></highlight><highlight class="comment">//<sp/>behavior<sp/>according<sp/>to<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step2_flag[0]<sp/>=<sp/>step2_flag[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=2;<sp/>j<sp/>&lt;<sp/>g-&gt;values;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,<sp/>high,<sp/>pred,<sp/>highroom,<sp/>lowroom,<sp/>room,<sp/>val;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>g-&gt;neighbors[j][0];</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high<sp/>=<sp/>g-&gt;neighbors[j][1];</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//neighbors(g-&gt;Xlist,<sp/>j,<sp/>&amp;low,<sp/>&amp;high);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>predict_point(g-&gt;Xlist[j],<sp/>g-&gt;Xlist[low],<sp/>g-&gt;Xlist[high],<sp/>finalY[low],<sp/>finalY[high]);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>finalY[j];</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highroom<sp/>=<sp/>range<sp/>-<sp/>pred;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowroom<sp/>=<sp/>pred;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highroom<sp/>&lt;<sp/>lowroom)</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>room<sp/>=<sp/>highroom<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>room<sp/>=<sp/>lowroom<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)<sp/>{</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step2_flag[low]<sp/>=<sp/>step2_flag[high]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step2_flag[j]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>room)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highroom<sp/>&gt;<sp/>lowroom)</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>val<sp/>-<sp/>lowroom<sp/>+<sp/>pred;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>pred<sp/>-<sp/>val<sp/>+<sp/>highroom<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>pred<sp/>-<sp/>((val+1)&gt;&gt;1);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>pred<sp/>+<sp/>(val&gt;&gt;1);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step2_flag[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>pred;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_floor(f,<sp/>map,<sp/>i,<sp/>n,<sp/>f-&gt;floor_buffers[i],<sp/>finalY,<sp/>step2_flag);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defer<sp/>final<sp/>floor<sp/>computation<sp/>until<sp/>_after_<sp/>residue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;values;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!step2_flag[j])</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalY[j]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error:</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_channel[i]<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>just<sp/>defer<sp/>everything<sp/>else<sp/>to<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point<sp/>we&apos;ve<sp/>decoded<sp/>the<sp/>floor<sp/>into<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/>stb_prof(0);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point<sp/>we&apos;ve<sp/>decoded<sp/>all<sp/>floors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;alloc.alloc_buffer_length_in_bytes<sp/>==<sp/>f-&gt;temp_offset);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-enable<sp/>coupled<sp/>channels<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/>memcpy(really_zero_channel,<sp/>zero_channel,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(really_zero_channel[0])<sp/>*<sp/>f-&gt;channels);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>map-&gt;coupling_steps;<sp/>++i)</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zero_channel[map-&gt;chan[i].magnitude]<sp/>||<sp/>!zero_channel[map-&gt;chan[i].angle])<sp/>{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_channel[map-&gt;chan[i].magnitude]<sp/>=<sp/>zero_channel[map-&gt;chan[i].angle]<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RESIDUE<sp/>DECODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>map-&gt;submaps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*residue_buffers[STB_VORBIS_MAX_CHANNELS];</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,t;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>do_not_decode[256];</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>f-&gt;channels;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map-&gt;chan[j].mux<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero_channel[j])<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_not_decode[ch]<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residue_buffers[ch]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_not_decode[ch]<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residue_buffers[ch]<sp/>=<sp/>f-&gt;channel_buffers[j];</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ch;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>map-&gt;submap_residue[i];</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>f-&gt;residue_types[r];</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decode_residue(f,<sp/>residue_buffers,<sp/>ch,<sp/>n2,<sp/>r,<sp/>do_not_decode);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;alloc.alloc_buffer_length_in_bytes<sp/>==<sp/>f-&gt;temp_offset);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INVERSE<sp/>COUPLING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/>stb_prof(14);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>map-&gt;coupling_steps-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*m<sp/>=<sp/>f-&gt;channel_buffers[map-&gt;chan[i].magnitude];</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>f-&gt;channel_buffers[map-&gt;chan[i].angle<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n2;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a2,m2;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m[j]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[j]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m[j],<sp/>a2<sp/>=<sp/>m[j]<sp/>-<sp/>a[j];</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>m[j],<sp/>m2<sp/>=<sp/>m[j]<sp/>+<sp/>a[j];</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[j]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m[j],<sp/>a2<sp/>=<sp/>m[j]<sp/>+<sp/>a[j];</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>m[j],<sp/>m2<sp/>=<sp/>m[j]<sp/>-<sp/>a[j];</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[j]<sp/>=<sp/>m2;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[j]<sp/>=<sp/>a2;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>decoding<sp/>the<sp/>floors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/>stb_prof(15);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(really_zero_channel[i])<sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(f-&gt;channel_buffers[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;channel_buffers[i])<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_floor(f,<sp/>map,<sp/>i,<sp/>n,<sp/>f-&gt;channel_buffers[i],<sp/>f-&gt;finalY[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(really_zero_channel[i])<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(f-&gt;channel_buffers[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;channel_buffers[i])<sp/>*<sp/>n2);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n2;<sp/>++j)</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffers[i][j]<sp/>*=<sp/>f-&gt;floor_buffers[i][j];</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INVERSE<sp/>MDCT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/>stb_prof(16);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inverse_mdct(f-&gt;channel_buffers[i],<sp/>n,<sp/>f,<sp/>m-&gt;blockflag);</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/>stb_prof(0);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shouldn&apos;t<sp/>be<sp/>necessary,<sp/>unless<sp/>we<sp/>exited<sp/>on<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>want<sp/>to<sp/>flush<sp/>to<sp/>get<sp/>to<sp/>the<sp/>next<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/>flush_packet(f);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;first_decode)<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>we<sp/>start<sp/>so<sp/>first<sp/>non-discarded<sp/>sample<sp/>is<sp/>sample<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>isn&apos;t<sp/>to<sp/>spec,<sp/>but<sp/>spec<sp/>would<sp/>require<sp/>us<sp/>to<sp/>read<sp/>ahead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>decode<sp/>the<sp/>size<sp/>of<sp/>all<sp/>current<sp/>frames--could<sp/>be<sp/>done,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>presumably<sp/>it&apos;s<sp/>not<sp/>a<sp/>commonly<sp/>used<sp/>feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc<sp/>=<sp/>-n2;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>first<sp/>frame<sp/>is<sp/>positioned<sp/>for<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>might<sp/>have<sp/>to<sp/>discard<sp/>samples<sp/>&quot;from&quot;<sp/>the<sp/>next<sp/>frame<sp/>too,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>lapping<sp/>a<sp/>large<sp/>block<sp/>then<sp/>a<sp/>small<sp/>at<sp/>the<sp/>start?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;discard_samples_deferred<sp/>=<sp/>n<sp/>-<sp/>right_end;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc_valid<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;first_decode<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;discard_samples_deferred)<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left_start<sp/>+=<sp/>f-&gt;discard_samples_deferred;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p_left<sp/>=<sp/>left_start;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;discard_samples_deferred<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;previous_length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>f-&gt;current_loc_valid)<sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>recovering<sp/>from<sp/>a<sp/>seek...<sp/>that<sp/>means<sp/>we&apos;re<sp/>going<sp/>to<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>samples<sp/>from<sp/>this<sp/>packet<sp/>even<sp/>though<sp/>we<sp/>know<sp/>our<sp/>position<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>page<sp/>header,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>update<sp/>the<sp/>position<sp/>based<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>discarded<sp/>samples<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>wait,<sp/>the<sp/>code<sp/>below<sp/>is<sp/>going<sp/>to<sp/>add<sp/>this<sp/>in<sp/>itself<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>discard,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>it<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>have<sp/>ogg<sp/>information<sp/>about<sp/>the<sp/>sample<sp/>#<sp/>for<sp/>this<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;last_seg_which<sp/>==<sp/>f-&gt;end_seg_with_known_loc)<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>current<sp/>loc,<sp/>and<sp/>this<sp/>is<sp/>final:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;current_loc_valid<sp/>&amp;&amp;<sp/>(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_last_page))<sp/>{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>current_end<sp/>=<sp/>f-&gt;known_loc_for_packet<sp/>-<sp/>(n-right_end);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>let&apos;s<sp/>infer<sp/>the<sp/>size<sp/>of<sp/>the<sp/>(probably)<sp/>short<sp/>final<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_end<sp/>&lt;<sp/>f-&gt;current_loc<sp/>+<sp/>right_end)<sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_end<sp/>&lt;<sp/>f-&gt;current_loc)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>negative<sp/>truncation,<sp/>that&apos;s<sp/>impossible!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>current_end<sp/>-<sp/>f-&gt;current_loc;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>+=<sp/>left_start;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc<sp/>+=<sp/>*len;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>just<sp/>set<sp/>our<sp/>sample<sp/>loc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>guess<sp/>that<sp/>the<sp/>ogg<sp/>granule<sp/>pos<sp/>refers<sp/>to<sp/>the<sp/>_middle_<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>frame?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>f-&gt;current_loc<sp/>to<sp/>the<sp/>position<sp/>of<sp/>left_start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc<sp/>=<sp/>f-&gt;known_loc_for_packet<sp/>-<sp/>(n2-left_start);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc_valid<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;current_loc_valid)</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc<sp/>+=<sp/>(right_start<sp/>-<sp/>left_start);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;alloc.alloc_buffer_length_in_bytes<sp/>==<sp/>f-&gt;temp_offset);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/>*len<sp/>=<sp/>right_end;<sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>samples<sp/>after<sp/>the<sp/>window<sp/>goes<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_decode_packet(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p_right)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/>left_end,<sp/>right_end;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_decode_initial(f,<sp/>p_left,<sp/>&amp;left_end,<sp/>p_right,<sp/>&amp;right_end,<sp/>&amp;mode))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vorbis_decode_packet_rest(f,<sp/>len,<sp/>f-&gt;mode_config<sp/>+<sp/>mode,<sp/>*p_left,<sp/>left_end,<sp/>*p_right,<sp/>right_end,<sp/>p_left);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_finish_frame(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev,i,j;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>right&amp;left<sp/>(the<sp/>start<sp/>of<sp/>the<sp/>right-<sp/>and<sp/>left-window<sp/>sin()-regions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>determine<sp/>how<sp/>much<sp/>to<sp/>return,<sp/>rather<sp/>than<sp/>inferring<sp/>from<sp/>the<sp/>rules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(same<sp/>result,<sp/>clearer<sp/>code);<sp/>&apos;left&apos;<sp/>indicates<sp/>where<sp/>our<sp/>sin()<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starts,<sp/>therefore<sp/>where<sp/>the<sp/>previous<sp/>window&apos;s<sp/>right<sp/>edge<sp/>starts,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>therefore<sp/>where<sp/>to<sp/>start<sp/>mixing<sp/>from<sp/>the<sp/>previous<sp/>buffer.<sp/>&apos;right&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>where<sp/>our<sp/>sin()<sp/>ending-window<sp/>starts,<sp/>therefore<sp/>that&apos;s<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>start<sp/>saving,<sp/>and<sp/>where<sp/>our<sp/>returned-data<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mixin<sp/>from<sp/>previous<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;previous_length)<sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,<sp/>n<sp/>=<sp/>f-&gt;previous_length;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*w<sp/>=<sp/>get_window(f,<sp/>n);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffers[i][left+j]<sp/>=</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffers[i][left+j]*w[<sp/><sp/><sp/><sp/>j]<sp/>+</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_window[i][<sp/><sp/><sp/><sp/><sp/>j]*w[n-1-j];</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/>prev<sp/>=<sp/>f-&gt;previous_length;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>half<sp/>of<sp/>this<sp/>data<sp/>becomes<sp/>previous<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>len<sp/>-<sp/>right;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>could<sp/>avoid<sp/>this<sp/>copy<sp/>by<sp/>double-buffering<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>(flipping<sp/>previous_window<sp/>with<sp/>channel_buffers),<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>previous_window<sp/>would<sp/>have<sp/>to<sp/>be<sp/>2x<sp/>as<sp/>large,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>channel_buffers<sp/>couldn&apos;t<sp/>be<sp/>temp<sp/>mem<sp/>(although<sp/>they&apos;re<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>temp<sp/>mem,<sp/>they<sp/>could<sp/>be<sp/>(unless<sp/>we<sp/>want<sp/>to<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>performance<sp/>by<sp/>spreading<sp/>out<sp/>the<sp/>computation))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>right+j<sp/>&lt;<sp/>len;<sp/>++j)</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_window[i][j]<sp/>=<sp/>f-&gt;channel_buffers[i][right+j];</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(!prev)</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>was<sp/>no<sp/>previous<sp/>packet,<sp/>so<sp/>this<sp/>data<sp/>isn&apos;t<sp/>valid...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>isn&apos;t<sp/>entirely<sp/>true,<sp/>only<sp/>the<sp/>would-have-overlapped<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>valid,<sp/>but<sp/>this<sp/>seems<sp/>to<sp/>be<sp/>what<sp/>the<sp/>spec<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>truncate<sp/>a<sp/>short<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>right)<sp/>right<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/>f-&gt;samples_output<sp/>+=<sp/>right-left;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right<sp/>-<sp/>left;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vorbis_pump_first_frame(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>right,<sp/>left;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vorbis_decode_packet(f,<sp/>&amp;len,<sp/>&amp;left,<sp/>&amp;right))</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_finish_frame(f,<sp/>len,<sp/>left,<sp/>right);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_whole_packet_present(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_page)</highlight></codeline>
<codeline lineno="3187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>that<sp/>we<sp/>have<sp/>the<sp/>packet<sp/>available<sp/>before<sp/>continuing...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>requires<sp/>a<sp/>full<sp/>ogg<sp/>parse,<sp/>but<sp/>we<sp/>know<sp/>we<sp/>can<sp/>fetch<sp/>from<sp/>f-&gt;stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>coding<sp/>this<sp/>out<sp/>explicitly,<sp/>we<sp/>could<sp/>save<sp/>the<sp/>current<sp/>read<sp/>state,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>next<sp/>packet<sp/>with<sp/>get8()<sp/>until<sp/>end-of-packet,<sp/>check<sp/>f-&gt;eof,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>state?<sp/>but<sp/>that<sp/>would<sp/>be<sp/>slower,<sp/>esp.<sp/>since<sp/>we&apos;d<sp/>have<sp/>over<sp/>256<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>state<sp/>to<sp/>restore<sp/>(primarily<sp/>the<sp/>page<sp/>segment<sp/>table)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>f-&gt;next_seg,<sp/>first<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*p<sp/>=<sp/>f-&gt;stream;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>-1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>not<sp/>starting<sp/>the<sp/>packet<sp/>with<sp/>a<sp/>&apos;continue<sp/>on<sp/>next<sp/>page&apos;<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>&lt;<sp/>f-&gt;segment_count;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>f-&gt;segments[s];</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;segments[s]<sp/>&lt;<sp/>255)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>at<sp/>first<sp/>short<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>this<sp/>continues,<sp/>or<sp/>it<sp/>ends<sp/>it...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_page)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>f-&gt;segment_count-1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>f-&gt;segment_count)</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>&apos;crosses<sp/>page&apos;<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>f-&gt;stream_end)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_need_more_data);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>==<sp/>-1;)<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>*q;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>we<sp/>have<sp/>the<sp/>page<sp/>header<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>+<sp/>26<sp/>&gt;=<sp/>f-&gt;stream_end)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_need_more_data);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>the<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(p,<sp/>ogg_page_header,<sp/>4))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[4]<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>segment<sp/>must<sp/>NOT<sp/>have<sp/>&apos;continued_packet&apos;,<sp/>later<sp/>ones<sp/>MUST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;previous_length)</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p[5]<sp/>&amp;<sp/>PAGEFLAG_continued_packet))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>previous<sp/>length,<sp/>we&apos;re<sp/>resynching,<sp/>so<sp/>we<sp/>can<sp/>come<sp/>in<sp/>on<sp/>a<sp/>continued-packet,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we&apos;ll<sp/>just<sp/>drop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p[5]<sp/>&amp;<sp/>PAGEFLAG_continued_packet))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>p[26];<sp/></highlight><highlight class="comment">//<sp/>segment<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p+27;<sp/><sp/></highlight><highlight class="comment">//<sp/>q<sp/>points<sp/>to<sp/>segment<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>q<sp/>+<sp/>n;<sp/></highlight><highlight class="comment">//<sp/>advance<sp/>past<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we&apos;ve<sp/>read<sp/>the<sp/>segment<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>f-&gt;stream_end)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_need_more_data);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=0;<sp/>s<sp/>&lt;<sp/>n;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>q[s];</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q[s]<sp/>&lt;<sp/>255)</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_page)</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>n-1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_stream);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>f-&gt;segment_count)</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>&apos;crosses<sp/>page&apos;<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>f-&gt;stream_end)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_need_more_data);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_decoder(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>header[6],<sp/>x,y;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,i,j,k,<sp/>max_submaps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>longest_floorlist=0;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>page,<sp/>first<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_page(f))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>page<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_first_page))<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_last_page)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_flag<sp/>&amp;<sp/>PAGEFLAG_continued_packet)<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>expected<sp/>packet<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;segment_count<sp/>!=<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;segments[0]<sp/>!=<sp/>30)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>packet<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(f)<sp/>!=<sp/>VORBIS_packet_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getn(f,<sp/>header,<sp/>6))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_unexpected_eof);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_validate(header))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vorbis_version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get32(f)<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channels<sp/>=<sp/>get8(f);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;channels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;channels<sp/>&gt;<sp/>STB_VORBIS_MAX_CHANNELS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_too_many_channels);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/>f-&gt;sample_rate<sp/>=<sp/>get32(f);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;sample_rate)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/>get32(f);<sp/></highlight><highlight class="comment">//<sp/>bitrate_maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/>get32(f);<sp/></highlight><highlight class="comment">//<sp/>bitrate_nominal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/>get32(f);<sp/></highlight><highlight class="comment">//<sp/>bitrate_minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log0,log1;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/>log0<sp/>=<sp/>x<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/>log1<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/>f-&gt;blocksize_0<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>log0;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/>f-&gt;blocksize_1<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>log1;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log0<sp/>&lt;<sp/>6<sp/>||<sp/>log0<sp/>&gt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log1<sp/>&lt;<sp/>6<sp/>||<sp/>log1<sp/>&gt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log0<sp/>&gt;<sp/>log1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>framing_flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(x<sp/>&amp;<sp/>1))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_first_page);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>packet!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_page(f))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_packet(f))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>next_segment(f);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip(f,<sp/>len);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;bytes_in_seg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>packet!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_packet(f))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))<sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_whole_packet_present(f,<sp/>TRUE))<sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>error<sp/>in<sp/>ogg<sp/>header<sp/>to<sp/>write<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;error<sp/>==<sp/>VORBIS_invalid_stream)</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS_invalid_setup;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/>crc32_init();<sp/></highlight><highlight class="comment">//<sp/>always<sp/>init<sp/>it,<sp/>to<sp/>avoid<sp/>multithread<sp/>race<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8_packet(f)<sp/>!=<sp/>VORBIS_packet_setup)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>header[i]<sp/>=<sp/>get8_packet(f);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_validate(header))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>codebooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/>f-&gt;codebook_count<sp/>=<sp/>get_bits(f,8)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/>f-&gt;codebooks<sp/>=<sp/>(<ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;codebooks)<sp/>*<sp/>f-&gt;codebook_count);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;codebooks<sp/>==<sp/>NULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/>memset(f-&gt;codebooks,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;codebooks)<sp/>*<sp/>f-&gt;codebook_count);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;codebook_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>*values;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordered,<sp/>sorted_count;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total=0;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>*lengths;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>f-&gt;codebooks+i;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>8);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0x42)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>8);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0x43)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>8);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0x56)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>8);</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;dimensions<sp/>=<sp/>(get_bits(f,<sp/>8)&lt;&lt;8)<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>8);</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>get_bits(f,<sp/>8);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;entries<sp/>=<sp/>(get_bits(f,<sp/>8)&lt;&lt;16)<sp/>+<sp/>(y&lt;&lt;8)<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ordered<sp/>=<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sparse<sp/>=<sp/>ordered<sp/>?<sp/>0<sp/>:<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths<sp/>=<sp/>(uint8<sp/>*)<sp/>setup_temp_malloc(f,<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths<sp/>=<sp/>c-&gt;codeword_lengths<sp/>=<sp/>(uint8<sp/>*)<sp/>setup_malloc(f,<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lengths)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ordered)<sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_entry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_length<sp/>=<sp/>get_bits(f,5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_entry<sp/>&lt;<sp/>c-&gt;entries)<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>c-&gt;entries<sp/>-<sp/>current_entry;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>get_bits(f,<sp/>ilog(limit));</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_entry<sp/>+<sp/>n<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>c-&gt;entries)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);<sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(lengths<sp/>+<sp/>current_entry,<sp/>current_length,<sp/>n);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_entry<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current_length;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>c-&gt;entries;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>present<sp/>=<sp/>c-&gt;sparse<sp/>?<sp/>get_bits(f,1)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(present)<sp/>{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths[j]<sp/>=<sp/>get_bits(f,<sp/>5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++total;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths[j]<sp/>=<sp/>NO_CODE;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse<sp/>&amp;&amp;<sp/>total<sp/>&gt;=<sp/>c-&gt;entries<sp/>&gt;&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>sparse<sp/>items<sp/>to<sp/>non-sparse!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;entries<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>f-&gt;setup_temp_memory_required)</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;setup_temp_memory_required<sp/>=<sp/>c-&gt;entries;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codeword_lengths<sp/>=<sp/>(uint8<sp/>*)<sp/>setup_malloc(f,<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(c-&gt;codeword_lengths,<sp/>lengths,<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>lengths,<sp/>c-&gt;entries);<sp/></highlight><highlight class="comment">//<sp/>note<sp/>this<sp/>is<sp/>only<sp/>safe<sp/>if<sp/>there<sp/>have<sp/>been<sp/>no<sp/>intervening<sp/>temp<sp/>mallocs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths<sp/>=<sp/>c-&gt;codeword_lengths;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sparse<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>size<sp/>of<sp/>the<sp/>sorted<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_count<sp/>=<sp/>total;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert(total<sp/>!=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_HUFFMAN_BINARY_SEARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>c-&gt;entries;<sp/>++j)</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lengths[j]<sp/>&gt;<sp/>STB_VORBIS_FAST_HUFFMAN_LENGTH<sp/>&amp;&amp;<sp/>lengths[j]<sp/>!=<sp/>NO_CODE)</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sorted_count;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_entries<sp/>=<sp/>sorted_count;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codewords<sp/>=<sp/>(uint32<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;codewords[0])<sp/>*<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;codewords)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_entries)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codeword_lengths<sp/>=<sp/>(uint8<sp/>*)<sp/>setup_malloc(f,<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;codeword_lengths)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codewords<sp/>=<sp/>(uint32<sp/>*)<sp/>setup_temp_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c-&gt;codewords)<sp/>*<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;codewords)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>(uint32<sp/>*)<sp/>setup_temp_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*values)<sp/>*<sp/>c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!values)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>c-&gt;entries<sp/>+<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c-&gt;codewords)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*values))<sp/>*<sp/>c-&gt;sorted_entries;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&gt;<sp/>f-&gt;setup_temp_memory_required)</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;setup_temp_memory_required<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compute_codewords(c,<sp/>lengths,<sp/>c-&gt;entries,<sp/>values))<sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>setup_temp_free(f,<sp/>values,<sp/>0);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_entries)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>an<sp/>extra<sp/>slot<sp/>for<sp/>sentinels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_codewords<sp/>=<sp/>(uint32<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c-&gt;sorted_codewords)<sp/>*<sp/>(c-&gt;sorted_entries+1));</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>an<sp/>extra<sp/>slot<sp/>at<sp/>the<sp/>front<sp/>so<sp/>that<sp/>c-&gt;sorted_values[-1]<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>we<sp/>can<sp/>catch<sp/>that<sp/>case<sp/>without<sp/>an<sp/>extra<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sorted_values<sp/><sp/><sp/><sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c-&gt;sorted_values<sp/><sp/><sp/>)<sp/>*<sp/>(c-&gt;sorted_entries+1));</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_values)<sp/>{<sp/>++c-&gt;sorted_values;<sp/>c-&gt;sorted_values[-1]<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_sorted_huffman(c,<sp/>lengths,<sp/>values);</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sparse)<sp/>{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*values)*c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>c-&gt;codewords,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c-&gt;codewords)*c-&gt;sorted_entries);</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>lengths,<sp/>c-&gt;entries);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;codewords<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compute_accelerated_huffman(c);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lookup_type<sp/>=<sp/>get_bits(f,<sp/>4);</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>&gt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16<sp/>*mults;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;minimum_value<sp/>=<sp/>float32_unpack(get_bits(f,<sp/>32));</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;delta_value<sp/>=<sp/>float32_unpack(get_bits(f,<sp/>32));</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;value_bits<sp/>=<sp/>get_bits(f,<sp/>4)+1;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sequence_p<sp/>=<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lookup_values<sp/>=<sp/>lookup1_values(c-&gt;entries,<sp/>c-&gt;dimensions);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lookup_values<sp/>=<sp/>c-&gt;entries<sp/>*<sp/>c-&gt;dimensions;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mults<sp/>=<sp/>(uint16<sp/>*)<sp/>setup_temp_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mults[0])<sp/>*<sp/>c-&gt;lookup_values);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mults<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>c-&gt;lookup_values;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>get_bits(f,<sp/>c-&gt;value_bits);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>EOP)<sp/>{<sp/>setup_temp_free(f,mults,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mults[0])*c-&gt;lookup_values);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);<sp/>}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mults[j]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>sparse<sp/>=<sp/>c-&gt;sparse;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pre-expand<sp/>the<sp/>lookup1-style<sp/>multiplicands,<sp/>to<sp/>avoid<sp/>a<sp/>divide<sp/>in<sp/>the<sp/>inner<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sparse)<sp/>{</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;sorted_entries<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>skip;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands<sp/>=<sp/>(codetype<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;multiplicands[0])<sp/>*<sp/>c-&gt;sorted_entries<sp/>*<sp/>c-&gt;dimensions);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands<sp/>=<sp/>(codetype<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;multiplicands[0])<sp/>*<sp/>c-&gt;entries<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>c-&gt;dimensions);</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;multiplicands<sp/>==<sp/>NULL)<sp/>{<sp/>setup_temp_free(f,mults,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mults[0])*c-&gt;lookup_values);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);<sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>sparse<sp/>?<sp/>c-&gt;sorted_entries<sp/>:<sp/>c-&gt;entries;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>sparse<sp/>?<sp/>c-&gt;sorted_values[j]<sp/>:<sp/>j,<sp/>div=1;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>c-&gt;dimensions;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>(z<sp/>/<sp/>div)<sp/>%<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands[j*c-&gt;dimensions<sp/>+<sp/>k]<sp/>=</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mults[off];</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mults[off]*c-&gt;delta_value<sp/>+<sp/>c-&gt;minimum_value;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case<sp/>(and<sp/>this<sp/>case<sp/>only)<sp/>we<sp/>could<sp/>pre-expand<sp/>c-&gt;sequence_p,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>throw<sp/>away<sp/>the<sp/>decode<sp/>logic<sp/>for<sp/>it;<sp/>have<sp/>to<sp/>ALSO<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>in<sp/>the<sp/>case<sp/>below,<sp/>but<sp/>it<sp/>can<sp/>only<sp/>be<sp/>done<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>!STB_VORBIS_DIVIDES_IN_CODEBOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>*=<sp/>c-&gt;lookup_values;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>mults,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mults[0])*c-&gt;lookup_values);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lookup_type<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands<sp/>=<sp/>(codetype<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;multiplicands[0])<sp/>*<sp/>c-&gt;lookup_values);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(c-&gt;multiplicands,<sp/>mults,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c-&gt;multiplicands[0])<sp/>*<sp/>c-&gt;lookup_values);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>c-&gt;lookup_values;<sp/>++j)</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands[j]<sp/>=<sp/>mults[j]<sp/>*<sp/>c-&gt;delta_value<sp/>+<sp/>c-&gt;minimum_value;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_temp_free(f,<sp/>mults,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mults[0])*c-&gt;lookup_values);</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip:;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_CODEBOOK_FLOATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;lookup_type<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>c-&gt;sequence_p)<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j<sp/>&lt;<sp/>(int)<sp/>c-&gt;lookup_values;<sp/>++j)</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;multiplicands[j]<sp/>=<sp/>c-&gt;multiplicands[j-1];</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sequence_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>domain<sp/>transfers<sp/>(notused)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get_bits(f,<sp/>6)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>z<sp/>=<sp/>get_bits(f,<sp/>16);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Floors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/>f-&gt;floor_count<sp/>=<sp/>get_bits(f,<sp/>6)+1;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/>f-&gt;floor_config<sp/>=<sp/>(<ref refid="unionFloor" kindref="compound">Floor</ref><sp/>*)<sp/><sp/>setup_malloc(f,<sp/>f-&gt;floor_count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;floor_config));</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;floor_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;floor_types[i]<sp/>=<sp/>get_bits(f,<sp/>16);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;floor_types[i]<sp/>&gt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;floor_types[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFloor0" kindref="compound">Floor0</ref><sp/>*g<sp/>=<sp/>&amp;f-&gt;floor_config[i].floor0;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;order<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;rate<sp/>=<sp/>get_bits(f,16);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;bark_map_size<sp/>=<sp/>get_bits(f,16);</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;amplitude_bits<sp/>=<sp/>get_bits(f,6);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;amplitude_offset<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;number_of_books<sp/>=<sp/>get_bits(f,4)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;number_of_books;<sp/>++j)</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;book_list[j]<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_feature_not_supported);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structVorbisPoint" kindref="compound">VorbisPoint</ref><sp/>p[31*8+2];</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFloor1" kindref="compound">Floor1</ref><sp/>*g<sp/>=<sp/>&amp;f-&gt;floor_config[i].floor1;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_class<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;partitions<sp/>=<sp/>get_bits(f,<sp/>5);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;partitions;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;partition_class_list[j]<sp/>=<sp/>get_bits(f,<sp/>4);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;partition_class_list[j]<sp/>&gt;<sp/>max_class)</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_class<sp/>=<sp/>g-&gt;partition_class_list[j];</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;=<sp/>max_class;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;class_dimensions[j]<sp/>=<sp/>get_bits(f,<sp/>3)+1;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;class_subclasses[j]<sp/>=<sp/>get_bits(f,<sp/>2);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;class_subclasses[j])<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;class_masterbooks[j]<sp/>=<sp/>get_bits(f,<sp/>8);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;class_masterbooks[j]<sp/>&gt;=<sp/>f-&gt;codebook_count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>1<sp/>&lt;&lt;<sp/>g-&gt;class_subclasses[j];<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;subclass_books[j][k]<sp/>=<sp/>get_bits(f,8)-1;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;subclass_books[j][k]<sp/>&gt;=<sp/>f-&gt;codebook_count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;floor1_multiplier<sp/>=<sp/>get_bits(f,2)+1;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;rangebits<sp/>=<sp/>get_bits(f,4);</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;Xlist[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;Xlist[1]<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>g-&gt;rangebits;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;values<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;partitions;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>g-&gt;partition_class_list[j];</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>g-&gt;class_dimensions[c];<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;Xlist[g-&gt;values]<sp/>=<sp/>get_bits(f,<sp/>g-&gt;rangebits);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++g-&gt;values;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precompute<sp/>the<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;values;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j].x<sp/>=<sp/>g-&gt;Xlist[j];</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j].y<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(p,<sp/>g-&gt;values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p[0]),<sp/>point_compare);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>g-&gt;values;<sp/>++j)</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;sorted_order[j]<sp/>=<sp/>(uint8)<sp/>p[j].y;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precompute<sp/>the<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=2;<sp/>j<sp/>&lt;<sp/>g-&gt;values;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,hi;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors(g-&gt;Xlist,<sp/>j,<sp/>&amp;low,&amp;hi);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;neighbors[j][0]<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;neighbors[j][1]<sp/>=<sp/>hi;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;values<sp/>&gt;<sp/>longest_floorlist)</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longest_floorlist<sp/>=<sp/>g-&gt;values;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Residue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/>f-&gt;residue_count<sp/>=<sp/>get_bits(f,<sp/>6)+1;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/>f-&gt;residue_config<sp/>=<sp/>(<ref refid="structResidue" kindref="compound">Residue</ref><sp/>*)<sp/>setup_malloc(f,<sp/>f-&gt;residue_count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;residue_config));</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;residue_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>residue_cascade[64];</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structResidue" kindref="compound">Residue</ref><sp/>*r<sp/>=<sp/>f-&gt;residue_config+i;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;residue_types[i]<sp/>=<sp/>get_bits(f,<sp/>16);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;residue_types[i]<sp/>&gt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;begin<sp/>=<sp/>get_bits(f,<sp/>24);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;end<sp/>=<sp/>get_bits(f,<sp/>24);</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;part_size<sp/>=<sp/>get_bits(f,24)+1;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;classifications<sp/>=<sp/>get_bits(f,6)+1;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;classbook<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>r-&gt;classifications;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>high_bits=0;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>low_bits=get_bits(f,3);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,1))</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high_bits<sp/>=<sp/>get_bits(f,5);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residue_cascade[j]<sp/>=<sp/>high_bits*8<sp/>+<sp/>low_bits;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;residue_books<sp/>=<sp/>(short<sp/>(*)[8])<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(r-&gt;residue_books[0])<sp/>*<sp/>r-&gt;classifications);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>r-&gt;classifications;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>8;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(residue_cascade[j]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>k))<sp/>{</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;residue_books[j][k]<sp/>=<sp/>get_bits(f,<sp/>8);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;residue_books[j][k]<sp/>&gt;=<sp/>f-&gt;codebook_count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;residue_books[j][k]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precompute<sp/>the<sp/>classifications[]<sp/>array<sp/>to<sp/>avoid<sp/>inner-loop<sp/>mod/divide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>it<sp/>&apos;classdata&apos;<sp/>since<sp/>we<sp/>already<sp/>have<sp/>r-&gt;classifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;classdata<sp/>=<sp/>(uint8<sp/>**)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*r-&gt;classdata)<sp/>*<sp/>f-&gt;codebooks[r-&gt;classbook].entries);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r-&gt;classdata)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(r-&gt;classdata,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*r-&gt;classdata)<sp/>*<sp/>f-&gt;codebooks[r-&gt;classbook].entries);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>f-&gt;codebooks[r-&gt;classbook].entries;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>classwords<sp/>=<sp/>f-&gt;codebooks[r-&gt;classbook].dimensions;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;classdata[j]<sp/>=<sp/>(uint8<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(r-&gt;classdata[j][0])<sp/>*<sp/>classwords);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=classwords-1;<sp/>k<sp/>&gt;=<sp/>0;<sp/>--k)<sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;classdata[j][k]<sp/>=<sp/>temp<sp/>%<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>/=<sp/>r-&gt;classifications;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/>f-&gt;mapping_count<sp/>=<sp/>get_bits(f,6)+1;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/>f-&gt;mapping<sp/>=<sp/>(<ref refid="structMapping" kindref="compound">Mapping</ref><sp/>*)<sp/>setup_malloc(f,<sp/>f-&gt;mapping_count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f-&gt;mapping));</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;mapping_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMapping" kindref="compound">Mapping</ref><sp/>*m<sp/>=<sp/>f-&gt;mapping<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapping_type<sp/>=<sp/>get_bits(f,16);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping_type<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;chan<sp/>=<sp/>(<ref refid="structMappingChannel" kindref="compound">MappingChannel</ref><sp/>*)<sp/>setup_malloc(f,<sp/>f-&gt;channels<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*m-&gt;chan));</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,1))</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;submaps<sp/>=<sp/>get_bits(f,4);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;submaps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;submaps<sp/>&gt;<sp/>max_submaps)</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_submaps<sp/>=<sp/>m-&gt;submaps;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,1))<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;coupling_steps<sp/>=<sp/>get_bits(f,8)+1;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>m-&gt;coupling_steps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;chan[k].magnitude<sp/>=<sp/>get_bits(f,<sp/>ilog(f-&gt;channels)-1);</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;chan[k].angle<sp/>=<sp/>get_bits(f,<sp/>ilog(f-&gt;channels)-1);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;chan[k].magnitude<sp/>&gt;=<sp/>f-&gt;channels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;chan[k].angle<sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>f-&gt;channels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;chan[k].magnitude<sp/>==<sp/>m-&gt;chan[k].angle)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;coupling_steps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reserved<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_bits(f,2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;submaps<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>f-&gt;channels;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;chan[j].mux<sp/>=<sp/>get_bits(f,<sp/>4);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;chan[j].mux<sp/>&gt;=<sp/>m-&gt;submaps)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@SPECIFICATION:<sp/>this<sp/>case<sp/>is<sp/>missing<sp/>from<sp/>the<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>f-&gt;channels;<sp/>++j)</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;chan[j].mux<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j=0;<sp/>j<sp/>&lt;<sp/>m-&gt;submaps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_bits(f,8);<sp/></highlight><highlight class="comment">//<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;submap_floor[j]<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;submap_residue[j]<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;submap_floor[j]<sp/>&gt;=<sp/>f-&gt;floor_count)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;submap_residue[j]<sp/>&gt;=<sp/>f-&gt;residue_count)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/>f-&gt;mode_count<sp/>=<sp/>get_bits(f,<sp/>6)+1;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;mode_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMode" kindref="compound">Mode</ref><sp/>*m<sp/>=<sp/>f-&gt;mode_config+i;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;blockflag<sp/>=<sp/>get_bits(f,1);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;windowtype<sp/>=<sp/>get_bits(f,16);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;transformtype<sp/>=<sp/>get_bits(f,16);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;mapping<sp/>=<sp/>get_bits(f,8);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;windowtype<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;transformtype<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;mapping<sp/>&gt;=<sp/>f-&gt;mapping_count)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_setup);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/>flush_packet(f);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffers[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>f-&gt;blocksize_1);</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_window[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>f-&gt;blocksize_1/2);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;finalY[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16<sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16)<sp/>*<sp/>longest_floorlist);</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;floor_buffers[i]<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>f-&gt;blocksize_1/2);</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_blocksize(f,<sp/>0,<sp/>f-&gt;blocksize_0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_blocksize(f,<sp/>1,<sp/>f-&gt;blocksize_1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/>f-&gt;blocksize[0]<sp/>=<sp/>f-&gt;blocksize_0;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/>f-&gt;blocksize[1]<sp/>=<sp/>f-&gt;blocksize_1;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_VORBIS_DIVIDE_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer_divide_table[1][1]==0)</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>DIVTAB_NUMER;<sp/>++i)</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j<sp/>&lt;<sp/>DIVTAB_DENOM;<sp/>++j)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer_divide_table[i][j]<sp/>=<sp/>i<sp/>/<sp/>j;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>how<sp/>much<sp/>temporary<sp/>memory<sp/>is<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>imdct_mem<sp/>=<sp/>(f-&gt;blocksize_1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>classify_mem;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,max_part_read=0;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;residue_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structResidue" kindref="compound">Residue</ref><sp/>*r<sp/>=<sp/>f-&gt;residue_config<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_read<sp/>=<sp/>r-&gt;end<sp/>-<sp/>r-&gt;begin;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part_read<sp/>=<sp/>n_read<sp/>/<sp/>r-&gt;part_size;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(part_read<sp/>&gt;<sp/>max_part_read)</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_part_read<sp/>=<sp/>part_read;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_DIVIDES_IN_RESIDUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classify_mem<sp/>=<sp/>f-&gt;channels<sp/>*<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>+<sp/>max_part_read<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8<sp/>*));</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classify_mem<sp/>=<sp/>f-&gt;channels<sp/>*<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>+<sp/>max_part_read<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;temp_memory_required<sp/>=<sp/>classify_mem;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imdct_mem<sp/>&gt;<sp/>f-&gt;temp_memory_required)</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;temp_memory_required<sp/>=<sp/>imdct_mem;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/>f-&gt;first_decode<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;alloc.alloc_buffer)<sp/>{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;temp_offset<sp/>==<sp/>f-&gt;alloc.alloc_buffer_length_in_bytes);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there&apos;s<sp/>enough<sp/>temp<sp/>memory<sp/>so<sp/>we<sp/>don&apos;t<sp/>error<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;setup_offset<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f)<sp/>+<sp/>f-&gt;temp_memory_required<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>f-&gt;temp_offset)</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_outofmem);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/>f-&gt;first_audio_page_offset<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vorbis_deinit(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*p)</highlight></codeline>
<codeline lineno="3776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>p-&gt;residue_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structResidue" kindref="compound">Residue</ref><sp/>*r<sp/>=<sp/>p-&gt;residue_config+i;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;classdata)<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>p-&gt;codebooks[r-&gt;classbook].entries;<sp/>++j)</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>r-&gt;classdata[j]);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>r-&gt;classdata);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>r-&gt;residue_books);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;codebooks)<sp/>{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>p-&gt;codebook_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCodebook" kindref="compound">Codebook</ref><sp/>*c<sp/>=<sp/>p-&gt;codebooks<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>c-&gt;codeword_lengths);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>c-&gt;multiplicands);</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>c-&gt;codewords);</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>c-&gt;sorted_codewords);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c-&gt;sorted_values[-1]<sp/>is<sp/>the<sp/>first<sp/>entry<sp/>in<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>c-&gt;sorted_values<sp/>?<sp/>c-&gt;sorted_values-1<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;codebooks);</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;floor_config);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;residue_config);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>p-&gt;mapping_count;<sp/>++i)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;mapping[i].chan);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;mapping);</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>p-&gt;channels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;channel_buffers[i]);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;previous_window[i]);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_VORBIS_NO_DEFER_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;floor_buffers[i]);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;finalY[i]);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;A[i]);</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;B[i]);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;C[i]);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup_free(p,<sp/>p-&gt;window[i]);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;close_on_free)<sp/>fclose(p-&gt;f);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_vorbis_close(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*p)</highlight></codeline>
<codeline lineno="3825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/>vorbis_deinit(p);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/>setup_free(p,p);</highlight></codeline>
<codeline lineno="3829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vorbis_init(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*p,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*z)</highlight></codeline>
<codeline lineno="3832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/>memset(p,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));<sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>out<sp/>all<sp/>malloc&apos;d<sp/>pointers<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;alloc<sp/>=<sp/>*z;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;alloc.alloc_buffer_length_in_bytes<sp/>=<sp/>(p-&gt;alloc.alloc_buffer_length_in_bytes+3)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;temp_offset<sp/>=<sp/>p-&gt;alloc.alloc_buffer_length_in_bytes;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/>p-&gt;eof<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/>p-&gt;error<sp/>=<sp/>VORBIS__no_error;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/>p-&gt;stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/>p-&gt;codebooks<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/>p-&gt;page_crc_tests<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/>p-&gt;close_on_free<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/>p-&gt;f<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_sample_offset(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;current_loc_valid)</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;current_loc;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><ref refid="structstb__vorbis__info" kindref="compound">stb_vorbis_info</ref><sp/>stb_vorbis_get_info(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis__info" kindref="compound">stb_vorbis_info</ref><sp/>d;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/>d.channels<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/>d.sample_rate<sp/>=<sp/>f-&gt;sample_rate;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/>d.setup_memory_required<sp/>=<sp/>f-&gt;setup_memory_required;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/>d.setup_temp_memory_required<sp/>=<sp/>f-&gt;setup_temp_memory_required;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/>d.temp_memory_required<sp/>=<sp/>f-&gt;temp_memory_required;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/>d.max_frame_size<sp/>=<sp/>f-&gt;blocksize_1<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_error(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>f-&gt;error;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS__no_error;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*<sp/>vorbis_alloc(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*p<sp/>=<sp/>(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*)<sp/>setup_malloc(f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_vorbis_flush_pushdata(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="3886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/>f-&gt;page_crc_tests<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/>f-&gt;discard_samples_deferred<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/>f-&gt;current_loc_valid<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/>f-&gt;first_decode<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/>f-&gt;samples_output<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channel_buffer_end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_search_for_page_pushdata(<ref refid="structstb__vorbis" kindref="compound">vorb</ref><sp/>*f,<sp/>uint8<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len)</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;page_crc_tests;<sp/>++i)</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[i].bytes_done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>room<sp/>for<sp/>more<sp/>scans,<sp/>search<sp/>for<sp/>them<sp/>first,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>may<sp/>cause<sp/>us<sp/>to<sp/>stop<sp/>early<sp/>if<sp/>their<sp/>header<sp/>is<sp/>incomplete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(f-&gt;page_crc_tests<sp/>&lt;<sp/>STB_VORBIS_PUSHDATA_CRC_COUNT)<sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_len<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>-=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>look<sp/>for<sp/>4-byte<sp/>sequence,<sp/>so<sp/>don&apos;t<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>that<sp/>straddles<sp/>a<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>data_len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[i]<sp/>==<sp/>0x4f)<sp/>{</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0==memcmp(data+i,<sp/>ogg_page_header,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,len;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>crc;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>the<sp/>whole<sp/>page<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+26<sp/>&gt;=<sp/>data_len<sp/>||<sp/>i+27+data[i+26]<sp/>&gt;=<sp/>data_len)<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>read<sp/>up<sp/>to<sp/>this<sp/>page<sp/>start,<sp/>so<sp/>hopefully<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>whole<sp/>page<sp/>header<sp/>start<sp/>next<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>we<sp/>have<sp/>it<sp/>all;<sp/>compute<sp/>the<sp/>length<sp/>of<sp/>the<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>27<sp/>+<sp/>data[i+26];</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>data[i+26];<sp/>++j)</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>data[i+27+j];</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>everything<sp/>up<sp/>to<sp/>the<sp/>embedded<sp/>crc<sp/>(which<sp/>we<sp/>must<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>22;<sp/>++j)</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>data[i+j]);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>process<sp/>4<sp/>0-bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>j<sp/>&lt;<sp/>26;<sp/>++j)</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>0);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len<sp/>is<sp/>the<sp/>total<sp/>number<sp/>of<sp/>bytes<sp/>we<sp/>need<sp/>to<sp/>scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>f-&gt;page_crc_tests++;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].bytes_left<sp/>=<sp/>len-j;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].crc_so_far<sp/>=<sp/>crc;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].goal_crc<sp/>=<sp/>data[i+22]<sp/>+<sp/>(data[i+23]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(data[i+24]&lt;&lt;16)<sp/>+<sp/>(data[i+25]&lt;&lt;24);</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>last<sp/>frame<sp/>on<sp/>a<sp/>page<sp/>is<sp/>continued<sp/>to<sp/>the<sp/>next,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can&apos;t<sp/>recover<sp/>the<sp/>sample_loc<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[i+27+data[i+26]-1]<sp/>==<sp/>255)</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].sample_loc<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].sample_loc<sp/>=<sp/>data[i+6]<sp/>+<sp/>(data[i+7]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(data[i+<sp/>8]&lt;&lt;16)<sp/>+<sp/>(data[i+<sp/>9]&lt;&lt;24);</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[n].bytes_done<sp/>=<sp/>i+j;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_crc_tests<sp/>==<sp/>STB_VORBIS_PUSHDATA_CRC_COUNT)</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>going<sp/>if<sp/>we<sp/>still<sp/>have<sp/>room<sp/>for<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;page_crc_tests;)<sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>crc;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>f-&gt;scan[i].bytes_done;</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>f-&gt;scan[i].bytes_left;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>data_len<sp/>-<sp/>n)<sp/>m<sp/>=<sp/>data_len<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>is<sp/>the<sp/>bytes<sp/>to<sp/>scan<sp/>in<sp/>the<sp/>current<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>f-&gt;scan[i].crc_so_far;</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>m;<sp/>++j)</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>data[n+j]);</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[i].bytes_left<sp/>-=<sp/>m;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[i].crc_so_far<sp/>=<sp/>crc;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;scan[i].bytes_left<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>it<sp/>match?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;scan[i].crc_so_far<sp/>==<sp/>f-&gt;scan[i].goal_crc)<sp/>{</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Houston,<sp/>we<sp/>have<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>=<sp/>n+m;<sp/></highlight><highlight class="comment">//<sp/>consumption<sp/>amount<sp/>is<sp/>wherever<sp/>that<sp/>scan<sp/>ended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;page_crc_tests<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>drop<sp/>out<sp/>of<sp/>page<sp/>scan<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>decode-but-don&apos;t-output<sp/>one<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>new<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc<sp/>=<sp/>f-&gt;scan[i].sample_loc;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>current<sp/>sample<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>amount<sp/>we&apos;d<sp/>have<sp/>decoded<sp/>had<sp/>we<sp/>decoded<sp/>this<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;current_loc_valid<sp/>=<sp/>f-&gt;current_loc<sp/>!=<sp/>~0;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_len;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;scan[i]<sp/>=<sp/>f-&gt;scan[--f-&gt;page_crc_tests];</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_len;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value:<sp/>number<sp/>of<sp/>bytes<sp/>we<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_decode_frame_pushdata(</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>we&apos;re<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>memory<sp/>available<sp/>for<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*channels,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>to<sp/>write<sp/>number<sp/>of<sp/>float<sp/>*<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***output,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>to<sp/>write<sp/>float<sp/>**<sp/>array<sp/>of<sp/>float<sp/>*<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*samples<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>to<sp/>write<sp/>number<sp/>of<sp/>output<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,right,left;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IS_PUSH_MODE(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_api_mixing);</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;page_crc_tests<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vorbis_search_for_page_pushdata(f,<sp/>data,<sp/>data_len);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/>f-&gt;stream<sp/><sp/><sp/><sp/><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/>f-&gt;stream_end<sp/>=<sp/>data<sp/>+<sp/>data_len;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/>f-&gt;error<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VORBIS__no_error;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>we<sp/>have<sp/>the<sp/>entire<sp/>packet<sp/>in<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_whole_packet_present(f,<sp/>FALSE))<sp/>{</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_decode_packet(f,<sp/>&amp;len,<sp/>&amp;left,<sp/>&amp;right))<sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>actual<sp/>error<sp/>we<sp/>encountered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>STBVorbisError<sp/>error<sp/>=<sp/>f-&gt;error;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>==<sp/>VORBIS_bad_packet_type)<sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flush<sp/>and<sp/>resynch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS__no_error;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get8_packet(f)<sp/>!=<sp/>EOP)</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;stream<sp/>-<sp/>data;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>==<sp/>VORBIS_continued_packet_flag_invalid)<sp/>{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;previous_length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>may<sp/>be<sp/>resynching,<sp/>in<sp/>which<sp/>case<sp/>it&apos;s<sp/>ok<sp/>to<sp/>hit<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>these;<sp/>just<sp/>discard<sp/>the<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS__no_error;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get8_packet(f)<sp/>!=<sp/>EOP)</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;stream<sp/>-<sp/>data;</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>get<sp/>an<sp/>error<sp/>while<sp/>parsing,<sp/>what<sp/>to<sp/>do?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>well,<sp/>it<sp/>DEFINITELY<sp/>won&apos;t<sp/>work<sp/>to<sp/>continue<sp/>from<sp/>where<sp/>we<sp/>are!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_flush_pushdata(f);</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>the<sp/>error<sp/>that<sp/>actually<sp/>made<sp/>us<sp/>bail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>success!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>vorbis_finish_frame(f,<sp/>len,<sp/>left,<sp/>right);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;outputs[i]<sp/>=<sp/>f-&gt;channel_buffers[i]<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(channels)<sp/>*channels<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/>*samples<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/>*output<sp/>=<sp/>f-&gt;outputs;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;stream<sp/>-<sp/>data;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*stb_vorbis_open_pushdata(</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len,<sp/></highlight><highlight class="comment">//<sp/>the<sp/>memory<sp/>available<sp/>for<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data_used,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>defined<sp/>if<sp/>result<sp/>is<sp/>not<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*alloc)</highlight></codeline>
<codeline lineno="4062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/>p;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/>vorbis_init(&amp;p,<sp/>alloc);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/>p.stream<sp/><sp/><sp/><sp/><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/>p.stream_end<sp/>=<sp/>data<sp/>+<sp/>data_len;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/>p.push_mode<sp/><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_decoder(&amp;p))<sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.eof)</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>VORBIS_need_more_data;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>p.error;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>vorbis_alloc(&amp;p);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*f<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data_used<sp/>=<sp/>f-&gt;stream<sp/>-<sp/>data;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_deinit(&amp;p);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_file_offset(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="4089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_PUSHDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;push_mode)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MEMORY(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;stream<sp/>-<sp/>f-&gt;stream_start;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ftell(f-&gt;f)<sp/>-<sp/>f-&gt;f_start;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_PULLDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA-PULLING<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>vorbis_find_page(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/>uint32<sp/>*end,<sp/>uint32<sp/>*last)</highlight></codeline>
<codeline lineno="4105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0x4f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>page<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retry_loc<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we&apos;re<sp/>off<sp/>the<sp/>end<sp/>of<sp/>a<sp/>file_section<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retry_loc<sp/>-<sp/>25<sp/>&gt;<sp/>f-&gt;stream_len)</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(f)<sp/>!=<sp/>ogg_page_header[i])</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>header[27];</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>i,<sp/>crc,<sp/>goal,<sp/>len;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header[i]<sp/>=<sp/>ogg_page_header[i];</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>27;<sp/>++i)</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header[i]<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header[4]<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>invalid;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goal<sp/>=<sp/>header[22]<sp/>+<sp/>(header[23]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(header[24]&lt;&lt;16)<sp/>+<sp/>(header[25]&lt;&lt;24);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=22;<sp/>i<sp/>&lt;<sp/>26;<sp/>++i)</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>27;<sp/>++i)</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>header[i]);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>header[26];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>s);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&amp;&amp;<sp/>f-&gt;eof)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32_update(crc,<sp/>get8(f));</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finished<sp/>parsing<sp/>probable<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crc<sp/>==<sp/>goal)<sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>could<sp/>now<sp/>check<sp/>that<sp/>it&apos;s<sp/>either<sp/>got<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>flag<sp/>set,<sp/>OR<sp/>it&apos;s<sp/>followed<sp/>by<sp/>the<sp/>capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pattern,<sp/>but<sp/>I<sp/>guess<sp/>TECHNICALLY<sp/>you<sp/>could<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>file<sp/>with<sp/>garbage<sp/>between<sp/>each<sp/>ogg<sp/>page<sp/>and<sp/>recover</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>it<sp/>automatically?<sp/>So<sp/>even<sp/>though<sp/>that<sp/>paranoia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>decrease<sp/>the<sp/>chance<sp/>of<sp/>an<sp/>invalid<sp/>decode<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>2^32,<sp/>not<sp/>worth<sp/>it<sp/>since<sp/>it<sp/>would<sp/>hose<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid-but-useful<sp/>files?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end)</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last)<sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header[5]<sp/>&amp;<sp/>0x04)<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>retry_loc-1);</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid:</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>valid<sp/>page,<sp/>so<sp/>rewind<sp/>and<sp/>look<sp/>for<sp/>next<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>retry_loc);</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seek<sp/>is<sp/>implemented<sp/>with<sp/>&apos;interpolation<sp/>search&apos;--this<sp/>is<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>binary<sp/>search,<sp/>but<sp/>we<sp/>use<sp/>the<sp/>data<sp/>values<sp/>to<sp/>estimate<sp/>the<sp/>likely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>location<sp/>of<sp/>the<sp/>data<sp/>item<sp/>(plus<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>bias<sp/>so<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>estimation<sp/>is<sp/>wrong<sp/>we<sp/>don&apos;t<sp/>waste<sp/>overly<sp/>much<sp/>time)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAMPLE_unknown<sp/><sp/>0xffffffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ogg<sp/>vorbis,<sp/>in<sp/>its<sp/>insane<sp/>infinite<sp/>wisdom,<sp/>only<sp/>provides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>information<sp/>about<sp/>the<sp/>sample<sp/>at<sp/>the<sp/>END<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>therefore<sp/>we<sp/>COULD<sp/>have<sp/>the<sp/>data<sp/>we<sp/>need<sp/>in<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>page,<sp/>and<sp/>not<sp/>know<sp/>it.<sp/>we<sp/>could<sp/>just<sp/>use<sp/>the<sp/>end<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>our<sp/>only<sp/>knowledge<sp/>for<sp/>bounds,<sp/>seek<sp/>back,<sp/>and<sp/>eventually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>binary<sp/>search<sp/>finds<sp/>it.<sp/>or<sp/>we<sp/>can<sp/>try<sp/>to<sp/>be<sp/>smart<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>waste<sp/>time<sp/>trying<sp/>to<sp/>locate<sp/>more<sp/>pages.<sp/>we<sp/>try<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>smart,<sp/>since<sp/>this<sp/>data<sp/>is<sp/>already<sp/>in<sp/>memory<sp/>anyway,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doing<sp/>needless<sp/>I/O<sp/>would<sp/>be<sp/>crazy!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_analyze_page(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/><ref refid="structProbedPage" kindref="compound">ProbedPage</ref><sp/>*z)</highlight></codeline>
<codeline lineno="4194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>header[27],<sp/>lacing[255];</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>packet_type[255];</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_packet,<sp/>packet_start,<sp/>previous<sp/>=0;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,len;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>samples;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>record<sp/>where<sp/>the<sp/>page<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/>z-&gt;page_start<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/>getn(f,<sp/>header,<sp/>27);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/>assert(header[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;O&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>header[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>header[2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>header[3]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/>getn(f,<sp/>lacing,<sp/>header[26]);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>the<sp/>length<sp/>of<sp/>the<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>header[26];<sp/>++i)</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>lacing[i];</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>implies<sp/>where<sp/>the<sp/>page<sp/>ends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/>z-&gt;page_end<sp/>=<sp/>z-&gt;page_start<sp/>+<sp/>27<sp/>+<sp/>header[26]<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>last-decoded<sp/>sample<sp/>out<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/>z-&gt;last_decoded_sample<sp/>=<sp/>header[6]<sp/>+<sp/>(header[7]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(header[8]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(header[9]<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header[5]<sp/>&amp;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>the<sp/>last<sp/>page,<sp/>it&apos;s<sp/>not<sp/>possible<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backwards<sp/>to<sp/>figure<sp/>out<sp/>the<sp/>first<sp/>sample!<sp/>whoops!<sp/>fuck.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;first_decoded_sample<sp/>=<sp/>SAMPLE_unknown;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>z-&gt;page_start);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>through<sp/>the<sp/>frames<sp/>to<sp/>determine<sp/>the<sp/>sample-count<sp/>of<sp/>each<sp/>one...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>goal<sp/>is<sp/>the<sp/>sample<sp/>#<sp/>of<sp/>the<sp/>first<sp/>fully-decoded<sp/>sample<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page,<sp/>which<sp/>is<sp/>the<sp/>first<sp/>decoded<sp/>sample<sp/>of<sp/>the<sp/>2nd<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/>num_packet=0;</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/>packet_start<sp/>=<sp/>((header[5]<sp/>&amp;<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>header[26];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet_start)<sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>n,b,m;</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lacing[i]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bail;<sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>read<sp/>from<sp/>zero-length<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>get8(f);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>bottom<sp/>bit<sp/>is<sp/>non-zero,<sp/>we&apos;ve<sp/>got<sp/>corruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;<sp/>1)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bail;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>ilog(f-&gt;mode_count-1);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>b;</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&amp;=<sp/>(1<sp/>&lt;&lt;<sp/>b)-1;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>f-&gt;mode_count)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bail;</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_packet<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>f-&gt;mode_config[n].blockflag)</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>(m<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packet_type[num_packet++]<sp/>=<sp/>f-&gt;mode_config[n].blockflag;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(f,<sp/>lacing[i]-1);</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(f,<sp/>lacing[i]);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet_start<sp/>=<sp/>(lacing[i]<sp/>&lt;<sp/>255);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>that<sp/>we<sp/>know<sp/>the<sp/>sizes<sp/>of<sp/>all<sp/>the<sp/>pages,<sp/>we<sp/>can<sp/>start<sp/>determining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>much<sp/>sample<sp/>data<sp/>there<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/>samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>last<sp/>packet,<sp/>we<sp/>step<sp/>by<sp/>its<sp/>whole<sp/>length,<sp/>because<sp/>the<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>that<sp/>we<sp/>encoded<sp/>the<sp/>end<sp/>sample<sp/>loc<sp/>of<sp/>the<sp/>&apos;last<sp/>packet<sp/>completed&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>&apos;completed&apos;<sp/>refers<sp/>to<sp/>packets<sp/>being<sp/>split,<sp/>and<sp/>we<sp/>are<sp/>left<sp/>to<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>&apos;end<sp/>sample<sp/>loc&apos;<sp/>means.<sp/>we<sp/>assume<sp/>it<sp/>means<sp/>ignoring<sp/>the<sp/>fact<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>half<sp/>of<sp/>the<sp/>data<sp/>is<sp/>useless<sp/>without<sp/>windowing<sp/>against<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet...<sp/>(so<sp/>it&apos;s<sp/>not<sp/>REALLY<sp/>complete<sp/>in<sp/>that<sp/>sense)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_packet<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>+=<sp/>f-&gt;blocksize[packet_type[num_packet-1]];</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=num_packet-2;<sp/>i<sp/>&gt;=<sp/>1;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>for<sp/>this<sp/>packet,<sp/>how<sp/>many<sp/>samples<sp/>do<sp/>we<sp/>have<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>overlap<sp/>the<sp/>following<sp/>packet?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet_type[i]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet_type[i+1]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>+=<sp/>f-&gt;blocksize_1<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>+=<sp/>((f-&gt;blocksize_1<sp/>-<sp/>f-&gt;blocksize_0)<sp/>&gt;&gt;<sp/>2)<sp/>+<sp/>(f-&gt;blocksize_0<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>+=<sp/>f-&gt;blocksize_0<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>at<sp/>this<sp/>point,<sp/>we&apos;ve<sp/>rewound<sp/>to<sp/>the<sp/>very<sp/>beginning<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_second_<sp/>packet.<sp/>if<sp/>we<sp/>entirely<sp/>discard<sp/>the<sp/>first<sp/>packet<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>seek,<sp/>this<sp/>will<sp/>be<sp/>exactly<sp/>the<sp/>right<sp/>sample<sp/>number.<sp/>HOWEVER!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can&apos;t<sp/>as<sp/>easily<sp/>compute<sp/>this<sp/>number<sp/>for<sp/>the<sp/>LAST<sp/>page.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>way<sp/>to<sp/>get<sp/>the<sp/>sample<sp/>offset<sp/>of<sp/>the<sp/>LAST<sp/>page<sp/>is<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>loc<sp/>from<sp/>the<sp/>previous<sp/>page.<sp/>But<sp/>what<sp/>that<sp/>returns<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>_exactly_<sp/>the<sp/>place<sp/>where<sp/>we<sp/>get<sp/>our<sp/>first<sp/>non-overlapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sample.<sp/>(I<sp/>think.<sp/>Stupid<sp/>spec<sp/>for<sp/>being<sp/>ambiguous.)<sp/>So<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consistency<sp/>it&apos;s<sp/>better<sp/>to<sp/>do<sp/>that<sp/>here,<sp/>too.<sp/>However,<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>then<sp/>require<sp/>us<sp/>to<sp/>NOT<sp/>discard<sp/>all<sp/>of<sp/>the<sp/>first<sp/>frame<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode,<sp/>in<sp/>some<sp/>cases,<sp/>which<sp/>means<sp/>an<sp/>even<sp/>weirder<sp/>frame<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>extra<sp/>code.<sp/>what<sp/>a<sp/>fucking<sp/>pain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>going<sp/>to<sp/>discard<sp/>the<sp/>first<sp/>packet<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>the<sp/>seek<sp/>here,<sp/>so<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>it.<sp/>(we<sp/>could<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>better;<sp/>if<sp/>the<sp/>first<sp/>packet<sp/>is<sp/>long,<sp/>and<sp/>the<sp/>previous<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>short,<sp/>there&apos;s<sp/>actually<sp/>data<sp/>in<sp/>the<sp/>first<sp/>half<sp/>of<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet<sp/>that<sp/>doesn&apos;t<sp/>need<sp/>discarding...<sp/>but<sp/>not<sp/>worth<sp/>paying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>effort<sp/>of<sp/>tracking<sp/>that<sp/>of<sp/>that<sp/>here<sp/>and<sp/>in<sp/>the<sp/>seeking<sp/>logic)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>except<sp/>crap,<sp/>if<sp/>we<sp/>infer<sp/>it<sp/>from<sp/>the<sp/>_previous_<sp/>packet&apos;s<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>location,<sp/>we<sp/>DO<sp/>need<sp/>to<sp/>use<sp/>that<sp/>definition...<sp/>and<sp/>we<sp/>HAVE<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infer<sp/>the<sp/>start<sp/>loc<sp/>of<sp/>the<sp/>LAST<sp/>packet<sp/>from<sp/>the<sp/>previous<sp/>packet&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>location.<sp/>fuck<sp/>you,<sp/>ogg<sp/>vorbis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/>z-&gt;first_decoded_sample<sp/>=<sp/>z-&gt;last_decoded_sample<sp/>-<sp/>samples;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>file<sp/>state<sp/>to<sp/>where<sp/>we<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/>set_file_offset(f,<sp/>z-&gt;page_start);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>file<sp/>state<sp/>to<sp/>where<sp/>we<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>bail:</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/>set_file_offset(f,<sp/>z-&gt;page_start);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_seek_frame_from_page(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/>uint32<sp/>page_start,<sp/>uint32<sp/>first_sample,<sp/>uint32<sp/>target_sample,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fine)</highlight></codeline>
<codeline lineno="4319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_start,<sp/>left_end,<sp/>right_start,<sp/>right_end,<sp/>mode,i;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame=0;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>frame_start;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frames_to_skip,<sp/>data_to_skip;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first_sample<sp/>is<sp/>the<sp/>sample<sp/>#<sp/>of<sp/>the<sp/>first<sp/>sample<sp/>that<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overlap<sp/>the<sp/>previous<sp/>page...<sp/>note<sp/>that<sp/>this<sp/>requires<sp/>us<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_partially_<sp/>discard<sp/>the<sp/>first<sp/>packet!<sp/>bleh.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/>set_file_offset(f,<sp/>page_start);</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>page<sp/>resync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/>frame_start<sp/>=<sp/>first_sample;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>frame<sp/>start<sp/>is<sp/>where<sp/>the<sp/>previous<sp/>packet&apos;s<sp/>last<sp/>decoded<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was,<sp/>which<sp/>corresponds<sp/>to<sp/>left_end...<sp/>EXCEPT<sp/>if<sp/>the<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet<sp/>was<sp/>long<sp/>and<sp/>this<sp/>packet<sp/>is<sp/>short?<sp/>Probably<sp/>a<sp/>bug<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>we<sp/>can<sp/>start<sp/>decoding<sp/>frames...<sp/>we&apos;ll<sp/>only<sp/>FAKE<sp/>decode<sp/>them,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>until<sp/>we<sp/>find<sp/>the<sp/>frame<sp/>that<sp/>contains<sp/>our<sp/>sample;<sp/>then<sp/>we&apos;ll<sp/>rewind,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>try<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_decode_initial(f,<sp/>&amp;left_start,<sp/>&amp;left_end,<sp/>&amp;right_start,<sp/>&amp;right_end,<sp/>&amp;mode))</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>left_end;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>left_start;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>window<sp/>starts<sp/>at<sp/>left_start;<sp/>the<sp/>last<sp/>valid<sp/>sample<sp/>we<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>next<sp/>frame&apos;s<sp/>window<sp/>start<sp/>is<sp/>right_start-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_sample<sp/>&lt;<sp/>frame_start<sp/>+<sp/>right_start-start)</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flush_packet(f);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;eof)</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_start<sp/>+=<sp/>right_start<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++frame;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>at<sp/>this<sp/>point,<sp/>the<sp/>sample<sp/>we<sp/>want<sp/>is<sp/>contained<sp/>in<sp/>frame<sp/>#&apos;frame&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>decode<sp/>frame<sp/>#&apos;frame&apos;<sp/>normally,<sp/>we<sp/>have<sp/>to<sp/>decode<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>frame<sp/>first...<sp/>but<sp/>if<sp/>it&apos;s<sp/>the<sp/>FIRST<sp/>frame<sp/>of<sp/>the<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can&apos;t.<sp/>if<sp/>it&apos;s<sp/>the<sp/>first<sp/>frame,<sp/>it<sp/>means<sp/>it<sp/>falls<sp/>in<sp/>the<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>first<sp/>frame<sp/>that<sp/>doesn&apos;t<sp/>overlap<sp/>either<sp/>of<sp/>the<sp/>other<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so,<sp/>if<sp/>we<sp/>have<sp/>to<sp/>handle<sp/>that<sp/>case<sp/>for<sp/>the<sp/>first<sp/>frame,<sp/>we<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>handle<sp/>it<sp/>for<sp/>all<sp/>of<sp/>them,<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_sample<sp/>&gt;<sp/>frame_start<sp/>+<sp/>(left_end<sp/>-<sp/>left_start))<sp/>{</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>what<sp/>we<sp/>want<sp/>to<sp/>do<sp/>is<sp/>go<sp/>ahead<sp/>and<sp/>just<sp/>immediately<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>frame,<sp/>but<sp/>then<sp/>make<sp/>it<sp/>so<sp/>the<sp/>next<sp/>get_frame_float()<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>already-decoded<sp/>data?<sp/>or<sp/>do<sp/>we<sp/>want<sp/>to<sp/>go<sp/>ahead<sp/>and<sp/>rewind,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>leave<sp/>a<sp/>flag<sp/>saying<sp/>to<sp/>skip<sp/>the<sp/>first<sp/>N<sp/>data?<sp/>let&apos;s<sp/>do<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frames_to_skip<sp/>=<sp/>frame;<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>frame<sp/>#1,<sp/>skip<sp/>1<sp/>frame<sp/>(#0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_to_skip<sp/>=<sp/>left_end<sp/>-<sp/>left_start;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>we<sp/>want<sp/>to<sp/>skip<sp/>frames<sp/>0,<sp/>1,<sp/>2,<sp/>...<sp/>frame-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(which<sp/>means<sp/>frame-2+1<sp/>total<sp/>frames)<sp/>then<sp/>decode<sp/>frame-1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>leave<sp/>frame<sp/>pending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frames_to_skip<sp/>=<sp/>frame<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(frames_to_skip<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_to_skip<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/>set_file_offset(f,<sp/>page_start);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>force<sp/>page<sp/>resync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>frames_to_skip;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maybe_start_packet(f);</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flush_packet(f);</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_to_skip<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n<sp/>=<sp/>f-&gt;blocksize_0<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;discard_samples_deferred<sp/>=<sp/>data_to_skip;</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_window[i][j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_start<sp/>+=<sp/>data_to_skip;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_pump_first_frame(f);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>the<sp/>NEXT<sp/>decoded<sp/>frame<sp/>will<sp/>generate<sp/>the<sp/>desired<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fine)<sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>if<sp/>we&apos;re<sp/>doing<sp/>sample<sp/>accurate<sp/>streaming,<sp/>we<sp/>want<sp/>to<sp/>go<sp/>ahead<sp/>and<sp/>decode<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_sample<sp/>!=<sp/>frame_start)<sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_get_frame_float(f,<sp/>&amp;n,<sp/>NULL);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(target_sample<sp/>&gt;<sp/>frame_start);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(f-&gt;channel_buffer_start<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(target_sample-frame_start)<sp/>&lt;<sp/>f-&gt;channel_buffer_end);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>+=<sp/>(target_sample<sp/>-<sp/>frame_start);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_seek_base(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fine)</highlight></codeline>
<codeline lineno="4427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><ref refid="structProbedPage" kindref="compound">ProbedPage</ref><sp/>p[2],q;</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_api_mixing);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>we<sp/>know<sp/>the<sp/>location<sp/>of<sp/>the<sp/>last<sp/>page?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;p_last.page_start<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>z<sp/>=<sp/>stb_vorbis_stream_length_in_samples(f);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_cant_find_last_page);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/>p[0]<sp/>=<sp/>f-&gt;p_first;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/>p[1]<sp/>=<sp/>f-&gt;p_last;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_number<sp/>&gt;=<sp/>f-&gt;p_last.last_decoded_sample)</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample_number<sp/>=<sp/>f-&gt;p_last.last_decoded_sample-1;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_number<sp/>&lt;<sp/>f-&gt;p_first.last_decoded_sample)<sp/>{</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_seek_frame_from_page(f,<sp/>p[0].page_start,<sp/>0,<sp/>sample_number,<sp/>fine);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attempts=0;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p[0].page_end<sp/>&lt;<sp/>p[1].page_start)<sp/>{</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>probe;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>start_offset,<sp/>end_offset;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>start_sample,<sp/>end_sample;</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>these<sp/>into<sp/>local<sp/>variables<sp/>so<sp/>we<sp/>can<sp/>tweak<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>any<sp/>are<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_offset<sp/>=<sp/>p[0].page_end;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_offset<sp/><sp/><sp/>=<sp/>p[1].after_previous_page_start;<sp/></highlight><highlight class="comment">//<sp/>an<sp/>address<sp/>known<sp/>to<sp/>seek<sp/>to<sp/>page<sp/>p[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_sample<sp/>=<sp/>p[0].last_decoded_sample;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_sample<sp/><sp/><sp/>=<sp/>p[1].last_decoded_sample;</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>there<sp/>is<sp/>no<sp/>such<sp/>tweaking<sp/>logic<sp/>needed/possible?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_sample<sp/>==<sp/>SAMPLE_unknown<sp/>||<sp/>end_sample<sp/>==<sp/>SAMPLE_unknown)</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>want<sp/>to<sp/>lerp<sp/>between<sp/>these<sp/>for<sp/>the<sp/>target<sp/>samples...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>1:<sp/>we<sp/>need<sp/>to<sp/>bias<sp/>towards<sp/>the<sp/>page<sp/>start...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_offset<sp/>+<sp/>4000<sp/>&lt;<sp/>end_offset)</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_offset<sp/>-=<sp/>4000;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>compute<sp/>an<sp/>interpolated<sp/>search<sp/>loc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe<sp/>=<sp/>start_offset<sp/>+<sp/>(int)<sp/>floor((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(end_offset<sp/>-<sp/>start_offset)<sp/>/<sp/>(end_sample<sp/>-<sp/>start_sample)<sp/>*<sp/>(sample_number<sp/>-<sp/>start_sample));</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>we<sp/>need<sp/>to<sp/>bias<sp/>towards<sp/>binary<sp/>search...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>is<sp/>a<sp/>little<sp/>wonky<sp/>to<sp/>allow<sp/>for<sp/>full<sp/>32-bit<sp/>unsigned<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attempts<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>probe2<sp/>=<sp/>start_offset<sp/>+<sp/>((end_offset<sp/>-<sp/>start_offset)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attempts<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe<sp/>=<sp/>probe2;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(probe<sp/>&lt;<sp/>probe2)</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe<sp/>=<sp/>probe<sp/>+<sp/>((probe2<sp/>-<sp/>probe)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe<sp/>=<sp/>probe2<sp/>+<sp/>((probe<sp/>-<sp/>probe2)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++attempts;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>probe);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_find_page(f,<sp/>NULL,<sp/>NULL))<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_analyze_page(f,<sp/>&amp;q))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.after_previous_page_start<sp/>=<sp/>probe;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>possible<sp/>we&apos;ve<sp/>just<sp/>found<sp/>the<sp/>last<sp/>page<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q.page_start<sp/>==<sp/>p[1].page_start)<sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_number<sp/>&lt;<sp/>q.last_decoded_sample)</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0].last_decoded_sample<sp/>&lt;=<sp/>sample_number<sp/>&amp;&amp;<sp/>sample_number<sp/>&lt;<sp/>p[1].last_decoded_sample)<sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_seek_frame_from_page(f,<sp/>p[1].page_start,<sp/>p[0].last_decoded_sample,<sp/>sample_number,<sp/>fine);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_seek_failed);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_seek_frame(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_number)</highlight></codeline>
<codeline lineno="4512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vorbis_seek_base(f,<sp/>sample_number,<sp/>FALSE);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_seek(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_number)</highlight></codeline>
<codeline lineno="4517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vorbis_seek_base(f,<sp/>sample_number,<sp/>TRUE);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_vorbis_seek_start(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="4522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))<sp/>{<sp/>error(f,<sp/>VORBIS_invalid_api_mixing);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/>set_file_offset(f,<sp/>f-&gt;first_audio_page_offset);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/>f-&gt;previous_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/>f-&gt;first_decode<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/>f-&gt;next_seg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/>vorbis_pump_first_frame(f);</highlight></codeline>
<codeline lineno="4529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_stream_length_in_samples(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="4532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restore_offset,<sp/>previous_safe;</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/>last_page_loc;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_api_mixing);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;total_samples)<sp/>{</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>lo,hi;</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header[6];</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>store<sp/>the<sp/>current<sp/>decode<sp/>position<sp/>so<sp/>we<sp/>can<sp/>restore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restore_offset<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>want<sp/>to<sp/>seek<sp/>back<sp/>64K<sp/>from<sp/>the<sp/>end<sp/>(the<sp/>last<sp/>page<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>at<sp/>most<sp/>a<sp/>little<sp/>less<sp/>than<sp/>64K,<sp/>but<sp/>let&apos;s<sp/>allow<sp/>a<sp/>little<sp/>slop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;stream_len<sp/>&gt;=<sp/>65536<sp/>&amp;&amp;<sp/>f-&gt;stream_len-65536<sp/>&gt;=<sp/>f-&gt;first_audio_page_offset)</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_safe<sp/>=<sp/>f-&gt;stream_len<sp/>-<sp/>65536;</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_safe<sp/>=<sp/>f-&gt;first_audio_page_offset;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>previous_safe);</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>previous_safe<sp/>is<sp/>now<sp/>our<sp/>candidate<sp/>&apos;earliest<sp/>known<sp/>place<sp/>that<sp/>seeking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>will<sp/>lead<sp/>to<sp/>the<sp/>final<sp/>page&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_find_page(f,<sp/>&amp;end,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*)&amp;last))<sp/>{</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>can&apos;t<sp/>find<sp/>a<sp/>page,<sp/>we&apos;re<sp/>hosed!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS_cant_find_last_page;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;total_samples<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>are<sp/>more<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_page_loc<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>when<sp/>the<sp/>last_page<sp/>flag<sp/>is<sp/>set,<sp/>not<sp/>when<sp/>we<sp/>reach<sp/>eof;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>allows<sp/>us<sp/>to<sp/>stop<sp/>short<sp/>of<sp/>a<sp/>&apos;file_section&apos;<sp/>end<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>checking<sp/>the<sp/>length<sp/>of<sp/>the<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!last)<sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>end);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_find_page(f,<sp/>&amp;end,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*)&amp;last))<sp/>{</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>page<sp/>we<sp/>found<sp/>didn&apos;t<sp/>have<sp/>the<sp/>&apos;last<sp/>page&apos;<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set.<sp/>whoops!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_safe<sp/>=<sp/>last_page_loc+1;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_page_loc<sp/>=<sp/>stb_vorbis_get_file_offset(f);</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>last_page_loc);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getn(f,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)header,<sp/>6);</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>the<sp/>absolute<sp/>granule<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>get32(f);</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>get32(f);</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lo<sp/>==<sp/>0xffffffff<sp/>&amp;&amp;<sp/>hi<sp/>==<sp/>0xffffffff)<sp/>{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;error<sp/>=<sp/>VORBIS_cant_find_last_page;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;total_samples<sp/>=<sp/>SAMPLE_unknown;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hi)</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>0xfffffffe;<sp/></highlight><highlight class="comment">//<sp/>saturate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;total_samples<sp/>=<sp/>lo;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_last.page_start<sp/>=<sp/>last_page_loc;</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_last.page_end<sp/><sp/><sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_last.last_decoded_sample<sp/>=<sp/>lo;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_last.first_decoded_sample<sp/>=<sp/>SAMPLE_unknown;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;p_last.after_previous_page_start<sp/>=<sp/>previous_safe;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>done:</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_file_offset(f,<sp/>restore_offset);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;total_samples<sp/>==<sp/>SAMPLE_unknown<sp/>?<sp/>0<sp/>:<sp/>f-&gt;total_samples;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_vorbis_stream_length_in_seconds(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f)</highlight></codeline>
<codeline lineno="4609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_vorbis_stream_length_in_samples(f)<sp/>/<sp/>(float)<sp/>f-&gt;sample_rate;</highlight></codeline>
<codeline lineno="4611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_frame_float(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*channels,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***output)</highlight></codeline>
<codeline lineno="4616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>right,left,i;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_PUSH_MODE(f))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(f,<sp/>VORBIS_invalid_api_mixing);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vorbis_decode_packet(f,<sp/>&amp;len,<sp/>&amp;left,<sp/>&amp;right))<sp/>{</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>vorbis_finish_frame(f,<sp/>len,<sp/>left,<sp/>right);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>f-&gt;channels;<sp/>++i)</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;outputs[i]<sp/>=<sp/>f-&gt;channel_buffers[i]<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/>f-&gt;channel_buffer_end<sp/><sp/><sp/>=<sp/>left+len;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(channels)<sp/>*channels<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output)<sp/><sp/><sp/>*output<sp/>=<sp/>f-&gt;outputs;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*<sp/>stb_vorbis_open_file_section(FILE<sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_on_free,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*alloc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="4640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/>p;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/>vorbis_init(&amp;p,<sp/>alloc);</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/>p.f<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/>p.f_start<sp/>=<sp/>ftell(file);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/>p.stream_len<sp/><sp/><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/>p.close_on_free<sp/>=<sp/>close_on_free;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_decoder(&amp;p))<sp/>{</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>vorbis_alloc(&amp;p);</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*f<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_pump_first_frame(f);</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>*error<sp/>=<sp/>p.error;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/>vorbis_deinit(&amp;p);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*<sp/>stb_vorbis_open_file(FILE<sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_on_free,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*alloc)</highlight></codeline>
<codeline lineno="4661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>start;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/>start<sp/>=<sp/>ftell(file);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/>fseek(file,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>ftell(file)<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/>fseek(file,<sp/>start,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_vorbis_open_file_section(file,<sp/>close_on_free,<sp/>error,<sp/>alloc,<sp/>len);</highlight></codeline>
<codeline lineno="4668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*<sp/>stb_vorbis_open_filename(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*alloc)</highlight></codeline>
<codeline lineno="4671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_vorbis_open_file(f,<sp/>TRUE,<sp/>error,<sp/>alloc);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>*error<sp/>=<sp/>VORBIS_file_open_failure;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*<sp/>stb_vorbis_open_memory(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error,<sp/><ref refid="structstb__vorbis__alloc" kindref="compound">stb_vorbis_alloc</ref><sp/>*alloc)</highlight></codeline>
<codeline lineno="4681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/>p;</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/>vorbis_init(&amp;p,<sp/>alloc);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/>p.stream<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/>p.stream_end<sp/>=<sp/>data<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/>p.stream_start<sp/>=<sp/>p.stream;</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/>p.stream_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/>p.push_mode<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_decoder(&amp;p))<sp/>{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>vorbis_alloc(&amp;p);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*f<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_pump_first_frame(f);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>*error<sp/>=<sp/>p.error;</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/>vorbis_deinit(&amp;p);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_INTEGER_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLAYBACK_MONO<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLAYBACK_LEFT<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLAYBACK_RIGHT<sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>L<sp/><sp/>(PLAYBACK_LEFT<sp/><sp/>|<sp/>PLAYBACK_MONO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C<sp/><sp/>(PLAYBACK_LEFT<sp/><sp/>|<sp/>PLAYBACK_RIGHT<sp/>|<sp/>PLAYBACK_MONO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>R<sp/><sp/>(PLAYBACK_RIGHT<sp/>|<sp/>PLAYBACK_MONO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int8<sp/>channel_position[7][6]<sp/>=</highlight></codeline>
<codeline lineno="4713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/>{<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/>{<sp/>C<sp/>},</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/>{<sp/>L,<sp/>R<sp/>},</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/>{<sp/>L,<sp/>C,<sp/>R<sp/>},</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/>{<sp/>L,<sp/>R,<sp/>L,<sp/>R<sp/>},</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/>{<sp/>L,<sp/>C,<sp/>R,<sp/>L,<sp/>R<sp/>},</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/>{<sp/>L,<sp/>C,<sp/>R,<sp/>L,<sp/>R,<sp/>C<sp/>},</highlight></codeline>
<codeline lineno="4721"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_FAST_SCALED_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4725" refid="unionfloat__conv" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/>}<sp/><ref refid="unionfloat__conv" kindref="compound">float_conv</ref>;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb_vorbis_float_size_test[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)==4<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>==<sp/>4];</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>FASTDEF(x)<sp/>float_conv<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>(1&lt;&lt;23)<sp/>to<sp/>convert<sp/>to<sp/>int,<sp/>then<sp/>divide<sp/>by<sp/>2^SHIFT,<sp/>then<sp/>add<sp/>0.5/2^SHIFT<sp/>to<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>MAGIC(SHIFT)<sp/>(1.5f<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>(23-SHIFT))<sp/>+<sp/>0.5f/(1<sp/>&lt;&lt;<sp/>SHIFT))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>ADDEND(SHIFT)<sp/>(((150-SHIFT)<sp/>&lt;&lt;<sp/>23)<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>22))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>FAST_SCALED_FLOAT_TO_INT(temp,x,s)<sp/>(temp.f<sp/>=<sp/>(x)<sp/>+<sp/>MAGIC(s),<sp/>temp.i<sp/>-<sp/>ADDEND(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>check_endianness()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>FAST_SCALED_FLOAT_TO_INT(temp,x,s)<sp/>((int)<sp/>((x)<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>(s))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>check_endianness()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>FASTDEF(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_samples(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/>check_endianness();</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FASTDEF(temp);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>FAST_SCALED_FLOAT_TO_INT(temp,<sp/>src[i],15);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(v<sp/>+<sp/>32768)<sp/>&gt;<sp/>65535)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v<sp/>&lt;<sp/>0<sp/>?<sp/>-32768<sp/>:<sp/>32767;</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_samples(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>BUFFER_SIZE<sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>buffer[BUFFER_SIZE];</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,o,n<sp/>=<sp/>BUFFER_SIZE;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/>check_endianness();</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>len;<sp/>o<sp/>+=<sp/>BUFFER_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>+<sp/>n<sp/>&gt;<sp/>len)<sp/>n<sp/>=<sp/>len<sp/>-<sp/>o;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>num_c;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel_position[num_c][j]<sp/>&amp;<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]<sp/>+=<sp/>data[j][d_offset+o+i];</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FASTDEF(temp);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>FAST_SCALED_FLOAT_TO_INT(temp,buffer[i],15);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(v<sp/>+<sp/>32768)<sp/>&gt;<sp/>65535)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v<sp/>&lt;<sp/>0<sp/>?<sp/>-32768<sp/>:<sp/>32767;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[o+i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_selector[3][2]<sp/>=<sp/>{<sp/>{0},<sp/>{PLAYBACK_MONO},<sp/>{PLAYBACK_LEFT,<sp/>PLAYBACK_RIGHT}<sp/>};</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_stereo_samples(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>BUFFER_SIZE<sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>buffer[BUFFER_SIZE];</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,o,n<sp/>=<sp/>BUFFER_SIZE<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>o<sp/>is<sp/>the<sp/>offset<sp/>in<sp/>the<sp/>source<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/>check_endianness();</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>len;<sp/>o<sp/>+=<sp/>BUFFER_SIZE<sp/>&gt;&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>o2<sp/>is<sp/>the<sp/>offset<sp/>in<sp/>the<sp/>output<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o2<sp/>=<sp/>o<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>+<sp/>n<sp/>&gt;<sp/>len)<sp/>n<sp/>=<sp/>len<sp/>-<sp/>o;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>num_c;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>channel_position[num_c][j]<sp/>&amp;<sp/>(PLAYBACK_LEFT<sp/>|<sp/>PLAYBACK_RIGHT);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>(PLAYBACK_LEFT<sp/>|<sp/>PLAYBACK_RIGHT))<sp/>{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i*2+0]<sp/>+=<sp/>data[j][d_offset+o+i];</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i*2+1]<sp/>+=<sp/>data[j][d_offset+o+i];</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>PLAYBACK_LEFT)<sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i*2+0]<sp/>+=<sp/>data[j][d_offset+o+i];</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>PLAYBACK_RIGHT)<sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i*2+1]<sp/>+=<sp/>data[j][d_offset+o+i];</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(n&lt;&lt;1);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FASTDEF(temp);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>FAST_SCALED_FLOAT_TO_INT(temp,buffer[i],15);</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(v<sp/>+<sp/>32768)<sp/>&gt;<sp/>65535)</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v<sp/>&lt;<sp/>0<sp/>?<sp/>-32768<sp/>:<sp/>32767;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[o2+i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_samples_short(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples)</highlight></codeline>
<codeline lineno="4821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf_c<sp/>!=<sp/>data_c<sp/>&amp;&amp;<sp/>buf_c<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>data_c<sp/>&lt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_selector[3][2]<sp/>=<sp/>{<sp/>{0},<sp/>{PLAYBACK_MONO},<sp/>{PLAYBACK_LEFT,<sp/>PLAYBACK_RIGHT}<sp/>};</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>buf_c;<sp/>++i)</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_samples(channel_selector[buf_c][i],<sp/>buffer[i]+b_offset,<sp/>data_c,<sp/>data,<sp/>d_offset,<sp/>samples);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>buf_c<sp/>&lt;<sp/>data_c<sp/>?<sp/>buf_c<sp/>:<sp/>data_c;</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>++i)</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_samples(buffer[i]+b_offset,<sp/>data[i],<sp/>samples);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>buf_c;<sp/>++i)</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer[i]+b_offset,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>*<sp/>samples);</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"></highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_frame_short(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples)</highlight></codeline>
<codeline lineno="4837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**output;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;output);</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>num_samples)<sp/>len<sp/>=<sp/>num_samples;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_samples_short(num_c,<sp/>buffer,<sp/>0,<sp/>f-&gt;channels,<sp/>output,<sp/>0,<sp/>len);</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_channels_short_interleaved(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/>check_endianness();</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf_c<sp/>!=<sp/>data_c<sp/>&amp;&amp;<sp/>buf_c<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>data_c<sp/>&lt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(buf_c<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>buf_c;<sp/>++i)</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_stereo_samples(buffer,<sp/>data_c,<sp/>data,<sp/>d_offset,<sp/>len);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>buf_c<sp/>&lt;<sp/>data_c<sp/>?<sp/>buf_c<sp/>:<sp/>data_c;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FASTDEF(temp);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>data[i][d_offset+j];</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>FAST_SCALED_FLOAT_TO_INT(temp,<sp/>f,15);</highlight><highlight class="comment">//data[i][d_offset+j],15);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(v<sp/>+<sp/>32768)<sp/>&gt;<sp/>65535)</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v<sp/>&lt;<sp/>0<sp/>?<sp/>-32768<sp/>:<sp/>32767;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>buf_c;<sp/>++i)</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"></highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_frame_short_interleaved(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shorts)</highlight></codeline>
<codeline lineno="4873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**output;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_c<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_vorbis_get_frame_short(f,num_c,&amp;buffer,<sp/>num_shorts);</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;output);</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len*num_c<sp/>&gt;<sp/>num_shorts)<sp/>len<sp/>=<sp/>num_shorts<sp/>/<sp/>num_c;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_channels_short_interleaved(num_c,<sp/>buffer,<sp/>f-&gt;channels,<sp/>output,<sp/>0,<sp/>len);</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_samples_short_interleaved(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shorts)</highlight></codeline>
<codeline lineno="4886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>num_shorts<sp/>/<sp/>channels;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>channels)<sp/>z<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>-<sp/>f-&gt;channel_buffer_start;</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+k<sp/>&gt;=<sp/>len)<sp/>k<sp/>=<sp/>len<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k)</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_channels_short_interleaved(channels,<sp/>buffer,<sp/>f-&gt;channels,<sp/>f-&gt;channel_buffers,<sp/>f-&gt;channel_buffer_start,<sp/>k);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>k*channels;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>len)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;outputs))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_samples_short(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>channels)<sp/>z<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>-<sp/>f-&gt;channel_buffer_start;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+k<sp/>&gt;=<sp/>len)<sp/>k<sp/>=<sp/>len<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k)</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_samples_short(channels,<sp/>buffer,<sp/>n,<sp/>f-&gt;channels,<sp/>f-&gt;channel_buffers,<sp/>f-&gt;channel_buffer_start,<sp/>k);</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>len)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;outputs))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VORBIS_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_decode_filename(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*channels,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**output)</highlight></codeline>
<codeline lineno="4927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len,<sp/>offset,<sp/>total,<sp/>limit,<sp/>error;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*v<sp/>=<sp/>stb_vorbis_open_filename(filename,<sp/>&amp;error,<sp/>NULL);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/>limit<sp/>=<sp/>v-&gt;channels<sp/>*<sp/>4096;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/>*channels<sp/>=<sp/>v-&gt;channels;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/>offset<sp/>=<sp/>data_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/>total<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>malloc(total<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_close(v);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_vorbis_get_frame_short_interleaved(v,<sp/>v-&gt;channels,<sp/>data+offset,<sp/>total-offset);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>n<sp/>*<sp/>v-&gt;channels;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>+<sp/>limit<sp/>&gt;<sp/>total)<sp/>{</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*data2;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>realloc(data,<sp/>total<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data2<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_close(v);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>data2;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/>*output<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_len;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_decode_memory(uint8<sp/>*mem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*channels,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**output)</highlight></codeline>
<codeline lineno="4964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len,<sp/>offset,<sp/>total,<sp/>limit,<sp/>error;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*v<sp/>=<sp/>stb_vorbis_open_memory(mem,<sp/>len,<sp/>&amp;error,<sp/>NULL);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/>limit<sp/>=<sp/>v-&gt;channels<sp/>*<sp/>4096;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/>*channels<sp/>=<sp/>v-&gt;channels;</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/>offset<sp/>=<sp/>data_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/>total<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>malloc(total<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_close(v);</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_vorbis_get_frame_short_interleaved(v,<sp/>v-&gt;channels,<sp/>data+offset,<sp/>total-offset);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>n<sp/>*<sp/>v-&gt;channels;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>+<sp/>limit<sp/>&gt;<sp/>total)<sp/>{</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*data2;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>realloc(data,<sp/>total<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data2<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_vorbis_close(v);</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>data2;</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/>*output<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_len;</highlight></codeline>
<codeline lineno="4997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_samples_float_interleaved(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_floats)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>num_floats<sp/>/<sp/>channels;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>channels)<sp/>z<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>-<sp/>f-&gt;channel_buffer_start;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+k<sp/>&gt;=<sp/>len)<sp/>k<sp/>=<sp/>len<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>k;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/>f-&gt;channel_buffers[i][f-&gt;channel_buffer_start+j];</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>channels;<sp/>++i)</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>len)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;outputs))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vorbis_get_samples_float(<ref refid="structstb__vorbis" kindref="compound">stb_vorbis</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples)</highlight></codeline>
<codeline lineno="5026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**outputs;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>f-&gt;channels;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>channels)<sp/>z<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>num_samples)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>f-&gt;channel_buffer_end<sp/>-<sp/>f-&gt;channel_buffer_start;</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+k<sp/>&gt;=<sp/>num_samples)<sp/>k<sp/>=<sp/>num_samples<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k)<sp/>{</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffer[i]+n,<sp/>f-&gt;channel_buffers+f-&gt;channel_buffer_start,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)*k);</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>channels;<sp/>++i)</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer[i]+n,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;channel_buffer_start<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>num_samples)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_vorbis_get_frame_float(f,<sp/>NULL,<sp/>&amp;outputs))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_VORBIS_NO_PULLDATA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_VORBIS_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ck84/src/Maximilian/src/libs/stb_vorbis.c"/>
  </compounddef>
</doxygen>
